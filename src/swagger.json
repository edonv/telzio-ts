{
  "openapi": "3.0.1",
  "info": {
    "title": "Telzio API",
    "description": "Telzio's next generation API to power dashboard, mobile and desktop apps.",
    "termsOfService": "https://telzio.com/legal/terms",
    "contact": {
      "name": "Telzio, Inc.",
      "email": "support@telzio.com"
    },
    "version": "v3",
    "x-logo": {
      "altText": "Telzio Logo",
      "url": "https://cdn.telzio.com/img/brand/telzio.svg"
    }
  },
  "servers": [
    {
      "url": "https://api.telzio.com"
    }
  ],
  "paths": {
    "/v3/auth": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Authenticate",
        "description": "Request a JWT claims token and basic provisioning data.",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "required": [
                  "client_platform",
                  "password",
                  "username"
                ],
                "type": "object",
                "properties": {
                  "username": {
                    "maxLength": 64,
                    "type": "string",
                    "description": "The user's username. Not case sensitive.",
                    "example": "pgriffin"
                  },
                  "password": {
                    "maxLength": 128,
                    "type": "string",
                    "description": "The user's password. Case sensitive.",
                    "example": "TheBirdIsTheWord72"
                  },
                  "mfa_code": {
                    "maxLength": 6,
                    "type": "string",
                    "description": "The MFA code for the user's login session. Required if multi-factor authentication is enabled on the user's account.\r\nIf MFA is enabled and this property is not included in the request, the API will reject the login and ask for an MFA code.",
                    "example": "123456"
                  },
                  "client_platform": {
                    "$ref": "#/components/schemas/ClientPlatform"
                  }
                },
                "discriminator": {
                  "propertyName": "client_platform",
                  "mapping": {
                    "mobile": "#/components/schemas/AuthenticationRequestMobile",
                    "browser": "#/components/schemas/AuthenticationRequestBrowser",
                    "desktop": "#/components/schemas/AuthenticationRequestDesktop",
                    "custom": "#/components/schemas/AuthenticationRequestCustom"
                  }
                }
              },
              "encoding": {
                "username": {
                  "style": "form"
                },
                "password": {
                  "style": "form"
                },
                "mfa_code": {
                  "style": "form"
                },
                "client_platform": {
                  "style": "form"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Provision"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenError"
                }
              }
            }
          }
        }
      }
    },
    "/v3/auth/provision": {
      "get": {
        "tags": [
          "Authentication"
        ],
        "summary": "Provision",
        "description": "Refreshes the user's initial provisioning data, including basic account information and data about available numbers.",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Provision"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenError"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer Token": [ ]
          }
        ]
      }
    },
    "/v3/auth/sip/parameters": {
      "get": {
        "tags": [
          "Authentication"
        ],
        "summary": "SIP Session Parameters",
        "description": "Generates a one time use set of parameters needed to create a SIP Connection and WebRTC Session",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SipConnectionData"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenError"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer Token": [ ]
          }
        ]
      }
    },
    "/v3/auth/push-token": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Set a Push Token",
        "description": "Updates the user's push-token.",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "required": [
                  "device_id",
                  "token",
                  "token_type"
                ],
                "type": "object",
                "properties": {
                  "device_id": {
                    "type": "string",
                    "description": "A unique ID representing the device. This will remain the same when when logging out of the app and signing back in with a different username."
                  },
                  "token": {
                    "type": "string",
                    "description": "The push notification token created by the device."
                  },
                  "token_type": {
                    "$ref": "#/components/schemas/NotificationTokenType"
                  }
                }
              },
              "encoding": {
                "device_id": {
                  "style": "form"
                },
                "token": {
                  "style": "form"
                },
                "token_type": {
                  "style": "form"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TelzioItem"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenError"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer Token": [ ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Authentication"
        ],
        "summary": "Delete a Push Token",
        "description": "Removes a user's push token for the specified device id from the server. For example if the user logs out of the app, or if the app has been deleted from the device.",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "required": [
                  "device_id"
                ],
                "type": "object",
                "properties": {
                  "device_id": {
                    "type": "string",
                    "description": "The unique ID to identify the specific device."
                  }
                }
              },
              "encoding": {
                "device_id": {
                  "style": "form"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TelzioItem"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenError"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer Token": [ ]
          }
        ]
      }
    },
    "/v3/auth/password/reset": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Reset Password",
        "description": "Request a password reset link to be sent to the user's email. Will always return 200 OK, no matter if a matching username was found or not.\r\nIf the username was found, this method will send an email with a link that includes a token to reset the user's password. This token can be used in the update-password method.",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "required": [
                  "username"
                ],
                "type": "object",
                "properties": {
                  "username": {
                    "maxLength": 64,
                    "type": "string",
                    "description": "The username of the user to request a password reset link for.",
                    "example": "pgriffin"
                  }
                }
              },
              "encoding": {
                "username": {
                  "style": "form"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TelzioItem"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenError"
                }
              }
            }
          }
        }
      }
    },
    "/v3/auth/password/update": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Update Password",
        "description": "Updates the user's password.",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "required": [
                  "password",
                  "token",
                  "user_id"
                ],
                "type": "object",
                "properties": {
                  "user_id": {
                    "type": "string",
                    "description": "The unique ID for the user updating the password.",
                    "example": "usr_5pOkGnXqPzoK"
                  },
                  "token": {
                    "type": "string",
                    "description": "The temporary token to authenticate the user for a password update request."
                  },
                  "password": {
                    "type": "string",
                    "description": "The the user's new password"
                  }
                }
              },
              "encoding": {
                "user_id": {
                  "style": "form"
                },
                "token": {
                  "style": "form"
                },
                "password": {
                  "style": "form"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TelzioItem"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenError"
                }
              }
            }
          }
        }
      }
    },
    "/v3/call_flows": {
      "get": {
        "tags": [
          "Call Flows"
        ],
        "summary": "List Call Flows",
        "description": "Retrieves a list of all call flows if the user is an administrator or has permissions to manage call flows.",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CallFlow"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenError"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer Token": [ ]
          }
        ]
      }
    },
    "/v3/call_flows/{flow_id}": {
      "post": {
        "tags": [
          "Call Flows"
        ],
        "summary": "Update a Call Flow",
        "description": "Updates the name or extension of a Call Flow.",
        "parameters": [
          {
            "name": "flow_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": "flo_alpDrRXRD6Gb"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "extension": {
                    "type": "string",
                    "description": "The new extension of the Call Flow"
                  },
                  "name": {
                    "type": "string",
                    "description": "The new name of the Call Flow"
                  }
                }
              },
              "encoding": {
                "extension": {
                  "style": "form"
                },
                "name": {
                  "style": "form"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CallFlow"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenError"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer Token": [ ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Call Flows"
        ],
        "summary": "Delete a Call Flow",
        "description": "Permanently deletes a Call Flow.",
        "parameters": [
          {
            "name": "flow_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": "flo_zo4PAj2bk97E"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenError"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer Token": [ ]
          }
        ]
      }
    },
    "/v3/calls/{call_id}": {
      "get": {
        "tags": [
          "Calls"
        ],
        "summary": "Retrieve a Call",
        "description": "Returns the details for a call.",
        "parameters": [
          {
            "name": "call_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Call"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenError"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer Token": [ ]
          }
        ]
      }
    },
    "/v3/calls/recent": {
      "get": {
        "tags": [
          "Calls"
        ],
        "summary": "List Recent Calls",
        "description": "Retrieves a list of the users most recent calls.",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "starting_after",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "ending_before",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "filter_by",
            "in": "query",
            "description": "Filter the list of recent calls",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/RecentCallFilters"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RecentCallList"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenError"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer Token": [ ]
          }
        ]
      }
    },
    "/v3/comments/{item_id}": {
      "get": {
        "tags": [
          "Comments"
        ],
        "summary": "List Comments",
        "description": "Lists comments on an item. By default sorted by `created` in descending order. Use `starting_after` and `ending_before` to do paging or retrieve latest messages since last request.",
        "parameters": [
          {
            "name": "item_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "schema": {
              "maximum": 100,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "starting_after",
            "in": "query",
            "schema": {
              "type": "string",
              "example": "com_zdVPyvQGkgvx"
            }
          },
          {
            "name": "ending_before",
            "in": "query",
            "schema": {
              "type": "string",
              "example": "com_oaVDNqm3kRGp"
            }
          },
          {
            "name": "sort_direction",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/SortDirection"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CommentList"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenError"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer Token": [ ]
          }
        ]
      },
      "post": {
        "tags": [
          "Comments"
        ],
        "summary": "Create a Comment",
        "description": "Create a new comment on an item.",
        "parameters": [
          {
            "name": "item_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "required": [
                  "text"
                ],
                "type": "object",
                "properties": {
                  "text": {
                    "maxLength": 3000,
                    "minLength": 0,
                    "type": "string",
                    "description": "The text in the comment.",
                    "example": "I May Be An Idiot, But There's One Thing I'm Not Sir, And That Is An Idiot."
                  }
                }
              },
              "encoding": {
                "text": {
                  "style": "form"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Comment"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenError"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer Token": [ ]
          }
        ]
      }
    },
    "/v3/comments/{item_id}/{comment_id}": {
      "post": {
        "tags": [
          "Comments"
        ],
        "summary": "Update a Comment",
        "description": "Updates an existing comment on an item. This can only be done by the user who created the comment in the first place.",
        "parameters": [
          {
            "name": "item_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "comment_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": "com_pWw8O2WzDV12"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "required": [
                  "text"
                ],
                "type": "object",
                "properties": {
                  "text": {
                    "maxLength": 3000,
                    "minLength": 0,
                    "type": "string",
                    "description": "The text in the comment.",
                    "example": "I May Be An Idiot, But There's One Thing I'm Not Sir, And That Is An Idiot."
                  }
                }
              },
              "encoding": {
                "text": {
                  "style": "form"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Comment"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenError"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer Token": [ ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Comments"
        ],
        "summary": "Delete a Comment",
        "description": "Deletes a comment from a voicemail. This can only be done by by an administrator or the user who created the comment.",
        "parameters": [
          {
            "name": "item_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "comment_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": "com_wQX8MzdnzPVd"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TelzioItem"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenError"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer Token": [ ]
          }
        ]
      }
    },
    "/v3/conversations/query": {
      "post": {
        "tags": [
          "Conversations"
        ],
        "summary": "Query Conversations",
        "description": "Queries if a conversation with one or more participants already exist, and returns the exiting conversation_id if it does. If a conversation exists, that the requester doesn't have access to, the conversation_id is returned, and can be used to request access to the conversation.",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "required": [
                  "participants"
                ],
                "type": "object",
                "properties": {
                  "participants": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "List of remote participants in the conversation. Currently exactly one must be provided."
                  },
                  "number_id": {
                    "type": "string",
                    "description": "Number ID this message should be sent from. The user must have access to this number.",
                    "example": "num_bG58KV4QDYlz"
                  }
                }
              },
              "encoding": {
                "participants": {
                  "style": "form"
                },
                "number_id": {
                  "style": "form"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueryConversationResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenError"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer Token": [ ]
          }
        ]
      }
    },
    "/v3/conversations/{conversation_id}/request-assignment": {
      "post": {
        "tags": [
          "Conversations"
        ],
        "summary": "Request Assignment",
        "description": "Allows the user to request that a conversation which is currently assigned to someone else, to be either closed or reassigned to the user.",
        "parameters": [
          {
            "name": "conversation_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": "cnv_bG58KVnJDYlz"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "message": {
                    "maxLength": 1000,
                    "minLength": 0,
                    "type": "string",
                    "description": "A message sent to the current owners of the conversation, optionally specifying why access is needed."
                  }
                }
              },
              "encoding": {
                "message": {
                  "style": "form"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ConversationAccessRequest"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenError"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer Token": [ ]
          }
        ]
      }
    },
    "/v3/conversations": {
      "get": {
        "tags": [
          "Conversations"
        ],
        "summary": "List Conversations",
        "description": "Retrieves a list of conversations. `Items` will only include the most recent entry. `Assignments` will only include the current assignment. `Comments` are not included in this response.",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "schema": {
              "maximum": 100,
              "minimum": 1,
              "type": "integer",
              "format": "int32",
              "default": 10
            }
          },
          {
            "name": "starting_after",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "ending_before",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConversationList"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenError"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer Token": [ ]
          }
        ]
      }
    },
    "/v3/conversations/{conversation_id}": {
      "get": {
        "tags": [
          "Conversations"
        ],
        "summary": "Retrieve a Conversation",
        "description": "This request includes the 20 most recent items (for example SMS messages) in the conversation, as well as the basic meta data, such as comments, assignments, tags, etc.",
        "parameters": [
          {
            "name": "conversation_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": "cnv_0MW8YRgzPn15"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Conversation"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConversationInaccessibleError"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer Token": [ ]
          }
        ]
      },
      "post": {
        "tags": [
          "Conversations"
        ],
        "summary": "Update a Conversation",
        "description": "Updates certain details on an existing conversation, assignments and tags.",
        "parameters": [
          {
            "name": "conversation_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": "cnv_zdVPyjBLkgvx"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "tags": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "Change the tags assigned to the conversation.",
                    "example": [
                      "tag_RJVDpg4okx5j"
                    ]
                  },
                  "assigned_user": {
                    "type": "string",
                    "description": "Reassign the conversation to another user. Only `assigned_user` or `assigned_user_group` can be sat, but not both at the same time.",
                    "example": "usr_Aq1kXgOEPrJ7"
                  },
                  "assigned_user_group": {
                    "type": "string",
                    "description": "Reassign the conversation to a group of users. Only `assigned_user` or `assigned_user_group` can be sat, but not both at the same time.",
                    "example": "usg_alpDrm7Jk6Gb"
                  },
                  "status": {
                    "$ref": "#/components/schemas/ConversationStatusOptions"
                  },
                  "read_status": {
                    "$ref": "#/components/schemas/ConversationReadStatusOptions"
                  }
                }
              },
              "encoding": {
                "tags": {
                  "style": "form"
                },
                "assigned_user": {
                  "style": "form"
                },
                "assigned_user_group": {
                  "style": "form"
                },
                "status": {
                  "style": "form"
                },
                "read_status": {
                  "style": "form"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TelzioItem"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenError"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer Token": [ ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Conversations"
        ],
        "summary": "Delete a Conversation",
        "description": "Deletes a conversation and all included items, comments, etc. _This can not be undone._",
        "parameters": [
          {
            "name": "conversation_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": "cnv_Aq1kXRml8rJ7"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TelzioItem"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenError"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer Token": [ ]
          }
        ]
      }
    },
    "/v3/conversations/{conversation_id}/messages/{message_id}": {
      "delete": {
        "tags": [
          "Conversations"
        ],
        "summary": "Delete a message in a ImMessage conversation",
        "description": "Deletes a conversation and all included items, comments, etc. _This can not be undone._",
        "parameters": [
          {
            "name": "conversation_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": "cnv_4mpDqbAl8RaQ"
            }
          },
          {
            "name": "message_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": "msg_yZG8nBRO8239"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TelzioItem"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenError"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer Token": [ ]
          }
        ]
      }
    },
    "/v3/conversations/{conversation_id}/items": {
      "get": {
        "tags": [
          "Conversations"
        ],
        "summary": "List Conversation Items",
        "description": "By default this request will retrieve 20 items ordered by `id` in descending order. Use `starting_after` for updating an already populated dataset, and `ending_before` for paging.",
        "parameters": [
          {
            "name": "conversation_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": "cnv_Ry18l0jg8G5V"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "schema": {
              "maximum": 100,
              "minimum": 1,
              "type": "integer",
              "format": "int32",
              "default": 10
            }
          },
          {
            "name": "starting_after",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/MessageIdent"
            }
          },
          {
            "name": "ending_before",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/MessageIdent"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConversationItemList"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenError"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer Token": [ ]
          }
        ]
      }
    },
    "/v3/conversations/sms/create-conversation": {
      "post": {
        "tags": [
          "Conversations"
        ],
        "summary": "Create an SMS Conversation",
        "description": "Creates a new conversation intended for an SMS message. This is a temporary endpoint that will change in the future as all item types become part of conversations.",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "required": [
                  "number_id",
                  "recipient"
                ],
                "type": "object",
                "properties": {
                  "number_id": {
                    "type": "string",
                    "description": "Number ID to send message from. Will be users default number if not specified.\r\nOnly used if creating a new conversation.",
                    "example": "num_alpDrXXJP6Gb"
                  },
                  "recipient": {
                    "type": "string",
                    "description": "Phone Number of recipient."
                  },
                  "text": {
                    "maxLength": 2048,
                    "type": "string",
                    "description": "The text to send. This can be null if media is added.",
                    "example": "Oh, and tell Cookie Monster not to phone me until he finishes rehab."
                  },
                  "media_attachments": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "List of ID's of the previously uploaded media files to attached with the message."
                  }
                }
              },
              "encoding": {
                "number_id": {
                  "style": "form"
                },
                "recipient": {
                  "style": "form"
                },
                "text": {
                  "style": "form"
                },
                "media_attachments": {
                  "style": "form"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SMS"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenError"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer Token": [ ]
          }
        ]
      }
    },
    "/v3/conversations/{conversation_id}/sms": {
      "post": {
        "tags": [
          "Conversations"
        ],
        "summary": "Send an SMS",
        "description": "Sends a new SMS as part of an existing conversation",
        "parameters": [
          {
            "name": "conversation_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": "cnv_B5Kk5jmRxDzN"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "text": {
                    "maxLength": 2048,
                    "type": "string",
                    "description": "The text to send. This can be null if media is added.",
                    "example": "Oh, and tell Cookie Monster not to phone me until he finishes rehab."
                  },
                  "media_attachments": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "List of ID's of the previously uploaded media files to attached with the message."
                  }
                }
              },
              "encoding": {
                "text": {
                  "style": "form"
                },
                "media_attachments": {
                  "style": "form"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SMS"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenError"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer Token": [ ]
          }
        ]
      }
    },
    "/v3/conversations/sms/media": {
      "post": {
        "tags": [
          "Conversations"
        ],
        "summary": "Upload Media",
        "description": "Endpoint to upload binary data and temporarily hold it before sending it in an SMS.",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "required": [
                  "file"
                ],
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "description": "The file to upload.",
                    "format": "binary"
                  }
                }
              },
              "encoding": {
                "file": {
                  "style": "form"
                }
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "required": [
                  "file"
                ],
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "description": "The file to upload.",
                    "format": "binary"
                  }
                }
              },
              "encoding": {
                "file": {
                  "style": "form"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SMSMediaUpload"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenError"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer Token": [ ]
          }
        ]
      }
    },
    "/v3/conversations/{conversation_id}/sms/{sms_id}/media/{media_id}": {
      "get": {
        "tags": [
          "Conversations"
        ],
        "summary": "Download Media",
        "description": "Retrieves a media file included in an SMS",
        "parameters": [
          {
            "name": "conversation_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": "cnv_zdVPyxRG8gvx"
            }
          },
          {
            "name": "sms_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": "msg_MxJD32p7kNro"
            }
          },
          {
            "name": "media_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": "mms_pWNkZZQVk7Bq"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenError"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer Token": [ ]
          }
        ]
      }
    },
    "/v3/data_retention/settings": {
      "get": {
        "tags": [
          "Data Retention"
        ],
        "summary": "List Settings",
        "description": "Lists the data retention settings for all data types on the account.",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataRetentionSettingList"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenError"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer Token": [ ]
          }
        ]
      }
    },
    "/v3/data_retention/settings/{setting_type}": {
      "post": {
        "tags": [
          "Data Retention"
        ],
        "summary": "Update a Setting",
        "description": "Change the number of days that various records in Telzio are retained.",
        "parameters": [
          {
            "name": "setting_type",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/DataRetentionSettingType"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "days": {
                    "maximum": 365,
                    "minimum": 7,
                    "type": "integer",
                    "description": "The number of days Telzio should retain data of this type. Setting this value to NULL will let Telzio store the data indefinitely.",
                    "format": "int32"
                  }
                }
              },
              "encoding": {
                "days": {
                  "style": "form"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TelzioItem"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenError"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer Token": [ ]
          }
        ]
      }
    },
    "/v3/faxes": {
      "get": {
        "tags": [
          "Faxes"
        ],
        "summary": "List Faxes",
        "description": "Returns the user's available Fax. By default ordered by `created` descending. Use `starting_after` and `ending_before` to do paging or retrieve latest messages since last request.",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "schema": {
              "maximum": 100,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "starting_after",
            "in": "query",
            "schema": {
              "type": "string",
              "example": "fax_wOWDexMzk15a"
            }
          },
          {
            "name": "ending_before",
            "in": "query",
            "schema": {
              "type": "string",
              "example": "fax_lXMk9EROkd0Y"
            }
          },
          {
            "name": "tags",
            "in": "query",
            "schema": {
              "type": "string",
              "items": {
                "type": "integer",
                "format": "int32"
              },
              "example": "tag_5pOkGqvxd8zo"
            }
          },
          {
            "name": "filter_by",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/FaxFilters"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FaxList"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenError"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer Token": [ ]
          }
        ]
      }
    },
    "/v3/faxes/{fax_id}": {
      "get": {
        "tags": [
          "Faxes"
        ],
        "summary": "Retrieve a Fax",
        "description": "Returns the details of an existing Fax.",
        "parameters": [
          {
            "name": "fax_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": "fax_jXmDLrQ5PgGZ"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Fax"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenError"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer Token": [ ]
          }
        ]
      },
      "post": {
        "tags": [
          "Faxes"
        ],
        "summary": "Update a Fax",
        "description": "Update status, assignments and tags on an existing fax.",
        "parameters": [
          {
            "name": "fax_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": "fax_pQq8bgvePMxN"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "status": {
                    "$ref": "#/components/schemas/FaxStatus"
                  },
                  "tags": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "Change the tags assigned to the voicemail.",
                    "example": [
                      "tag_AzlD0Mx18nbV"
                    ]
                  },
                  "assigned_user": {
                    "type": "string",
                    "description": "Reassign the voicemail to another user. Only `assigned_user` or `assigned_user_group` can be sat, but not both at the same time.",
                    "example": "usr_alpDr4ZVP6Gb"
                  },
                  "assigned_user_group": {
                    "type": "string",
                    "description": "Reassign the voicemail to a group of users. Only `assigned_user` or `assigned_user_group` can be sat, but not both at the same time.",
                    "example": "usg_5pOkGVVqPzoK"
                  }
                }
              },
              "encoding": {
                "status": {
                  "style": "form"
                },
                "tags": {
                  "style": "form"
                },
                "assigned_user": {
                  "style": "form"
                },
                "assigned_user_group": {
                  "style": "form"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FaxUpdatesResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenError"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer Token": [ ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Faxes"
        ],
        "summary": "Delete a Fax",
        "description": "Permanently delete a Fax. This can not be undone. Also deleted any comments, tags or assignments attached to the Fax.",
        "parameters": [
          {
            "name": "fax_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": "fax_pWw8Ooyy8V12"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TelzioItem"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenError"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer Token": [ ]
          }
        ]
      }
    },
    "/v3/faxes/{fax_id}/download": {
      "get": {
        "tags": [
          "Faxes"
        ],
        "summary": "Download a Fax",
        "description": "Retrieves the PDF containing the actual fax.",
        "parameters": [
          {
            "name": "fax_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": "fax_Aq1kX6rn8rJ7"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/pdf": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/pdf": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/pdf": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/pdf": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenError"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer Token": [ ]
          }
        ]
      }
    },
    "/v3/hold_music": {
      "get": {
        "tags": [
          "Hold Music"
        ],
        "summary": "List Songs",
        "description": "Get a list of all hold music songs on the account.",
        "parameters": [
          {
            "name": "options",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/HoldMusicListRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HoldMusicList"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenError"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer Token": [ ]
          }
        ]
      },
      "post": {
        "tags": [
          "Hold Music"
        ],
        "summary": "Add a Song",
        "description": "Add a new song to the library of hold music.",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "required": [
                  "file",
                  "title"
                ],
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "description": "An mp3, wav or m4a file with a max file size of 15mb and max duration of 15 min.",
                    "format": "binary"
                  },
                  "title": {
                    "maxLength": 64,
                    "type": "string",
                    "description": "The title of the song."
                  }
                }
              },
              "encoding": {
                "file": {
                  "style": "form"
                },
                "title": {
                  "style": "form"
                }
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "required": [
                  "file",
                  "title"
                ],
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "description": "An mp3, wav or m4a file with a max file size of 15mb and max duration of 15 min.",
                    "format": "binary"
                  },
                  "title": {
                    "maxLength": 64,
                    "type": "string",
                    "description": "The title of the song."
                  }
                }
              },
              "encoding": {
                "file": {
                  "style": "form"
                },
                "title": {
                  "style": "form"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HoldMusic"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenError"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer Token": [ ]
          }
        ]
      }
    },
    "/v3/hold_music/{hold_music_id}": {
      "get": {
        "tags": [
          "Hold Music"
        ],
        "summary": "Retrieve a Song",
        "description": "Retrieves the details for a specific hold music song.",
        "parameters": [
          {
            "name": "hold_music_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": "moh_5pOkGeYb8zoK"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HoldMusic"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenError"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer Token": [ ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Hold Music"
        ],
        "summary": "Delete a Song",
        "description": "Delete a hold music song.",
        "parameters": [
          {
            "name": "hold_music_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": "moh_eqVDwwAADbXv"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TelzioItem"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenError"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer Token": [ ]
          }
        ]
      }
    },
    "/v3/hold_music/{hold_music_id}/download": {
      "get": {
        "tags": [
          "Hold Music"
        ],
        "summary": "Download a Song",
        "description": "Download the wav encoded hold music song.",
        "parameters": [
          {
            "name": "hold_music_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": "moh_yZG8nVBz8239"
            }
          },
          {
            "name": "format",
            "in": "query",
            "description": "The format of the returned file.",
            "schema": {
              "$ref": "#/components/schemas/AudioFormat"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "audio/wav": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              },
              "audio/mp3": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "audio/wav": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestError"
                }
              },
              "audio/mp3": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "audio/wav": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              },
              "audio/mp3": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "audio/wav": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenError"
                }
              },
              "audio/mp3": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenError"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer Token": [ ]
          }
        ]
      }
    },
    "/v3/legal": {
      "get": {
        "tags": [
          "Legal Policies"
        ],
        "summary": "List Policies",
        "description": "Returns all effective and upcoming policies in their most recent version.",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LegalPolicyList"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenError"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer Token": [ ]
          }
        ]
      }
    },
    "/v3/legal/{policy_key}/{policy_version}": {
      "get": {
        "tags": [
          "Legal Policies"
        ],
        "summary": "Retrieve a Policy",
        "description": "Returns policy description for the specified policy key and version",
        "parameters": [
          {
            "name": "policy_key",
            "in": "path",
            "description": "Policy key to view",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "policy_version",
            "in": "path",
            "description": "Policy version to view",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LegalPolicy"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenError"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer Token": [ ]
          }
        ]
      }
    },
    "/v3/legal/{policy_key}/{policy_version}/consent": {
      "post": {
        "tags": [
          "Legal Policies"
        ],
        "summary": "Consent",
        "description": "Provides consent for the specified policy. If a new claims token is returned this must be used for all subsequent requests to the API",
        "parameters": [
          {
            "name": "policy_key",
            "in": "path",
            "description": "The policy key of the policy you want to consent to.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "policy_version",
            "in": "path",
            "description": "The policy version of the policy you want to consent to.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Provision"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenError"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer Token": [ ]
          }
        ]
      }
    },
    "/v3/logging": {
      "post": {
        "tags": [
          "Logging"
        ],
        "summary": "Create Entries",
        "description": "Submit technical log entries from the client app.",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "required": [
                  "client_platform",
                  "entries"
                ],
                "type": "object",
                "properties": {
                  "client_platform": {
                    "$ref": "#/components/schemas/ClientPlatform"
                  },
                  "entries": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/LogEntry"
                    },
                    "description": "A list of entries to submit to the log.\r\nYou can submit up to 100 entries per request by specifying them in a collection this way;\r\nentries[0][created]\r\nentries[0][message]\r\nentries[0][severity]\r\nentries[1][created]\r\nentries[2][message]\r\nentries[3][severity]\r\netc..."
                  }
                },
                "discriminator": {
                  "propertyName": "client_platform",
                  "mapping": {
                    "mobile": "#/components/schemas/LogCreateRequestMobile",
                    "desktop": "#/components/schemas/LogCreateRequestDesktop"
                  }
                }
              },
              "encoding": {
                "client_platform": {
                  "style": "form"
                },
                "entries": {
                  "style": "form"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TelzioItem"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenError"
                }
              }
            }
          }
        }
      }
    },
    "/v3/preferences": {
      "get": {
        "tags": [
          "Preferences"
        ],
        "summary": "List Bundles",
        "description": "Lists all preference bundles for the user.",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PreferenceBundleList"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenError"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer Token": [ ]
          }
        ]
      },
      "post": {
        "tags": [
          "Preferences"
        ],
        "summary": "Update a Bundle",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "type": {
                    "$ref": "#/components/schemas/preference_bundle_type"
                  }
                },
                "discriminator": {
                  "propertyName": "type",
                  "mapping": {
                    "user_details": "#/components/schemas/UserDetailsPreferenceBundleUpdateRequest",
                    "unanswered_calls": "#/components/schemas/UnansweredCallsPreferenceBundleUpdateRequest",
                    "features": "#/components/schemas/FeaturesPreferenceBundleUpdateRequest",
                    "password": "#/components/schemas/PasswordPreferenceBundleUpdateRequest",
                    "availability": "#/components/schemas/AvailabilityPreferenceBundleUpdateRequest",
                    "sounds": "#/components/schemas/SoundsPreferenceBundleUpdateRequest"
                  }
                }
              },
              "encoding": {
                "type": {
                  "style": "form"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/UserDetailsPreferenceBundle"
                    },
                    {
                      "$ref": "#/components/schemas/UnansweredCallsPreferenceBundle"
                    },
                    {
                      "$ref": "#/components/schemas/PasswordPreferenceBundle"
                    },
                    {
                      "$ref": "#/components/schemas/FeaturesPreferenceBundle"
                    },
                    {
                      "$ref": "#/components/schemas/AvailabilityPreferenceBundle"
                    },
                    {
                      "$ref": "#/components/schemas/SoundsPreferenceBundle"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenError"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer Token": [ ]
          }
        ]
      }
    },
    "/v3/preferences/{bundle_type}": {
      "get": {
        "tags": [
          "Preferences"
        ],
        "summary": "Retrieve a Bundle",
        "description": "Retrieves a specific preference bundle",
        "parameters": [
          {
            "name": "bundle_type",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/preference_bundle_type"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/UserDetailsPreferenceBundle"
                    },
                    {
                      "$ref": "#/components/schemas/UnansweredCallsPreferenceBundle"
                    },
                    {
                      "$ref": "#/components/schemas/PasswordPreferenceBundle"
                    },
                    {
                      "$ref": "#/components/schemas/FeaturesPreferenceBundle"
                    },
                    {
                      "$ref": "#/components/schemas/AvailabilityPreferenceBundle"
                    },
                    {
                      "$ref": "#/components/schemas/SoundsPreferenceBundle"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenError"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer Token": [ ]
          }
        ]
      }
    },
    "/v3/queues": {
      "get": {
        "tags": [
          "Queues"
        ],
        "summary": "List Queues",
        "description": "Retrieves a list of queues the current user has access to. If the user is an administrator or has permissions to manage queues, then this will return all queues. Otherwise, it will only return the queues the user is an agent of.",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueueList"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenError"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer Token": [ ]
          }
        ]
      }
    },
    "/v3/queues/{queue_id}": {
      "get": {
        "tags": [
          "Queues"
        ],
        "summary": "Retrieve a Queue",
        "description": "Retrieves a specific queue, including it's agents and current calls",
        "parameters": [
          {
            "name": "queue_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": "que_wQX8Mp3zDVd9"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Queue"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenError"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer Token": [ ]
          }
        ]
      }
    },
    "/v3/queues/{queue_id}/agents/{user_id}": {
      "post": {
        "tags": [
          "Queues"
        ],
        "summary": "Update an Agent",
        "description": "Updates an agent in a queue.",
        "parameters": [
          {
            "name": "queue_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": "que_EWdkW7VNkMw6"
            }
          },
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": "usr_Y6G82E9vDwNp"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "enabled": {
                    "type": "boolean",
                    "description": "Defines if the user is available to take calls or not."
                  },
                  "grace_time": {
                    "maximum": 1200,
                    "minimum": 0,
                    "type": "integer",
                    "description": "Defines a period if time to wait after each ended call, before accepting a new call. Value in seconds.",
                    "format": "int32"
                  }
                }
              },
              "encoding": {
                "enabled": {
                  "style": "form"
                },
                "grace_time": {
                  "style": "form"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueueAgent"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenError"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer Token": [ ]
          }
        ]
      }
    },
    "/v3/queues/toggle/{user_id}": {
      "post": {
        "tags": [
          "Queues"
        ],
        "summary": "Toggle an Agent",
        "description": "Updates an agent's availability across all queues it is member of",
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": "usr_y2MkJBynkBoW"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "required": [
                  "enabled"
                ],
                "type": "object",
                "properties": {
                  "enabled": {
                    "type": "boolean",
                    "description": "Defines if the user is available to take calls or not."
                  }
                }
              },
              "encoding": {
                "enabled": {
                  "style": "form"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TelzioItem"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenError"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer Token": [ ]
          }
        ]
      }
    },
    "/v3/recordings": {
      "get": {
        "tags": [
          "Recordings"
        ],
        "summary": "List Recordings",
        "description": "Lists all the recordings the user has access to.",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "schema": {
              "maximum": 100,
              "minimum": 1,
              "type": "integer",
              "format": "int32",
              "default": 30
            }
          },
          {
            "name": "starting_after",
            "in": "query",
            "schema": {
              "type": "string",
              "example": "rec_gGzkaXBdRPKO"
            }
          },
          {
            "name": "ending_before",
            "in": "query",
            "schema": {
              "type": "string",
              "example": "rec_7z48oXVMeP6q"
            }
          },
          {
            "name": "filter_by",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/RecordingFilters"
              }
            }
          },
          {
            "name": "tags",
            "in": "query",
            "schema": {
              "type": "string",
              "items": {
                "type": "integer",
                "format": "int32"
              },
              "example": "tag_7z48oA1ek6qQ"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RecordingList"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenError"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer Token": [ ]
          }
        ]
      }
    },
    "/v3/recordings/{recording_id}": {
      "get": {
        "tags": [
          "Recordings"
        ],
        "summary": "Retrieve a Recording",
        "description": "Retrieves the details about a specific recording.",
        "parameters": [
          {
            "name": "recording_id",
            "in": "path",
            "description": "The ID of the recording to retrieve.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "rec_y2MkJ7RZDBoW"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Recording"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenError"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer Token": [ ]
          }
        ]
      },
      "post": {
        "tags": [
          "Recordings"
        ],
        "summary": "Update a Recording",
        "description": "Update tags or reassign a recording to another user or user group.",
        "parameters": [
          {
            "name": "recording_id",
            "in": "path",
            "description": "The ID of the recording to update.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "rec_7z48oAX5k6qQ"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "status": {
                    "$ref": "#/components/schemas/RecordingStatus"
                  },
                  "tags": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "Change the tags assigned to the recording",
                    "example": [
                      "tag_MxJD3wwmDNro"
                    ]
                  },
                  "assigned_user": {
                    "type": "string",
                    "description": "Reassign the recording to another user. Only `assigned_user` or `assigned_user_group` can be sat, but not both at the same time.",
                    "example": "usr_gwZP4ABAkn6o"
                  },
                  "assigned_user_group": {
                    "type": "string",
                    "description": "Reassign the recording to a group of users. Only `assigned_user` or `assigned_user_group` can be sat, but not both at the same time.",
                    "example": "usg_vaKDxWO0kB4G"
                  }
                }
              },
              "encoding": {
                "status": {
                  "style": "form"
                },
                "tags": {
                  "style": "form"
                },
                "assigned_user": {
                  "style": "form"
                },
                "assigned_user_group": {
                  "style": "form"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RecordingUpdateResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenError"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer Token": [ ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Recordings"
        ],
        "summary": "Delete a Recording",
        "description": "Delete a recording and all it's comments and other meta data. _This cannot be undone._",
        "parameters": [
          {
            "name": "recording_id",
            "in": "path",
            "description": "The ID of the recording to delete.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "rec_JVBDQGOXPmOw"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TelzioItem"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenError"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer Token": [ ]
          }
        ]
      }
    },
    "/v3/recordings/{recording_id}/download": {
      "get": {
        "tags": [
          "Recordings"
        ],
        "summary": "Download MP3",
        "description": "Download the MP3 file of a recording.",
        "parameters": [
          {
            "name": "recording_id",
            "in": "path",
            "description": "The ID of the recording to download.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "rec_wOWDeALqD15a"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "audio/mp3": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "audio/mp3": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "audio/mp3": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "audio/mp3": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenError"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer Token": [ ]
          }
        ]
      }
    },
    "/v3/spam_filter/rules": {
      "get": {
        "tags": [
          "Spam Filter"
        ],
        "summary": "List Rules",
        "description": "Retrieves a list of spam filter rules on the account.",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "schema": {
              "maximum": 100,
              "minimum": 1,
              "type": "integer",
              "format": "int32",
              "default": 30
            }
          },
          {
            "name": "starting_after",
            "in": "query",
            "schema": {
              "type": "string",
              "example": "sfr_MxJD354mPNro"
            }
          },
          {
            "name": "ending_before",
            "in": "query",
            "schema": {
              "type": "string",
              "example": "sfr_5pOkGWLbkzoK"
            }
          },
          {
            "name": "filter_by_number_id",
            "in": "query",
            "schema": {
              "type": "string",
              "items": {
                "type": "integer",
                "format": "int32"
              },
              "example": "num_wOWDeng9815a"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SpamFilterRuleList"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenError"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer Token": [ ]
          }
        ]
      },
      "post": {
        "tags": [
          "Spam Filter"
        ],
        "summary": "Create Rule",
        "description": "Adds a new rule to the spam filter.",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "number_id": {
                    "type": "string",
                    "description": "Specify an ID of a number on the account to let the rule apply only to that number.",
                    "example": "num_JEbPBxKpDYrV"
                  }
                },
                "discriminator": {
                  "propertyName": "action_type",
                  "mapping": {
                    "reject": "#/components/schemas/RejectSpamFilterRuleCreateUpdateRequest",
                    "prepend_cnam": "#/components/schemas/PrependCnamSpamFilterRuleCreateRequest",
                    "append_cnam": "#/components/schemas/AppendCnamSpamFilterRuleCreateRequest",
                    "override_cnam": "#/components/schemas/OverrideCnamSpamFilterRuleCreateRequest",
                    "transfer": "#/components/schemas/TransferSpamFilterRuleCreateRequest"
                  }
                }
              },
              "encoding": {
                "number_id": {
                  "style": "form"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/RejectSpamFilterRule"
                    },
                    {
                      "$ref": "#/components/schemas/TransferSpamFilterRule"
                    },
                    {
                      "$ref": "#/components/schemas/PrependSpamFilterRule"
                    },
                    {
                      "$ref": "#/components/schemas/AppendSpamFilterRule"
                    },
                    {
                      "$ref": "#/components/schemas/OverrideSpamFilterRule"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenError"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer Token": [ ]
          }
        ]
      }
    },
    "/v3/spam_filter/rules/{rule_id}": {
      "get": {
        "tags": [
          "Spam Filter"
        ],
        "summary": "Retrieve a Rule",
        "description": "Retrieves a specific spam filter rule.",
        "parameters": [
          {
            "name": "rule_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": "sfr_bG58KllaPYlz"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/RejectSpamFilterRule"
                    },
                    {
                      "$ref": "#/components/schemas/TransferSpamFilterRule"
                    },
                    {
                      "$ref": "#/components/schemas/PrependSpamFilterRule"
                    },
                    {
                      "$ref": "#/components/schemas/AppendSpamFilterRule"
                    },
                    {
                      "$ref": "#/components/schemas/OverrideSpamFilterRule"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenError"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer Token": [ ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Spam Filter"
        ],
        "summary": "Delete a Rule",
        "description": "Delete a rule from the spam filter",
        "parameters": [
          {
            "name": "rule_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": "sfr_6Jl81oxekrbV"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TelzioItem"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenError"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer Token": [ ]
          }
        ]
      }
    },
    "/v3/spam_filter/{rule_id}": {
      "post": {
        "tags": [
          "Spam Filter"
        ],
        "summary": "Update a Rule",
        "description": "Update an existing spam filter rule.",
        "parameters": [
          {
            "name": "rule_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": "sfr_bG58Kwwa8Ylz"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "number_id": {
                    "type": "string",
                    "description": "Specify an ID of a number on the account to let the rule apply only to that number.",
                    "example": "num_7z48o1bKk6qQ"
                  }
                },
                "discriminator": {
                  "propertyName": "action_type",
                  "mapping": {
                    "reject": "#/components/schemas/RejectSpamFilterRuleCreateUpdateRequest",
                    "prepend_cnam": "#/components/schemas/PrependCnamSpamFilterRuleCreateRequest",
                    "append_cnam": "#/components/schemas/AppendCnamSpamFilterRuleCreateRequest",
                    "override_cnam": "#/components/schemas/OverrideCnamSpamFilterRuleCreateRequest",
                    "transfer": "#/components/schemas/TransferSpamFilterRuleCreateRequest"
                  }
                }
              },
              "encoding": {
                "number_id": {
                  "style": "form"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/RejectSpamFilterRule"
                    },
                    {
                      "$ref": "#/components/schemas/TransferSpamFilterRule"
                    },
                    {
                      "$ref": "#/components/schemas/PrependSpamFilterRule"
                    },
                    {
                      "$ref": "#/components/schemas/AppendSpamFilterRule"
                    },
                    {
                      "$ref": "#/components/schemas/OverrideSpamFilterRule"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenError"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer Token": [ ]
          }
        ]
      }
    },
    "/v3/tags": {
      "get": {
        "tags": [
          "Tags"
        ],
        "summary": "List Tags",
        "description": "Get a list of all tags currently associated with the account.",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "schema": {
              "maximum": 100,
              "minimum": 1,
              "type": "integer",
              "format": "int32",
              "default": 30
            }
          },
          {
            "name": "starting_after",
            "in": "query",
            "schema": {
              "type": "string",
              "example": "tag_JEbPBW9NkYrV"
            }
          },
          {
            "name": "ending_before",
            "in": "query",
            "schema": {
              "type": "string",
              "example": "tag_lXMk9rNADd0Y"
            }
          },
          {
            "name": "active",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TagList"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenError"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer Token": [ ]
          }
        ]
      },
      "post": {
        "tags": [
          "Tags"
        ],
        "summary": "Create a Tag",
        "description": "Create a tag to be used on the account.",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "required": [
                  "name"
                ],
                "type": "object",
                "properties": {
                  "name": {
                    "maxLength": 128,
                    "type": "string",
                    "description": "A human readable name for the tag."
                  }
                }
              },
              "encoding": {
                "name": {
                  "style": "form"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Tag"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenError"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer Token": [ ]
          }
        ]
      }
    },
    "/v3/tags/{tag_id}": {
      "delete": {
        "tags": [
          "Tags"
        ],
        "summary": "Delete a Tag",
        "description": "Delete a tag from the account.",
        "parameters": [
          {
            "name": "tag_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": "tag_oaVDNY99kRGp"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TelzioItem"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenError"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer Token": [ ]
          }
        ]
      }
    },
    "/v3/timeline/{timeline_id}": {
      "get": {
        "tags": [
          "Timeline"
        ],
        "summary": "List Events",
        "description": "Lists the events (comments, tags, etc.) associated with an item on the user's account, such as a voicemail or recording.",
        "parameters": [
          {
            "name": "timeline_id",
            "in": "path",
            "description": "The ID if the item to list timeline events for, for example a voicemail or call recording.",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "con_dj291jJhdcj"
          },
          {
            "name": "limit",
            "in": "query",
            "schema": {
              "maximum": 100,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "starting_after",
            "in": "query",
            "schema": {
              "type": "string",
              "example": "tev_oaVDNy49kRGp"
            }
          },
          {
            "name": "ending_before",
            "in": "query",
            "schema": {
              "type": "string",
              "example": "tev_eqVDwj27vkbX"
            }
          },
          {
            "name": "sort_direction",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/SortDirection"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TimelineEventList"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenError"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer Token": [ ]
          }
        ]
      }
    },
    "/v3/users": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "List Users",
        "description": "Retrieves a list of users on the account. By default ordered by `firstname_lastname`. Use `limit` and `starting_after` for paging.",
        "parameters": [
          {
            "name": "sort_by",
            "in": "query",
            "description": "The field to sort the results by.",
            "schema": {
              "$ref": "#/components/schemas/UserListSortOption"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Max number of results to return.",
            "schema": {
              "maximum": 500,
              "minimum": 1,
              "type": "integer",
              "format": "int32",
              "default": 100
            }
          },
          {
            "name": "starting_page_id",
            "in": "query",
            "description": "Pass the value from next_page_id to start from a certain page in the list.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "term",
            "in": "query",
            "description": "Free text search term.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "starting_after",
            "in": "query",
            "description": "Unused for this endpoint",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "ending_before",
            "in": "query",
            "description": "Unused for this method",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserList"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenError"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer Token": [ ]
          }
        ]
      }
    },
    "/v3/users/{query}": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Retrieve a User",
        "description": "Retrieves a single user, either by user_id, username, or extension.",
        "parameters": [
          {
            "name": "query",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "A list of additional items to include in the response",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/UserIncludes"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenError"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer Token": [ ]
          }
        ]
      }
    },
    "/v3/users/{user_id}/numbers": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "List User Numbers",
        "description": "Retrieves a list of numbers a user has access to.",
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": "usr_gwZP4dVbPn6o"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NumberList"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenError"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer Token": [ ]
          }
        ]
      }
    },
    "/v3/users/groups": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "List User Groups",
        "description": "Retrieves a list of user groups on the account.",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "schema": {
              "maximum": 100,
              "minimum": 1,
              "type": "integer",
              "format": "int32",
              "default": 30
            }
          },
          {
            "name": "starting_after",
            "in": "query",
            "schema": {
              "type": "string",
              "example": "usg_zo4PAEwgP97E"
            }
          },
          {
            "name": "ending_before",
            "in": "query",
            "schema": {
              "type": "string",
              "example": "usg_Aq1kXvRE8rJ7"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserGroupList"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenError"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer Token": [ ]
          }
        ]
      }
    },
    "/v3/users/groups/{user_group_id}": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Retrieve a User Group",
        "description": "Retrieves a single user group.",
        "parameters": [
          {
            "name": "user_group_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": "usg_yZG8n4A1k239"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserGroup"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenError"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer Token": [ ]
          }
        ]
      }
    },
    "/v3/users/query/availability": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Query User Availability",
        "description": "Retrieves a snapshot of the queried users' current status on the Telzio platform.\r\nYou can query up to 50 usernames in one request, by including the `u` query parameter multiple times in your request.\r\nAfter the initial query, realtime updates are provided via websockets.",
        "parameters": [
          {
            "name": "u",
            "in": "query",
            "description": "Username(s) to query state for. Can be set up to 50 times.",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserAvailabilityList"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenError"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer Token": [ ]
          }
        ]
      }
    },
    "/v3/users/{user_id}/avatar": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Retrieve an Avatar",
        "description": "Returns a jpg of the user's avatar.",
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "description": "The unique ID of the user.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "usr_wOWDep1qk15a"
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "The size of the returned avatar. `small` = 30x30px, `medium` = 90x90px, `large` = 250x250px.",
            "schema": {
              "$ref": "#/components/schemas/UserAvatarSize"
            },
            "example": "small"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenError"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer Token": [ ]
          }
        ]
      },
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Update an Avatar",
        "description": "Upload a new avatar for a user.",
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": "usr_pWw8O27ADV12"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "required": [
                  "file"
                ],
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "description": "A picture to use as the user's avatar.",
                    "format": "binary"
                  }
                }
              },
              "encoding": {
                "file": {
                  "style": "form"
                }
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "required": [
                  "file"
                ],
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "description": "A picture to use as the user's avatar.",
                    "format": "binary"
                  }
                }
              },
              "encoding": {
                "file": {
                  "style": "form"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenError"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer Token": [ ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Users"
        ],
        "summary": "Delete an Avatar",
        "description": "Delete a user's avatar.",
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "description": "The unique ID of the user.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "usr_JVBDQgRWPmOw"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TelzioItem"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenError"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer Token": [ ]
          }
        ]
      }
    },
    "/v3/users/{user_id}/voicemail_greeting": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Update a Voicemail Greeting",
        "description": "Updates the personal voicemail greeting for a user.\r\nOnly the user self, or someone with user_admin permissions can edit a user's personal voicemail greeting.",
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": "usr_5ZV8vO7dPLMJ"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "required": [
                  "type"
                ],
                "type": "object",
                "properties": {
                  "type": {
                    "type": "string",
                    "description": "The type of caller"
                  }
                },
                "discriminator": {
                  "propertyName": "type",
                  "mapping": {
                    "file": "#/components/schemas/UserVoicemailFileUpdateRequest",
                    "text_to_speech": "#/components/schemas/UserVoicemailTtsUpdateRequest"
                  }
                }
              },
              "encoding": {
                "type": {
                  "style": "form"
                }
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "required": [
                  "type"
                ],
                "type": "object",
                "properties": {
                  "type": {
                    "type": "string",
                    "description": "The type of caller"
                  }
                },
                "discriminator": {
                  "propertyName": "type",
                  "mapping": {
                    "file": "#/components/schemas/UserVoicemailFileUpdateRequest",
                    "text_to_speech": "#/components/schemas/UserVoicemailTtsUpdateRequest"
                  }
                }
              },
              "encoding": {
                "type": {
                  "style": "form"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TelzioItem"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenError"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer Token": [ ]
          }
        ]
      }
    },
    "/v3/users/{user_id}/voicemail_greeting/download": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Download a Voicemail Greeting",
        "description": "Download the audio file of the user's current voicemail greeting.",
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": "usr_jXmDLzW0PgGZ"
            }
          },
          {
            "name": "format",
            "in": "query",
            "description": "The format of the returned file.",
            "schema": {
              "$ref": "#/components/schemas/AudioFormat"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "audio/wav": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              },
              "audio/mp3": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "audio/wav": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestError"
                }
              },
              "audio/mp3": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "audio/wav": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              },
              "audio/mp3": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "audio/wav": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenError"
                }
              },
              "audio/mp3": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenError"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer Token": [ ]
          }
        ]
      }
    },
    "/v3/utilities/voices": {
      "get": {
        "tags": [
          "Utilities"
        ],
        "summary": "List Voices",
        "description": "Returns a list of voices that are available for text-to-speech generation.",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VoiceList"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenError"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer Token": [ ]
          }
        ]
      }
    },
    "/v3/utilities/time_zones": {
      "get": {
        "tags": [
          "Utilities"
        ],
        "summary": "List Time Zones",
        "description": "Returns a list of available time zones.",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TimeZoneList"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenError"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer Token": [ ]
          }
        ]
      }
    },
    "/v3/utilities/tts_preview": {
      "get": {
        "tags": [
          "Utilities"
        ],
        "summary": "Create a TTS Preview",
        "description": "Creates and returns an audio file to be used for text-to-speech previews.",
        "parameters": [
          {
            "name": "voice_id",
            "in": "query",
            "description": "The unique ID of the voice used to generate the preview.",
            "schema": {
              "type": "string",
              "example": "tts_y2MkJ3eZDBoW"
            }
          },
          {
            "name": "text",
            "in": "query",
            "description": "The text used when generating the preview.",
            "required": true,
            "schema": {
              "maxLength": 3000,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "audio/mpeg": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "audio/mpeg": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "audio/mpeg": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "audio/mpeg": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenError"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer Token": [ ]
          }
        ]
      }
    },
    "/v3/voicemails": {
      "get": {
        "tags": [
          "Voicemails"
        ],
        "summary": "List Voicemails",
        "description": "Returns the user's available voicemails. By default sorted by _`_created_`_ and returned in descending order. Use _`starting_after`_ and _`ending_before`_ to do paging or retrieve latest messages since last request.",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "schema": {
              "maximum": 100,
              "minimum": 1,
              "type": "integer",
              "format": "int32",
              "default": 30
            }
          },
          {
            "name": "starting_after",
            "in": "query",
            "schema": {
              "type": "string",
              "example": "vm_zdVPyGJGDgvx"
            }
          },
          {
            "name": "ending_before",
            "in": "query",
            "schema": {
              "type": "string",
              "example": "vm_5pOkGqN478zo"
            }
          },
          {
            "name": "filter_by",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/VoicemailFilters"
              }
            }
          },
          {
            "name": "tags",
            "in": "query",
            "schema": {
              "type": "string",
              "items": {
                "type": "integer",
                "format": "int32"
              },
              "example": "tag_pQq8b5MvJDMx"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VoicemailList"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenError"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer Token": [ ]
          }
        ]
      }
    },
    "/v3/voicemails/{voicemail_id}": {
      "get": {
        "tags": [
          "Voicemails"
        ],
        "summary": "Retrieve a Voicemail",
        "description": "Returns the details of an existing voicemail. Only voicemails assigned to the user can be retrieved. Attempting to retrieve a voicemail the isn't assigned to the user, will result in a *403 Forbidden* response.",
        "parameters": [
          {
            "name": "voicemail_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": "vm_Q3KkjWBjDeqd"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Voicemail"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenError"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer Token": [ ]
          }
        ]
      },
      "post": {
        "tags": [
          "Voicemails"
        ],
        "summary": "Update a Voicemail",
        "parameters": [
          {
            "name": "voicemail_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": "vm_vaKDxy0L8B4G"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "status": {
                    "$ref": "#/components/schemas/VoicemailStatus"
                  },
                  "tags": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "Change the tags assigned to the voicemail.",
                    "example": [
                      "tag_oaVDNxRbPRGp"
                    ]
                  },
                  "assigned_user": {
                    "type": "string",
                    "description": "Reassign the voicemail to another user. Only `assigned_user` or `assigned_user_group` can be sat, but not both at the same time.",
                    "example": "usr_JEbPBQ5o8YrV"
                  },
                  "assigned_user_group": {
                    "type": "string",
                    "description": "Reassign the voicemail to a group of users. Only `assigned_user` or `assigned_user_group` can be sat, but not both at the same time.",
                    "example": "usg_RJVDppbmDx5j"
                  }
                }
              },
              "encoding": {
                "status": {
                  "style": "form"
                },
                "tags": {
                  "style": "form"
                },
                "assigned_user": {
                  "style": "form"
                },
                "assigned_user_group": {
                  "style": "form"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VoicemailUpdateResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenError"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer Token": [ ]
          }
        ]
      },
      "delete": {
        "tags": [
          "Voicemails"
        ],
        "summary": "Delete a Voicemail",
        "description": "Permanently delete a voicemail. This can not be undone.",
        "parameters": [
          {
            "name": "voicemail_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": "vm_wQX8M7OzkVd9"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TelzioItem"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenError"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer Token": [ ]
          }
        ]
      }
    },
    "/v3/voicemails/{voicemail_id}/download": {
      "get": {
        "tags": [
          "Voicemails"
        ],
        "summary": "Download MP3",
        "description": "Fetches, decrypts and returns the voicemail in MP3 format.",
        "parameters": [
          {
            "name": "voicemail_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": "vm_gwZP4e7ykn6o"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "audio/mp3": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "audio/mp3": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "audio/mp3": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "audio/mp3": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenError"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer Token": [ ]
          }
        ]
      }
    },
    "/v3/voicemails/{voicemail_id}/assignments": {
      "get": {
        "tags": [
          "Voicemails"
        ],
        "summary": "Retrieve a Voicemail's Assignments",
        "description": "Returns history of assignments for the voicemail.",
        "parameters": [
          {
            "name": "voicemail_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": "vm_vaKDxRA9PB4G"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssignmentList"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenError"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer Token": [ ]
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "AccessRequest": {
        "required": [
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "minLength": 1,
            "type": "string",
            "description": "The object type that access is being requested for."
          },
          "status": {
            "$ref": "#/components/schemas/AccessRequestStatus"
          }
        },
        "additionalProperties": false,
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "conversation": "#/components/schemas/ConversationAccessRequest"
          }
        }
      },
      "AccessRequestStatus": {
        "enum": [
          "granted",
          "requested",
          "denied"
        ],
        "type": "string"
      },
      "Account": {
        "required": [
          "account_id",
          "company_name",
          "created",
          "default_timezone"
        ],
        "type": "object",
        "properties": {
          "account_id": {
            "type": "string",
            "description": "The unique ID of the Telzio Account.",
            "example": "acc_lXMk9r36Dd0Y"
          },
          "company_name": {
            "minLength": 1,
            "type": "string",
            "description": "The company name of the Telzio customer.",
            "example": "Pawtucket Patriot Ale"
          },
          "created": {
            "type": "string",
            "description": "When the Telzio account was created.",
            "format": "date-time",
            "example": "1984-06-05T19:30:22Z"
          },
          "default_timezone": {
            "minLength": 1,
            "type": "string",
            "description": "The default timezone for the account.",
            "example": "America/Los_Angeles"
          }
        },
        "additionalProperties": false
      },
      "AppendCnamSpamFilterRuleCreateRequest": {
        "required": [
          "text"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/SpamFilterRuleCreateUpdateRequest"
          }
        ],
        "properties": {
          "text": {
            "maxLength": 254,
            "minLength": 1,
            "type": "string",
            "description": "The text to update the CNAM value with before showing it to the receiver of the call."
          }
        },
        "additionalProperties": false
      },
      "AppendSpamFilterRule": {
        "required": [
          "text"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/SpamFilterRule"
          }
        ],
        "properties": {
          "text": {
            "minLength": 1,
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "AssignedUser": {
        "required": [
          "user"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/Assignment"
          }
        ],
        "properties": {
          "user": {
            "$ref": "#/components/schemas/User"
          }
        },
        "additionalProperties": false
      },
      "AssignedUserGroup": {
        "required": [
          "user_group"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/Assignment"
          }
        ],
        "properties": {
          "user_group": {
            "$ref": "#/components/schemas/UserGroup"
          }
        },
        "additionalProperties": false
      },
      "Assignment": {
        "required": [
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "minLength": 1,
            "type": "string"
          },
          "assignment_id": {
            "type": "string",
            "nullable": true,
            "example": "asg_rodkRpR4n82G"
          },
          "created": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "created_by": {
            "$ref": "#/components/schemas/User"
          }
        },
        "additionalProperties": false,
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "user": "#/components/schemas/AssignedUser",
            "user_group": "#/components/schemas/AssignedUserGroup"
          }
        }
      },
      "AssignmentConversationItem": {
        "required": [
          "assignment"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/ConversationItem"
          }
        ],
        "properties": {
          "assignment": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/AssignedUser"
              },
              {
                "$ref": "#/components/schemas/AssignedUserGroup"
              }
            ]
          }
        },
        "additionalProperties": false
      },
      "AssignmentEvent": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/TimelineEvent"
          }
        ],
        "properties": {
          "assignment": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/AssignedUser"
              },
              {
                "$ref": "#/components/schemas/AssignedUserGroup"
              }
            ],
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AssignmentList": {
        "required": [
          "data",
          "has_more"
        ],
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/AssignedUser"
                },
                {
                  "$ref": "#/components/schemas/AssignedUserGroup"
                }
              ]
            },
            "description": "A list of objects containing the basic details about each voicemail message."
          },
          "has_more": {
            "type": "boolean",
            "description": "Defines if there are more objects available via paging.",
            "example": true
          }
        },
        "additionalProperties": false
      },
      "AudioFormat": {
        "enum": [
          "wav",
          "mp3"
        ],
        "type": "string"
      },
      "AuthenticationRequestBase": {
        "required": [
          "client_platform",
          "password",
          "username"
        ],
        "type": "object",
        "properties": {
          "client_platform": {
            "$ref": "#/components/schemas/ClientPlatform"
          },
          "username": {
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "description": "The user's username. Not case sensitive.",
            "example": "pgriffin"
          },
          "password": {
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "description": "The user's password. Case sensitive.",
            "example": "TheBirdIsTheWord72"
          },
          "mfa_code": {
            "maxLength": 6,
            "type": "string",
            "description": "The MFA code for the user's login session. Required if multi-factor authentication is enabled on the user's account.\r\nIf MFA is enabled and this property is not included in the request, the API will reject the login and ask for an MFA code.",
            "nullable": true,
            "example": "123456"
          }
        },
        "additionalProperties": false,
        "discriminator": {
          "propertyName": "client_platform",
          "mapping": {
            "mobile": "#/components/schemas/AuthenticationRequestMobile",
            "browser": "#/components/schemas/AuthenticationRequestBrowser",
            "desktop": "#/components/schemas/AuthenticationRequestDesktop",
            "custom": "#/components/schemas/AuthenticationRequestCustom"
          }
        }
      },
      "AuthenticationRequestBrowser": {
        "required": [
          "client_details"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/AuthenticationRequestBase"
          }
        ],
        "properties": {
          "client_details": {
            "$ref": "#/components/schemas/ClientDetailsRequestBrowser"
          }
        },
        "additionalProperties": false
      },
      "AuthenticationRequestCustom": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/AuthenticationRequestBase"
          }
        ],
        "additionalProperties": false
      },
      "AuthenticationRequestDesktop": {
        "required": [
          "client_details"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/AuthenticationRequestBase"
          }
        ],
        "properties": {
          "client_details": {
            "$ref": "#/components/schemas/ClientDetailsRequestDesktop"
          }
        },
        "additionalProperties": false
      },
      "AuthenticationRequestMobile": {
        "required": [
          "client_details",
          "release_sipis"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/AuthenticationRequestBase"
          }
        ],
        "properties": {
          "client_details": {
            "$ref": "#/components/schemas/ClientDetailsRequestMobile"
          },
          "release_sipis": {
            "type": "boolean",
            "description": "When set to true, any SIPIS registration for the user is released.\r\nThis is a temporary fix during migration from SIPIS-based app, to avoid Telzio 5.x.x from crashing when receiving push notifications intended for a SIPIS-based app."
          }
        },
        "additionalProperties": false
      },
      "AvailabilityPreferenceBundle": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/PreferenceBundle"
          }
        ],
        "properties": {
          "do_not_disturb": {
            "type": "boolean",
            "description": "If true, the user has enabled Do Not Disturb and will be receiving any calls."
          }
        },
        "additionalProperties": false
      },
      "AvailabilityPreferenceBundleUpdateRequest": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/PreferenceBundleUpdateRequestBase"
          }
        ],
        "properties": {
          "do_not_disturb": {
            "type": "boolean",
            "description": "If true, the user has enabled Do Not Disturb and will be receiving any calls.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "BadRequestError": {
        "title": "Bad Request",
        "required": [
          "message",
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/BadRequestErrorType"
          },
          "message": {
            "minLength": 1,
            "type": "string",
            "description": "A human-readable message providing more details about the error. This error can be shown to the end user.",
            "example": "The request had one or more invalid parameters."
          },
          "parameters": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "nullable": true
            },
            "description": "A list of invalid parameters and corresponding error messages.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Describes an error caused by an invalid API request.",
        "readOnly": true
      },
      "BadRequestErrorType": {
        "enum": [
          "bad_request",
          "bad_request_invalid_input",
          "bad_request_account_balance_low",
          "bad_request_number_inactive",
          "bad_request_conversation_closed",
          "bad_request_conversation_exists",
          "bad_request_number_sms_not_enabled",
          "bad_request_malformed_number",
          "bad_request_media_not_found",
          "bad_request_assignee_not_found",
          "bad_request_already_assigned",
          "bad_request_file_too_large",
          "bad_request_file_type",
          "bad_request_bundle_type",
          "bad_request_password_invalid",
          "bad_request_password_identical",
          "bad_request_call_flow_invalid",
          "bad_request_user_invalid",
          "bad_request_group_invalid",
          "bad_request_call_flow_self_forward",
          "bad_request_call_flow_forward_loop",
          "bad_request_call_flow_number_forward",
          "bad_request_number_format",
          "bad_request_number_invalid",
          "bad_request_hold_music_invalid",
          "bad_request_destination_number_blacklisted"
        ],
        "type": "string",
        "description": "For some errors that could be handled programmatically, a short string indicating the error code reported."
      },
      "Call": {
        "required": [
          "call_id",
          "created",
          "direction",
          "duration",
          "from",
          "status",
          "to"
        ],
        "type": "object",
        "properties": {
          "call_id": {
            "minLength": 1,
            "type": "string",
            "description": "The unique ID of this call.",
            "example": "11-600ef9dd-17v6"
          },
          "from": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/UserCallerType"
              },
              {
                "$ref": "#/components/schemas/PhoneNumberCallerType"
              },
              {
                "$ref": "#/components/schemas/FeatureCodeCallerType"
              }
            ],
            "description": "The user or phone number who made the call."
          },
          "to": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/UserCallerType"
              },
              {
                "$ref": "#/components/schemas/PhoneNumberCallerType"
              },
              {
                "$ref": "#/components/schemas/FeatureCodeCallerType"
              }
            ],
            "description": "The user or phone number of the receiver."
          },
          "created": {
            "type": "string",
            "description": "The date and time the call was started.",
            "format": "date-time",
            "example": "2020-03-15 13:05:20.000Z"
          },
          "status": {
            "$ref": "#/components/schemas/CallStatus"
          },
          "duration": {
            "type": "integer",
            "description": "The duration of the call in seconds.",
            "format": "int32",
            "example": 184
          },
          "direction": {
            "$ref": "#/components/schemas/CallDirection"
          },
          "legs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CallLeg"
            },
            "description": "Child call legs associated with the call.",
            "nullable": true
          },
          "number": {
            "$ref": "#/components/schemas/Number"
          },
          "events": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CallEvent"
            },
            "description": "List of technical events that happened during the call.",
            "nullable": true
          },
          "billing_details": {
            "$ref": "#/components/schemas/CallBillingDetails"
          },
          "spam_details": {
            "$ref": "#/components/schemas/CallSpamDetails"
          },
          "voicemail_id": {
            "type": "string",
            "description": "The unique ID of a voicemail associated with this call.",
            "nullable": true,
            "example": "vm_EWdkWw5YkMw6"
          },
          "recording_id": {
            "type": "string",
            "description": "The unique ID of a call recording associated with this call.",
            "nullable": true,
            "example": "rec_6BAD62LnODd9"
          },
          "fax_id": {
            "type": "string",
            "description": "The unique ID of a fax associated with this call.",
            "nullable": true,
            "example": "fax_Q3KkjaxePeqd"
          },
          "tags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Tag"
            },
            "description": "A list of tags assigned to this call.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CallBillingDetails": {
        "type": "object",
        "properties": {
          "price": {
            "type": "number",
            "description": "The price of the call, excluding fees.",
            "format": "double",
            "example": 12.5
          },
          "fees": {
            "type": "number",
            "description": "The total of taxes and fees for the call.",
            "format": "double",
            "example": 3.1
          },
          "total_price": {
            "type": "number",
            "description": "The total price for the call, including fees.",
            "format": "double",
            "example": 15.6
          },
          "free_minutes": {
            "type": "integer",
            "description": "The amount of free minutes used by the call.",
            "format": "int32",
            "example": 3
          }
        },
        "additionalProperties": false
      },
      "CallDestination": {
        "required": [
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/CallDestinationType"
          }
        },
        "additionalProperties": false,
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "voicemail": "#/components/schemas/CallDestinationVoicemail",
            "user": "#/components/schemas/CallDestinationUser",
            "user_group": "#/components/schemas/CallDestinationUserGroup",
            "call_flow": "#/components/schemas/CallDestinationCallFlow",
            "phone_number": "#/components/schemas/CallDestinationPhoneNumber"
          }
        }
      },
      "CallDestinationCallFlow": {
        "required": [
          "call_flow"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/CallDestination"
          }
        ],
        "properties": {
          "call_flow": {
            "$ref": "#/components/schemas/CallFlow"
          }
        },
        "additionalProperties": false,
        "description": "Transfer calls to a call flow."
      },
      "CallDestinationPhoneNumber": {
        "required": [
          "phone_number"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/CallDestination"
          }
        ],
        "properties": {
          "phone_number": {
            "$ref": "#/components/schemas/PhoneNumber"
          }
        },
        "additionalProperties": false,
        "description": "Transfer calls to an external phone number."
      },
      "CallDestinationType": {
        "enum": [
          "voicemail",
          "user",
          "user_group",
          "call_flow",
          "phone_number"
        ],
        "type": "string"
      },
      "CallDestinationUser": {
        "required": [
          "user"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/CallDestination"
          }
        ],
        "properties": {
          "user": {
            "$ref": "#/components/schemas/User"
          }
        },
        "additionalProperties": false,
        "description": "Transfer calls to a user."
      },
      "CallDestinationUserGroup": {
        "required": [
          "user_group"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/CallDestination"
          }
        ],
        "properties": {
          "user_group": {
            "$ref": "#/components/schemas/UserGroup"
          }
        },
        "additionalProperties": false,
        "description": "Transfer calls to a group of users."
      },
      "CallDestinationVoicemail": {
        "required": [
          "transcription_enabled"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/CallDestination"
          }
        ],
        "properties": {
          "assignment": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/AssignedUser"
              },
              {
                "$ref": "#/components/schemas/AssignedUserGroup"
              }
            ],
            "description": "Who new voicemail messages are assigned to.",
            "nullable": true
          },
          "transcription_enabled": {
            "type": "boolean",
            "description": "If set to true, Telzio will attempt to transcribe the voicemail messages."
          },
          "text_to_speech": {
            "$ref": "#/components/schemas/TextToSpeech"
          }
        },
        "additionalProperties": false,
        "description": "Transfer calls to voicemail."
      },
      "CallDirection": {
        "enum": [
          "inbound",
          "outbound"
        ],
        "type": "string"
      },
      "CallEvent": {
        "type": "object",
        "properties": {
          "date": {
            "type": "string",
            "description": "The date and time the event occurred.",
            "format": "date-time"
          },
          "message": {
            "type": "string",
            "description": "A description of the event.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CallFlow": {
        "required": [
          "call_flow_id",
          "name",
          "numbers"
        ],
        "type": "object",
        "properties": {
          "call_flow_id": {
            "type": "string",
            "description": "The unique ID of the call flow.",
            "example": "flo_alpDrobN86Gb"
          },
          "name": {
            "minLength": 1,
            "type": "string",
            "description": "The name of the call flow"
          },
          "extension": {
            "type": "string",
            "description": "The call flow's extension.",
            "nullable": true
          },
          "numbers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Number"
            },
            "description": "The numbers on the customer's account, currently associated with this call flow."
          }
        },
        "additionalProperties": false
      },
      "CallLeg": {
        "type": "object",
        "properties": {
          "call_id": {
            "type": "string",
            "description": "The unique ID of this call.",
            "nullable": true,
            "example": "11-600ef9dd-17v6"
          },
          "from": {
            "type": "string",
            "description": "The username or phone number of the caller.",
            "nullable": true,
            "example": "jsmith"
          },
          "from_name": {
            "type": "string",
            "description": "The human-readable name of the caller.",
            "nullable": true,
            "example": "John Smith"
          },
          "to": {
            "type": "string",
            "description": "The username or phone number of the receiver.",
            "nullable": true,
            "example": "+18889989080"
          },
          "status": {
            "$ref": "#/components/schemas/CallStatus"
          },
          "hangup_cause": {
            "type": "string",
            "description": "The technical reason why the call ended.",
            "nullable": true,
            "example": "Normal Clearing"
          },
          "duration": {
            "type": "integer",
            "description": "The duration of the call in seconds.",
            "format": "int32",
            "example": 184
          },
          "billing_details": {
            "$ref": "#/components/schemas/CallBillingDetails"
          },
          "direction": {
            "$ref": "#/components/schemas/CallDirection"
          },
          "call_date": {
            "type": "string",
            "description": "The date and time the call was started.",
            "format": "date-time",
            "example": "2020-03-15 13:05:20.000Z"
          },
          "answer_date": {
            "type": "string",
            "description": "The date and time the call was answered by the receiving party.",
            "format": "date-time",
            "nullable": true,
            "example": "2020-03-15 13:05:35.000Z"
          },
          "end_date": {
            "type": "string",
            "description": "The date and time the call ended.",
            "format": "date-time",
            "nullable": true,
            "example": "2020-03-15 13:08:12.000Z"
          }
        },
        "additionalProperties": false
      },
      "CallSpamDetails": {
        "type": "object",
        "properties": {
          "spam_score": {
            "type": "integer",
            "description": "The call's spam score in percent. This may not be present on all calls.",
            "format": "int32",
            "nullable": true,
            "example": 89
          },
          "spam_action": {
            "type": "string",
            "description": "The action taken as result of the call's Spam Score.",
            "nullable": true
          },
          "blacklisted": {
            "type": "boolean",
            "description": "The call was blocked as a result of a rule on the account's blacklist."
          }
        },
        "additionalProperties": false
      },
      "CallStatus": {
        "enum": [
          "initializing",
          "ringing",
          "in_progress",
          "no_answer",
          "canceled",
          "aborted",
          "unavailable",
          "congested",
          "completed",
          "unknown"
        ],
        "type": "string"
      },
      "Caller": {
        "required": [
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "minLength": 1,
            "type": "string",
            "description": "The type of caller"
          }
        },
        "additionalProperties": false,
        "description": "A message or item that was created during a conversation.",
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "user": "#/components/schemas/UserCallerType",
            "phone_number": "#/components/schemas/PhoneNumberCallerType",
            "feature_code": "#/components/schemas/FeatureCodeCallerType"
          }
        }
      },
      "ClientDataProtocol": {
        "enum": [
          "none",
          "unknown",
          "wifi",
          "bluetooth",
          "wimax",
          "vpn",
          "ethernet",
          "satellite",
          "mobile",
          "mobile_2g",
          "mobile_3g",
          "mobile_4g_lte",
          "mobile_5g",
          "mobile_6g",
          "other"
        ],
        "type": "string"
      },
      "ClientDesktopOS": {
        "enum": [
          "windows",
          "macos"
        ],
        "type": "string"
      },
      "ClientDetailsRequestBrowser": {
        "required": [
          "device_locale"
        ],
        "type": "object",
        "properties": {
          "device_locale": {
            "minLength": 1,
            "type": "string",
            "description": "The current language selected for the phone.",
            "example": "en-us"
          }
        },
        "additionalProperties": false
      },
      "ClientDetailsRequestDesktop": {
        "required": [
          "app_install_id",
          "device_locale",
          "device_os",
          "device_os_version"
        ],
        "type": "object",
        "properties": {
          "app_install_id": {
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "description": "A GUID generated by the app upon first run after installation."
          },
          "device_locale": {
            "minLength": 1,
            "type": "string",
            "description": "The current language selected for the phone.",
            "example": "en-us"
          },
          "device_os": {
            "$ref": "#/components/schemas/ClientDesktopOS"
          },
          "device_os_version": {
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "description": "The current OS version of the device.",
            "example": "14.2.1"
          },
          "data_protocol": {
            "$ref": "#/components/schemas/ClientDataProtocol"
          }
        },
        "additionalProperties": false
      },
      "ClientDetailsRequestMobile": {
        "required": [
          "app_install_id",
          "app_version",
          "device_brand",
          "device_hardware_id",
          "device_locale",
          "device_model",
          "device_name",
          "device_os",
          "device_os_version"
        ],
        "type": "object",
        "properties": {
          "app_version": {
            "minLength": 1,
            "type": "string",
            "description": "The version of the app making request.\r\nFormat: major.minor.build, and major MUST be 5, and the minor and build version must not start with a zero.",
            "example": "5.1.428"
          },
          "app_build_number": {
            "type": "string",
            "description": "The build number of the app",
            "nullable": true,
            "example": "301"
          },
          "app_install_id": {
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "description": "A GUID generated by the app upon first run after installation."
          },
          "device_hardware_id": {
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "description": "The unique ID of the hardware running the app.\r\nFor iOS this is the IDFV (https://developer.apple.com/documentation/uikit/uidevice/1620059-identifierforvendor).\r\nFor Android this is the ANDROID_ID (https://developer.android.com/reference/android/provider/Settings.Secure#ANDROID_ID)"
          },
          "device_locale": {
            "minLength": 1,
            "type": "string",
            "description": "The current language selected for the phone.",
            "example": "en-us"
          },
          "device_name": {
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "description": "The name of the device as set by the user.",
            "example": "Becca's iPhone 6"
          },
          "device_brand": {
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "description": "The manufacturer of the device. For example, Apple, Samsung, Motorola, etc.",
            "example": "Apple"
          },
          "device_model": {
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "description": "The specific model of the device.",
            "example": "iPhone 12 Pro"
          },
          "device_os": {
            "$ref": "#/components/schemas/ClientMobileOS"
          },
          "device_os_version": {
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "description": "The current OS version of the device.",
            "example": "14.2.1"
          },
          "data_protocol": {
            "$ref": "#/components/schemas/ClientDataProtocol"
          },
          "mobile_network_country_iso": {
            "pattern": "^[A-Z][A-Z]$",
            "type": "string",
            "description": "The country ISO Alpha-2 value of the country where the device is currently connected to the mobile network.",
            "nullable": true,
            "example": "DK"
          },
          "mobile_network_name": {
            "maxLength": 64,
            "type": "string",
            "description": "The sim card issuer's network name",
            "nullable": true,
            "example": "Vodafone"
          },
          "sim_country_iso": {
            "pattern": "^[A-Z][A-Z]$",
            "type": "string",
            "description": "The sim card issuer's country iso",
            "nullable": true,
            "example": "DK"
          },
          "sim_country_code": {
            "maximum": 999,
            "minimum": 1,
            "type": "integer",
            "description": "The sim card's phone number's country code",
            "format": "int32",
            "nullable": true,
            "example": 45
          }
        },
        "additionalProperties": false
      },
      "ClientMobileOS": {
        "enum": [
          "ios",
          "android"
        ],
        "type": "string"
      },
      "ClientPlatform": {
        "enum": [
          "mobile",
          "mobile_upgrade",
          "tablet",
          "tv",
          "desktop",
          "browser",
          "custom"
        ],
        "type": "string"
      },
      "ClosedConversationItem": {
        "required": [
          "closed_by",
          "created"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/ConversationItem"
          }
        ],
        "properties": {
          "closed_by": {
            "$ref": "#/components/schemas/User"
          },
          "created": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "Comment": {
        "required": [
          "comment_id",
          "created",
          "created_by",
          "text"
        ],
        "type": "object",
        "properties": {
          "comment_id": {
            "type": "string",
            "description": "The unique ID of the comment.",
            "example": "com_pWw8OanjkV12"
          },
          "text": {
            "minLength": 1,
            "type": "string",
            "description": "The actual text content of the comment.",
            "example": "This customer would like some assistance with his account."
          },
          "created": {
            "type": "string",
            "description": "When the comment was written.",
            "format": "date-time",
            "example": "2019-03-05T19:30:22Z"
          },
          "created_by": {
            "$ref": "#/components/schemas/User"
          }
        },
        "additionalProperties": false
      },
      "CommentConversationItem": {
        "required": [
          "comment"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/ConversationItem"
          }
        ],
        "properties": {
          "comment": {
            "$ref": "#/components/schemas/Comment"
          }
        },
        "additionalProperties": false
      },
      "CommentEvent": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/TimelineEvent"
          }
        ],
        "properties": {
          "comment": {
            "$ref": "#/components/schemas/Comment"
          }
        },
        "additionalProperties": false
      },
      "CommentList": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Comment"
            },
            "nullable": true
          },
          "has_more": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "Conversation": {
        "required": [
          "assignments",
          "created",
          "items",
          "last_item_created",
          "new_items",
          "participants",
          "status",
          "tags"
        ],
        "type": "object",
        "properties": {
          "conversation_id": {
            "type": "string",
            "example": "cnv_pWw8OJJyjDV1"
          },
          "status": {
            "$ref": "#/components/schemas/ConversationStatus"
          },
          "created": {
            "type": "string",
            "description": "When the first item in the conversation was created, or in other words when the conversation was started.",
            "format": "date-time",
            "example": "1984-06-05T19:30:22Z"
          },
          "last_item_created": {
            "type": "string",
            "description": "When the most recent item was added to the conversation.",
            "format": "date-time",
            "example": "1998-10-22T19:30:22Z"
          },
          "new_items": {
            "type": "boolean",
            "description": "True if this conversation has new items.",
            "example": true
          },
          "participants": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/PhoneNumberParticipant"
                },
                {
                  "$ref": "#/components/schemas/UserParticipant"
                },
                {
                  "$ref": "#/components/schemas/UserGroupParticipant"
                }
              ]
            },
            "description": "A list of participants in the conversation, or in other words all users and external phone numbers that have created an item in this conversation."
          },
          "items": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/SmsConversationItem"
                },
                {
                  "$ref": "#/components/schemas/ImConversionItem"
                },
                {
                  "$ref": "#/components/schemas/CommentConversationItem"
                },
                {
                  "$ref": "#/components/schemas/AssignmentConversationItem"
                },
                {
                  "$ref": "#/components/schemas/TagConversationItem"
                },
                {
                  "$ref": "#/components/schemas/ClosedConversationItem"
                }
              ],
              "description": "A message or item that was created during a conversation."
            },
            "description": "The list of `ConversationItem` in the particular conversation. Currently, there is only one type; `Sms`."
          },
          "has_more_items": {
            "type": "boolean",
            "description": "Indicates if the conversation has more items that can be retrieved using the List Conversation Items endpoint."
          },
          "oldest_message_id": {
            "type": "string",
            "example": "msg_6Jl81YG18rbV"
          },
          "latest_message_id": {
            "type": "string",
            "example": "msg_rodkRBZbk2GW"
          },
          "assignments": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/AssignedUser"
                },
                {
                  "$ref": "#/components/schemas/AssignedUserGroup"
                }
              ]
            },
            "description": "A chronological list of who the conversation has been assigned to over time."
          },
          "tags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Tag"
            },
            "description": "List of current tags on the conversation."
          }
        },
        "additionalProperties": false,
        "description": "A conversation is a chronologically ordered thread of items that all share the same context, for example `call`, `sms`, `voicemail`, `recording`, etc.\r\nCurrently, a conversation can only contain `Sms` items, but this schema is designed for the next generation of Telzio's dashboard and apps, which will be focused around an omnichannel conversation concept.\r\nA conversation is always assigned to either a specific `user` or a `user_group`."
      },
      "ConversationAccessRequest": {
        "required": [
          "conversation_id"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/AccessRequest"
          }
        ],
        "properties": {
          "conversation_id": {
            "type": "string",
            "example": "cnv_eqVDwrmxkbXv"
          }
        },
        "additionalProperties": false
      },
      "ConversationIdent": {
        "type": "object",
        "additionalProperties": false
      },
      "ConversationInaccessibleError": {
        "title": "Forbidden",
        "required": [
          "message",
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/ForbiddenErrorType"
          },
          "message": {
            "minLength": 1,
            "type": "string",
            "description": "A human-readable message providing more details about the error. This error can be shown to the end user.",
            "example": "You do not have permissions to perform this request."
          },
          "current_owner": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/AssignedUser"
              },
              {
                "$ref": "#/components/schemas/AssignedUserGroup"
              }
            ],
            "description": "The user or group this conversation is presently assigned to.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Describes an error caused by an invalid API request.",
        "readOnly": true
      },
      "ConversationItem": {
        "required": [
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "minLength": 1,
            "type": "string",
            "description": "The type of Conversation Item"
          }
        },
        "additionalProperties": false,
        "description": "A message or item that was created during a conversation.",
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "sms": "#/components/schemas/SmsConversationItem",
            "im_message": "#/components/schemas/ImConversionItem",
            "comment": "#/components/schemas/CommentConversationItem",
            "assignment": "#/components/schemas/AssignmentConversationItem",
            "tags": "#/components/schemas/TagConversationItem",
            "closed_conversation": "#/components/schemas/ClosedConversationItem"
          }
        }
      },
      "ConversationItemList": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/SmsConversationItem"
                },
                {
                  "$ref": "#/components/schemas/ImConversionItem"
                },
                {
                  "$ref": "#/components/schemas/CommentConversationItem"
                },
                {
                  "$ref": "#/components/schemas/AssignmentConversationItem"
                },
                {
                  "$ref": "#/components/schemas/TagConversationItem"
                },
                {
                  "$ref": "#/components/schemas/ClosedConversationItem"
                }
              ],
              "description": "A message or item that was created during a conversation."
            },
            "description": "A list of Conversation Items.",
            "nullable": true
          },
          "has_more": {
            "type": "boolean"
          },
          "oldest_message_id": {
            "type": "string",
            "example": "msg_5pOkGqp1q8zo"
          }
        },
        "additionalProperties": false
      },
      "ConversationList": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Conversation"
            },
            "description": "This list only includes the most recent item in each conversation.",
            "nullable": true
          },
          "has_more": {
            "type": "boolean"
          },
          "next_starting_after": {
            "type": "integer",
            "description": "The next value to provide as starting_after to page this response",
            "format": "int64",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A list of Conversations"
      },
      "ConversationParticipant": {
        "required": [
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "minLength": 1,
            "type": "string",
            "description": "The type of participant."
          }
        },
        "additionalProperties": false,
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "phone_number": "#/components/schemas/PhoneNumberParticipant",
            "user": "#/components/schemas/UserParticipant",
            "group": "#/components/schemas/UserGroupParticipant"
          }
        }
      },
      "ConversationReadStatusOptions": {
        "enum": [
          "read",
          "unread"
        ],
        "type": "string"
      },
      "ConversationStatus": {
        "enum": [
          "active",
          "closed"
        ],
        "type": "string",
        "description": "The current status of the conversation."
      },
      "ConversationStatusOptions": {
        "enum": [
          "closed"
        ],
        "type": "string"
      },
      "CustomerIoConfiguration": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/ResourceConfiguration"
          }
        ],
        "properties": {
          "site_id": {
            "type": "string",
            "description": "The customer io site_id",
            "nullable": true
          },
          "api_key": {
            "type": "string",
            "description": "The customer io api_key",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DataRetentionSetting": {
        "required": [
          "settingType"
        ],
        "type": "object",
        "properties": {
          "settingType": {
            "$ref": "#/components/schemas/DataRetentionSettingType"
          },
          "days": {
            "type": "integer",
            "description": "How many days Telzio should retain the data type before deleting or anonymizing it. NULL means that data is retained indefinitely.",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DataRetentionSettingList": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DataRetentionSetting"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DataRetentionSettingType": {
        "enum": [
          "call_log",
          "voicemail",
          "sms",
          "fax",
          "recording"
        ],
        "type": "string"
      },
      "EncodedHashId": {
        "type": "object",
        "additionalProperties": false
      },
      "Fax": {
        "required": [
          "call_id",
          "created",
          "direction",
          "fax_id",
          "from",
          "status",
          "to"
        ],
        "type": "object",
        "properties": {
          "fax_id": {
            "type": "string",
            "description": "The unique ID of the fax.",
            "example": "fax_pQq8bJgZ8MxN"
          },
          "call_id": {
            "minLength": 1,
            "type": "string",
            "description": "The ID of the call associated with the fax.",
            "example": "7-5fda90e0-2a"
          },
          "direction": {
            "$ref": "#/components/schemas/FaxDirection"
          },
          "from": {
            "minLength": 1,
            "type": "string",
            "description": ""
          },
          "to": {
            "minLength": 1,
            "type": "string",
            "description": ""
          },
          "status": {
            "$ref": "#/components/schemas/FaxStatus"
          },
          "created": {
            "type": "string",
            "description": "The date and time the fax was sent or received.",
            "format": "date-time",
            "example": "2020-03-15 13:05:20.000Z"
          },
          "assigned_to": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/AssignedUser"
              },
              {
                "$ref": "#/components/schemas/AssignedUserGroup"
              }
            ],
            "description": "The user or group the fax currently is assigned to.",
            "nullable": true
          },
          "tags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Tag"
            },
            "description": "A list of objects containing the tags that are currently assigned to the voicemail.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "FaxDirection": {
        "enum": [
          "inbound",
          "outbound"
        ],
        "type": "string"
      },
      "FaxFilters": {
        "enum": [
          "sent",
          "received"
        ],
        "type": "string"
      },
      "FaxList": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FaxListItem"
            },
            "nullable": true
          },
          "has_more": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "FaxListItem": {
        "required": [
          "call_id",
          "created",
          "direction",
          "fax_id",
          "from",
          "status",
          "to"
        ],
        "type": "object",
        "properties": {
          "fax_id": {
            "type": "string",
            "description": "The unique ID of the fax.",
            "example": "fax_0MW8Y13Y8n15"
          },
          "call_id": {
            "minLength": 1,
            "type": "string",
            "description": "The ID of the call associated with the fax.",
            "example": "7-5fda90e0-2a"
          },
          "direction": {
            "$ref": "#/components/schemas/FaxDirection"
          },
          "from": {
            "minLength": 1,
            "type": "string",
            "description": ""
          },
          "to": {
            "minLength": 1,
            "type": "string",
            "description": ""
          },
          "status": {
            "$ref": "#/components/schemas/FaxStatus"
          },
          "created": {
            "type": "string",
            "description": "The date and time the fax was sent or received.",
            "format": "date-time",
            "example": "2020-03-15 13:05:20.000Z"
          },
          "assigned_to": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/AssignedUser"
              },
              {
                "$ref": "#/components/schemas/AssignedUserGroup"
              }
            ],
            "description": "The user or group the fax currently is assigned to.",
            "nullable": true
          },
          "tags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Tag"
            },
            "description": "A list of objects containing the tags that are currently assigned to the voicemail.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "FaxStatus": {
        "enum": [
          "sent",
          "received",
          "deleted"
        ],
        "type": "string"
      },
      "FaxUpdatesResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/CommentEvent"
                },
                {
                  "$ref": "#/components/schemas/AssignmentEvent"
                },
                {
                  "$ref": "#/components/schemas/TagsEvent"
                }
              ]
            },
            "description": "List of timeline events created (if any) by this update.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "FeatureCode": {
        "type": "object",
        "properties": {
          "raw": {
            "type": "string",
            "description": "The raw unformatted number.",
            "nullable": true,
            "example": "*98"
          },
          "feature_code_type": {
            "$ref": "#/components/schemas/FeatureCodeType"
          }
        },
        "additionalProperties": false
      },
      "FeatureCodeCallerType": {
        "required": [
          "feature_code"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/Caller"
          }
        ],
        "properties": {
          "feature_code": {
            "$ref": "#/components/schemas/FeatureCode"
          }
        },
        "additionalProperties": false
      },
      "FeatureCodeType": {
        "enum": [
          "voicemail",
          "queue_menu",
          "monitor_call",
          "mobile_conference_call"
        ],
        "type": "string"
      },
      "FeaturesPreferenceBundle": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/PreferenceBundle"
          }
        ],
        "properties": {
          "enabled_features": {
            "type": "object",
            "additionalProperties": {
              "type": "boolean",
              "nullable": true
            },
            "description": "A list of features that are enabled/disabled for the user.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "FeaturesPreferenceBundleUpdateRequest": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/PreferenceBundleUpdateRequestBase"
          }
        ],
        "properties": {
          "web_phone": {
            "type": "boolean",
            "description": "Enable or disable the web phone.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ForbiddenError": {
        "title": "Forbidden",
        "required": [
          "message",
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/ForbiddenErrorType"
          },
          "message": {
            "minLength": 1,
            "type": "string",
            "description": "A human-readable message providing more details about the error. This error can be shown to the end user.",
            "example": "You do not have permissions to perform this request."
          }
        },
        "additionalProperties": false,
        "description": "Describes an error caused by an invalid API request.",
        "readOnly": true
      },
      "ForbiddenErrorType": {
        "enum": [
          "forbidden",
          "forbidden_number_access",
          "forbidden_number_change_access",
          "forbidden_number_sms_not_enabled",
          "forbidden_conversation_access",
          "forbidden_voicemail_access",
          "forbidden_recording_access",
          "forbidden_fax_access",
          "forbidden_comment_access",
          "forbidden_user_access",
          "forbidden_queue_access"
        ],
        "type": "string"
      },
      "HoldMusic": {
        "required": [
          "hold_music_id"
        ],
        "type": "object",
        "properties": {
          "hold_music_id": {
            "type": "string",
            "description": "The unique ID for the song.",
            "example": "moh_7z48oENNk6qQ"
          },
          "title": {
            "type": "string",
            "description": "The title of the song.",
            "nullable": true,
            "example": "The Trashmen - Surfin Bird"
          }
        },
        "additionalProperties": false
      },
      "HoldMusicList": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/HoldMusic"
            },
            "nullable": true
          },
          "has_more": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "HoldMusicListRequest": {
        "type": "object",
        "additionalProperties": false
      },
      "ImConversionItem": {
        "required": [
          "im_message"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/ConversationItem"
          }
        ],
        "properties": {
          "im_message": {
            "$ref": "#/components/schemas/ImMessage"
          }
        },
        "additionalProperties": false
      },
      "ImMessage": {
        "required": [
          "chat_message_id",
          "created",
          "is_deleted",
          "sent_by",
          "text"
        ],
        "type": "object",
        "properties": {
          "chat_message_id": {
            "type": "string",
            "example": "msg_jXmDLzjYPgGZ"
          },
          "created": {
            "type": "string",
            "description": "When the message was sent or received.",
            "format": "date-time",
            "example": "1992-07-18T19:30:22Z"
          },
          "sent_by": {
            "$ref": "#/components/schemas/User"
          },
          "text": {
            "minLength": 1,
            "type": "string",
            "description": "The message text.",
            "example": "Bird Is The Word."
          },
          "is_deleted": {
            "type": "boolean",
            "description": "Indicates if the message is deleted"
          }
        },
        "additionalProperties": false
      },
      "LegalPolicy": {
        "type": "object",
        "properties": {
          "policy_key": {
            "type": "string",
            "description": "Type of policy.",
            "nullable": true
          },
          "policy_version": {
            "type": "integer",
            "description": "Version of this policy",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "description": "Title of policy. Used when displaying the policy's body.",
            "nullable": true
          },
          "body": {
            "type": "string",
            "description": "HTML Formatted body, containing the actual text.",
            "nullable": true
          },
          "effective_date": {
            "type": "string",
            "description": "Date from when this policy/version is effective.",
            "format": "date-time"
          },
          "superceeding_key": {
            "type": "string",
            "description": "The `policy_key` of a newer policy that replaces this one. Used in conjunction with superceeding_version to retrieve the superceeding policy.",
            "nullable": true
          },
          "superceeding_version": {
            "type": "integer",
            "description": "The `policy_version` of a newer policy that replaces this one. Used in conjunction with superceeding_key to retrieve the superceeding policy.",
            "format": "int32",
            "nullable": true
          },
          "consent_required": {
            "type": "boolean",
            "description": "Specifies if consent is required for continued use of Telzio."
          },
          "consent": {
            "$ref": "#/components/schemas/LegalPolicyConsent"
          }
        },
        "additionalProperties": false
      },
      "LegalPolicyConsent": {
        "type": "object",
        "properties": {
          "created": {
            "type": "string",
            "description": "The date and time when consent to this policy version was given.",
            "format": "date-time"
          },
          "ip": {
            "type": "string",
            "description": "The IP address the consent was given from.",
            "nullable": true
          },
          "user_agent": {
            "type": "string",
            "description": "The User Agent of the device the consent was given from.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "LegalPolicyList": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LegalPolicy"
            },
            "description": "A list of policies objects.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "LogCreateRequest": {
        "required": [
          "client_platform",
          "entries"
        ],
        "type": "object",
        "properties": {
          "client_platform": {
            "$ref": "#/components/schemas/ClientPlatform"
          },
          "entries": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LogEntry"
            },
            "description": "A list of entries to submit to the log.\r\nYou can submit up to 100 entries per request by specifying them in a collection this way;\r\nentries[0][created]\r\nentries[0][message]\r\nentries[0][severity]\r\nentries[1][created]\r\nentries[2][message]\r\nentries[3][severity]\r\netc..."
          }
        },
        "additionalProperties": false,
        "discriminator": {
          "propertyName": "client_platform",
          "mapping": {
            "mobile": "#/components/schemas/LogCreateRequestMobile",
            "desktop": "#/components/schemas/LogCreateRequestDesktop"
          }
        }
      },
      "LogCreateRequestDesktop": {
        "required": [
          "client_details"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/LogCreateRequest"
          }
        ],
        "properties": {
          "client_details": {
            "$ref": "#/components/schemas/ClientDetailsRequestDesktop"
          }
        },
        "additionalProperties": false
      },
      "LogCreateRequestMobile": {
        "required": [
          "client_details"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/LogCreateRequest"
          }
        ],
        "properties": {
          "client_details": {
            "$ref": "#/components/schemas/ClientDetailsRequestMobile"
          }
        },
        "additionalProperties": false
      },
      "LogEntry": {
        "required": [
          "message"
        ],
        "type": "object",
        "properties": {
          "created": {
            "type": "string",
            "description": "Timestamp representing when the log entry was created.",
            "format": "date-time"
          },
          "sequence": {
            "type": "integer",
            "description": "An incrementing number, used to tie break sorting if created dates are identical for entries.",
            "format": "int64"
          },
          "severity": {
            "$ref": "#/components/schemas/LogSeverity"
          },
          "component_id": {
            "type": "string",
            "description": "A string referrring to the component that generated this log statement",
            "nullable": true
          },
          "event_type": {
            "type": "string",
            "description": "A string referring to an event/method occurring inside the component referred to by component_id",
            "nullable": true
          },
          "call_id": {
            "type": "string",
            "nullable": true
          },
          "call_uuid": {
            "type": "string",
            "description": "For entries related to phone calls, contains the correlation uuid",
            "nullable": true
          },
          "sms_id": {
            "type": "string",
            "description": "For entries related to sms, contains the correlation uuid",
            "nullable": true
          },
          "voicemail_id": {
            "type": "string",
            "description": "For entries related to voicemails",
            "nullable": true,
            "example": "vm_eqVDwxzv8bXv"
          },
          "recording_id": {
            "type": "string",
            "description": "For entries related to recordings",
            "nullable": true
          },
          "message": {
            "minLength": 1,
            "type": "string",
            "description": "The contents of the log."
          },
          "full_message": {
            "type": "string",
            "description": "Provides more detail to the log, for things like stack traces.",
            "nullable": true
          },
          "additional_properties": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "nullable": true
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "LogSeverity": {
        "enum": [
          "DEBUG",
          "INFO",
          "NOTICE",
          "ERROR",
          "WARNING"
        ],
        "type": "string"
      },
      "MessageIdent": {
        "type": "object",
        "additionalProperties": false
      },
      "NotificationTokenType": {
        "enum": [
          "ios_voip",
          "ios_remote_notifications",
          "android_fcm"
        ],
        "type": "string"
      },
      "Number": {
        "required": [
          "created",
          "number_id",
          "number_type",
          "phone_number",
          "status"
        ],
        "type": "object",
        "properties": {
          "number_id": {
            "type": "string",
            "description": "The unique ID for this number.",
            "example": "num_B5Kk53nw8zNe"
          },
          "number_type": {
            "$ref": "#/components/schemas/NumberType"
          },
          "phone_number": {
            "$ref": "#/components/schemas/PhoneNumber"
          },
          "status": {
            "$ref": "#/components/schemas/NumberStatus"
          },
          "created": {
            "type": "string",
            "description": "When the number was added to this customer's account.",
            "format": "date-time",
            "example": "2013-08-12T09:30:22Z"
          }
        },
        "additionalProperties": false
      },
      "NumberList": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Number"
            },
            "nullable": true
          },
          "has_more": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "NumberStatus": {
        "enum": [
          "pending",
          "active",
          "canceled"
        ],
        "type": "string"
      },
      "NumberType": {
        "enum": [
          "local",
          "tollfree"
        ],
        "type": "string"
      },
      "OverrideCnamSpamFilterRuleCreateRequest": {
        "required": [
          "text"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/SpamFilterRuleCreateUpdateRequest"
          }
        ],
        "properties": {
          "text": {
            "maxLength": 254,
            "minLength": 1,
            "type": "string",
            "description": "The text to update the CNAM value with before showing it to the receiver of the call."
          }
        },
        "additionalProperties": false
      },
      "OverrideSpamFilterRule": {
        "required": [
          "text"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/SpamFilterRule"
          }
        ],
        "properties": {
          "text": {
            "minLength": 1,
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "PasswordPreferenceBundle": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/PreferenceBundle"
          }
        ],
        "additionalProperties": false
      },
      "PasswordPreferenceBundleUpdateRequest": {
        "required": [
          "current_password",
          "new_password"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/PreferenceBundleUpdateRequestBase"
          }
        ],
        "properties": {
          "current_password": {
            "minLength": 1,
            "type": "string",
            "description": "The user's current password."
          },
          "new_password": {
            "minLength": 1,
            "type": "string",
            "description": "The user's new password"
          }
        },
        "additionalProperties": false
      },
      "PhoneNumber": {
        "type": "object",
        "properties": {
          "raw": {
            "type": "string",
            "description": "The raw unformatted number.",
            "nullable": true,
            "example": "8889989080"
          },
          "e164": {
            "type": "string",
            "description": "The international E.164 formatted representation of the number.",
            "nullable": true,
            "example": "+18889989080"
          },
          "international_format": {
            "type": "string",
            "description": "The internationally recognized representation of the phone number.",
            "nullable": true,
            "example": "+1 888-998-9080"
          },
          "local_format": {
            "type": "string",
            "description": "The locally formatted representation of the phone number.",
            "nullable": true,
            "example": "(888) 998-9080"
          },
          "country_iso": {
            "type": "string",
            "description": "The country the phone number is from, formatted as ISO 3166-1 alpha-2.",
            "nullable": true,
            "example": "US"
          },
          "cnam": {
            "type": "string",
            "description": "The name the number's owner if available.",
            "nullable": true,
            "example": "GRIFFIN, PETER"
          },
          "region": {
            "type": "string",
            "description": "Details about the country or city (if available) where the phone number is from.",
            "nullable": true,
            "example": "Los Angeles, CA"
          }
        },
        "additionalProperties": false
      },
      "PhoneNumberCallerType": {
        "required": [
          "phone_number"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/Caller"
          }
        ],
        "properties": {
          "phone_number": {
            "$ref": "#/components/schemas/PhoneNumber"
          }
        },
        "additionalProperties": false
      },
      "PhoneNumberParticipant": {
        "required": [
          "phone_number"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/ConversationParticipant"
          }
        ],
        "properties": {
          "phone_number": {
            "$ref": "#/components/schemas/PhoneNumber"
          }
        },
        "additionalProperties": false
      },
      "PreferenceBundle": {
        "required": [
          "editable_fields",
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/preference_bundle_type"
          },
          "editable_fields": {
            "type": "object",
            "additionalProperties": {
              "type": "boolean",
              "nullable": true
            },
            "description": "A list of fields the user is permitted to edit. This may vary based on the account's settings."
          }
        },
        "additionalProperties": false,
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "user_details": "#/components/schemas/UserDetailsPreferenceBundle",
            "unanswered_calls": "#/components/schemas/UnansweredCallsPreferenceBundle",
            "password": "#/components/schemas/PasswordPreferenceBundle",
            "features": "#/components/schemas/FeaturesPreferenceBundle",
            "availability": "#/components/schemas/AvailabilityPreferenceBundle",
            "sounds": "#/components/schemas/SoundsPreferenceBundle"
          }
        }
      },
      "PreferenceBundleList": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/UserDetailsPreferenceBundle"
                },
                {
                  "$ref": "#/components/schemas/UnansweredCallsPreferenceBundle"
                },
                {
                  "$ref": "#/components/schemas/PasswordPreferenceBundle"
                },
                {
                  "$ref": "#/components/schemas/FeaturesPreferenceBundle"
                },
                {
                  "$ref": "#/components/schemas/AvailabilityPreferenceBundle"
                },
                {
                  "$ref": "#/components/schemas/SoundsPreferenceBundle"
                }
              ]
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PreferenceBundleUpdateRequestBase": {
        "required": [
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/preference_bundle_type"
          }
        },
        "additionalProperties": false,
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "user_details": "#/components/schemas/UserDetailsPreferenceBundleUpdateRequest",
            "unanswered_calls": "#/components/schemas/UnansweredCallsPreferenceBundleUpdateRequest",
            "features": "#/components/schemas/FeaturesPreferenceBundleUpdateRequest",
            "password": "#/components/schemas/PasswordPreferenceBundleUpdateRequest",
            "availability": "#/components/schemas/AvailabilityPreferenceBundleUpdateRequest",
            "sounds": "#/components/schemas/SoundsPreferenceBundleUpdateRequest"
          }
        }
      },
      "PrependCnamSpamFilterRuleCreateRequest": {
        "required": [
          "text"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/SpamFilterRuleCreateUpdateRequest"
          }
        ],
        "properties": {
          "text": {
            "maxLength": 254,
            "minLength": 1,
            "type": "string",
            "description": "The text to update the CNAM value with before showing it to the receiver of the call."
          }
        },
        "additionalProperties": false
      },
      "PrependSpamFilterRule": {
        "required": [
          "text"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/SpamFilterRule"
          }
        ],
        "properties": {
          "text": {
            "minLength": 1,
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "Provision": {
        "required": [
          "account",
          "account_groups",
          "account_tags",
          "assigned_groups",
          "assigned_number",
          "available_numbers",
          "device_id",
          "user",
          "user_type"
        ],
        "type": "object",
        "properties": {
          "device_id": {
            "minLength": 1,
            "type": "string",
            "description": "A unique ID representing the device. This will remain the same when when logging out of the app and signing back in with a different username.",
            "example": "dv_dy9D7QZbPzvJ"
          },
          "claims_token": {
            "type": "string",
            "description": "If returned, this value must be used as \"Bearer Token\" on future requests.",
            "nullable": true,
            "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
          },
          "user": {
            "$ref": "#/components/schemas/User"
          },
          "user_type": {
            "$ref": "#/components/schemas/UserAccessType"
          },
          "assigned_groups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserGroup"
            },
            "description": "A list of groups the user is member of."
          },
          "account_groups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserGroup"
            },
            "description": "A list of groups on account."
          },
          "account": {
            "$ref": "#/components/schemas/Account"
          },
          "available_numbers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Number"
            },
            "description": "A list of numbers on the Telzio Account that this user is allowed to make calls from."
          },
          "assigned_number": {
            "$ref": "#/components/schemas/Number"
          },
          "account_tags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Tag"
            },
            "description": "A list of tags on the Telzio Account"
          },
          "legal_policies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LegalPolicy"
            },
            "description": "Contains a list of policies the user must consent to.\r\nSome policies may not be in effect yet, but should still be presented to the user upon login. This is defined by the policy's _\"effective date\"_.",
            "nullable": true
          },
          "resource_configurations": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/CustomerIoConfiguration"
                }
              ]
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "QueryConversationResponse": {
        "required": [
          "query_result"
        ],
        "type": "object",
        "properties": {
          "query_result": {
            "$ref": "#/components/schemas/QueryConversationResult"
          },
          "conversation_id": {
            "type": "string",
            "example": "cnv_pWw8OyKAkV12"
          },
          "current_owner": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/AssignedUser"
              },
              {
                "$ref": "#/components/schemas/AssignedUserGroup"
              }
            ],
            "description": "In case query_result is \"conversation_exists_no_access\", this shows who currently owns the conversation.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "QueryConversationResult": {
        "enum": [
          "conversation_exists",
          "no_conversation_exists",
          "conversation_exists_no_access"
        ],
        "type": "string"
      },
      "Queue": {
        "required": [
          "name",
          "queue_id"
        ],
        "type": "object",
        "properties": {
          "queue_id": {
            "type": "string",
            "description": "The unique ID of the queue.",
            "example": "que_jxEPmymeP9WJ"
          },
          "name": {
            "minLength": 1,
            "type": "string",
            "description": "The name of the queue."
          },
          "agents": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/QueueAgent"
            },
            "description": "A list of agents associated with this queue.",
            "nullable": true
          },
          "calls": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/QueueCall"
            },
            "description": "A list of calls currently going through this queue.",
            "nullable": true
          },
          "summary": {
            "$ref": "#/components/schemas/QueueSummary"
          }
        },
        "additionalProperties": false
      },
      "QueueAgent": {
        "required": [
          "enabled",
          "grace_time",
          "user"
        ],
        "type": "object",
        "properties": {
          "user": {
            "$ref": "#/components/schemas/User"
          },
          "status": {
            "$ref": "#/components/schemas/QueueAgentAvailabilityStatus"
          },
          "enabled": {
            "type": "boolean",
            "description": "Defines if the user is available to take calls or not."
          },
          "grace_time": {
            "type": "integer",
            "description": "Defines a period of time to wait after each ended call, before allowing new calls to be directed to this agent.",
            "format": "int32"
          },
          "gracing_time_left": {
            "type": "integer",
            "description": "If the agent is currently in a gracing period, this displays how much time is left.",
            "format": "int32",
            "nullable": true
          },
          "queue": {
            "$ref": "#/components/schemas/Queue"
          }
        },
        "additionalProperties": false
      },
      "QueueAgentAvailabilityStatus": {
        "enum": [
          "offline",
          "unavailable",
          "idle",
          "ringing",
          "busy",
          "gracing"
        ],
        "type": "string"
      },
      "QueueCall": {
        "type": "object",
        "properties": {
          "call": {
            "$ref": "#/components/schemas/Call"
          },
          "status": {
            "$ref": "#/components/schemas/QueueCallStatus"
          },
          "event_timestamps": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "format": "date-time",
              "nullable": true
            },
            "description": "A list of timestamps for when certain events occurred for this call.",
            "nullable": true
          },
          "event_durations": {
            "type": "object",
            "additionalProperties": {
              "type": "integer",
              "format": "int32",
              "nullable": true
            },
            "description": "A list of int showing how many seconds the call had a certain status.\r\nThis can for example be used to show hold time and current talk time.",
            "nullable": true
          },
          "connected_agent": {
            "$ref": "#/components/schemas/QueueAgent"
          }
        },
        "additionalProperties": false
      },
      "QueueCallStatus": {
        "enum": [
          "waiting",
          "connected",
          "completed",
          "timeout",
          "abandoned",
          "no_agents",
          "error",
          "kicked"
        ],
        "type": "string"
      },
      "QueueList": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Queue"
            },
            "description": "A list of Queue objects.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "QueueSummary": {
        "required": [
          "agents_busy",
          "agents_gracing",
          "agents_idle",
          "agents_offline",
          "agents_total"
        ],
        "type": "object",
        "properties": {
          "agents_total": {
            "type": "integer",
            "description": "The total number of agents assigned to the queue.",
            "format": "int32"
          },
          "agents_idle": {
            "type": "integer",
            "description": "The number of online agents who are currently not on the phone and available to take calls.",
            "format": "int32"
          },
          "agents_busy": {
            "type": "integer",
            "description": "The number of online agents who are currently talking to someone, and can't take any new calls right now.",
            "format": "int32"
          },
          "agents_gracing": {
            "type": "integer",
            "description": "The number of online agents who are now in gracing-mode because they recently have been talking.\r\nGracing mode allows agents some time to wrap up their previous call before taking a new one.",
            "format": "int32"
          },
          "agents_offline": {
            "type": "integer",
            "description": "The total number of offline agents, who are either not connected to Telzio or marked as unavailable in the queue.",
            "format": "int32"
          },
          "calls_waiting": {
            "type": "integer",
            "description": "Current number of calls waiting in the queue.",
            "format": "int32"
          },
          "calls_connected": {
            "type": "integer",
            "description": "Current number of calls currently connected to an agent.",
            "format": "int32"
          },
          "longest_hold_time": {
            "type": "integer",
            "description": "The the longest time any of the current callers in the queue has been waiting.",
            "format": "int32"
          },
          "average_hold_time": {
            "type": "integer",
            "description": "The average hold time of current callers.",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "RecentCall": {
        "required": [
          "call_id",
          "date",
          "direction",
          "from",
          "number_id",
          "status",
          "to"
        ],
        "type": "object",
        "properties": {
          "call_id": {
            "minLength": 1,
            "type": "string",
            "description": "The unique ID of the call"
          },
          "from": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/UserCallerType"
              },
              {
                "$ref": "#/components/schemas/PhoneNumberCallerType"
              },
              {
                "$ref": "#/components/schemas/FeatureCodeCallerType"
              }
            ],
            "description": "Caller who made the call"
          },
          "to": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/UserCallerType"
              },
              {
                "$ref": "#/components/schemas/PhoneNumberCallerType"
              },
              {
                "$ref": "#/components/schemas/FeatureCodeCallerType"
              }
            ],
            "description": "Caller who received the call"
          },
          "direction": {
            "$ref": "#/components/schemas/CallDirection"
          },
          "status": {
            "$ref": "#/components/schemas/RecentCallStatus"
          },
          "number_id": {
            "type": "string",
            "description": "The telzio number_id that for inbound calls was called, or for outbound calls was called from.",
            "example": "num_y2MkJ3G4DBoW"
          },
          "date": {
            "type": "string",
            "description": "Date of the call",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "RecentCallFilters": {
        "enum": [
          "missed",
          "outbound",
          "inbound"
        ],
        "type": "string"
      },
      "RecentCallList": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RecentCall"
            },
            "nullable": true
          },
          "has_more": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "RecentCallStatus": {
        "enum": [
          "completed",
          "missed"
        ],
        "type": "string"
      },
      "Recording": {
        "required": [
          "call_id",
          "created",
          "duration",
          "recording_id",
          "status"
        ],
        "type": "object",
        "properties": {
          "recording_id": {
            "type": "string",
            "description": "The unique ID of the recording.",
            "example": "rec_0MW8YeNR8n15"
          },
          "call_id": {
            "minLength": 1,
            "type": "string",
            "description": "The Call ID of the call associated with the recording"
          },
          "from": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/UserCallerType"
              },
              {
                "$ref": "#/components/schemas/PhoneNumberCallerType"
              },
              {
                "$ref": "#/components/schemas/FeatureCodeCallerType"
              }
            ],
            "description": "Phone number or username of caller",
            "nullable": true
          },
          "to": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/UserCallerType"
              },
              {
                "$ref": "#/components/schemas/PhoneNumberCallerType"
              },
              {
                "$ref": "#/components/schemas/FeatureCodeCallerType"
              }
            ],
            "description": "Number that was called",
            "nullable": true
          },
          "direction": {
            "$ref": "#/components/schemas/RecordingDirection"
          },
          "status": {
            "$ref": "#/components/schemas/RecordingStatus"
          },
          "created": {
            "type": "string",
            "description": "When the recording was created.",
            "format": "date-time",
            "example": "2020-03-17T19:30:22Z"
          },
          "duration": {
            "type": "integer",
            "description": "The playback length of the recording in seconds",
            "format": "int32",
            "example": 324
          },
          "tags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Tag"
            },
            "description": "A list of objects containing the tags that are currently assigned to the recording.",
            "nullable": true
          },
          "comments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Comment"
            },
            "description": "A list of objects containing the comments added to the recording.",
            "nullable": true
          },
          "assignment": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/AssignedUser"
              },
              {
                "$ref": "#/components/schemas/AssignedUserGroup"
              }
            ],
            "description": "A list of the users or groups that have been assigned to the recording.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "RecordingDirection": {
        "enum": [
          "inbound",
          "outbound",
          "internal"
        ],
        "type": "string"
      },
      "RecordingFilters": {
        "enum": [
          "new",
          "listened"
        ],
        "type": "string"
      },
      "RecordingList": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Recording"
            },
            "description": "List of Recordings",
            "nullable": true
          },
          "has_more": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "RecordingStatus": {
        "enum": [
          "new",
          "listened"
        ],
        "type": "string"
      },
      "RecordingUpdateResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/CommentEvent"
                },
                {
                  "$ref": "#/components/schemas/AssignmentEvent"
                },
                {
                  "$ref": "#/components/schemas/TagsEvent"
                }
              ]
            },
            "description": "List of timeline events created (if any) by this update.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "RejectSpamFilterRule": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/SpamFilterRule"
          }
        ],
        "additionalProperties": false
      },
      "RejectSpamFilterRuleCreateUpdateRequest": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/SpamFilterRuleCreateUpdateRequest"
          }
        ],
        "additionalProperties": false
      },
      "ResourceConfiguration": {
        "required": [
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "minLength": 1,
            "type": "string",
            "description": "The resource type."
          }
        },
        "additionalProperties": false,
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "customer_io": "#/components/schemas/CustomerIoConfiguration"
          }
        }
      },
      "SMS": {
        "required": [
          "conversation_id",
          "created",
          "direction",
          "number",
          "recipient",
          "sender",
          "status"
        ],
        "type": "object",
        "properties": {
          "conversation_id": {
            "type": "string",
            "example": "cnv_6Jl81NB6PrbV"
          },
          "sms_id": {
            "type": "string",
            "example": "msg_Wb2DzJdjD3j7"
          },
          "text": {
            "type": "string",
            "description": "The text in the SMS. This can be null if the sender only included a picture.",
            "nullable": true,
            "example": "There's A Message In My Alpha-Bits..."
          },
          "created": {
            "type": "string",
            "description": "When the SMS was sent or received.",
            "format": "date-time",
            "example": "1992-07-18T19:30:22Z"
          },
          "status": {
            "$ref": "#/components/schemas/SMSStatus"
          },
          "direction": {
            "$ref": "#/components/schemas/SMSDirection"
          },
          "sender": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/PhoneNumberParticipant"
              },
              {
                "$ref": "#/components/schemas/UserParticipant"
              },
              {
                "$ref": "#/components/schemas/UserGroupParticipant"
              }
            ],
            "description": "The sender of the SMS."
          },
          "recipient": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/PhoneNumberParticipant"
              },
              {
                "$ref": "#/components/schemas/UserParticipant"
              },
              {
                "$ref": "#/components/schemas/UserGroupParticipant"
              }
            ],
            "description": "The recipient of the message"
          },
          "number": {
            "$ref": "#/components/schemas/Number"
          },
          "media_attachments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SMSMedia"
            },
            "description": "If this message has media attached, these are the IDs of those.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SMSDirection": {
        "enum": [
          "inbound",
          "outbound"
        ],
        "type": "string"
      },
      "SMSMedia": {
        "required": [
          "created",
          "filename",
          "mime_type",
          "sms_media_id",
          "status"
        ],
        "type": "object",
        "properties": {
          "sms_media_id": {
            "type": "string",
            "description": "The unique ID associated with this SMS media.",
            "example": "mms_5ZV8vy3dDLMJ"
          },
          "sms_id": {
            "type": "string",
            "example": "msg_lXMk9GeA8d0Y"
          },
          "status": {
            "$ref": "#/components/schemas/SMSMediaStatus"
          },
          "created": {
            "type": "string",
            "description": "When the media was created.",
            "format": "date-time",
            "example": "1992-07-18T19:30:22Z"
          },
          "mime_type": {
            "minLength": 1,
            "type": "string",
            "description": "The mime type of the binary file.",
            "example": "image/jpg"
          },
          "filename": {
            "minLength": 1,
            "type": "string",
            "description": "The original filename.",
            "example": "peter_pumpkineater.jpg"
          }
        },
        "additionalProperties": false
      },
      "SMSMediaStatus": {
        "enum": [
          "active",
          "deleted"
        ],
        "type": "string"
      },
      "SMSMediaUpload": {
        "type": "object",
        "properties": {
          "sms_media_upload_id": {
            "type": "string",
            "description": "A temporary ID for an uploaded file, that cane be used as a media attachment in an SMS.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SMSStatus": {
        "enum": [
          "active",
          "deleted",
          "failed"
        ],
        "type": "string"
      },
      "SipConnectionData": {
        "type": "object",
        "properties": {
          "sip_uri": {
            "type": "string",
            "description": "SIP URI used when creating a sip connection",
            "nullable": true
          },
          "from_name": {
            "type": "string",
            "description": "Name portion of from header to use",
            "nullable": true
          },
          "ws_sip_endpoints": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of available websocket sip endpoints",
            "nullable": true
          },
          "web_rtc_peer_connection_data": {
            "$ref": "#/components/schemas/WebRtcPeerConnectionData"
          }
        },
        "additionalProperties": false
      },
      "SmsConversationIdent": {
        "type": "object",
        "properties": {
          "conversationId": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "SmsConversationItem": {
        "required": [
          "sms"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/ConversationItem"
          }
        ],
        "properties": {
          "sms": {
            "$ref": "#/components/schemas/SMS"
          }
        },
        "additionalProperties": false
      },
      "SmsMessageIdent": {
        "type": "object",
        "properties": {
          "messageId": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "SortDirection": {
        "enum": [
          "desc",
          "asc"
        ],
        "type": "string"
      },
      "SoundsPreferenceBundle": {
        "required": [
          "sounds"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/PreferenceBundle"
          }
        ],
        "properties": {
          "sounds": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "nullable": true
            },
            "description": "A list of sounds the user has chosen on their device."
          }
        },
        "additionalProperties": false
      },
      "SoundsPreferenceBundleUpdateRequest": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/PreferenceBundleUpdateRequestBase"
          }
        ],
        "properties": {
          "ringtone": {
            "maxLength": 255,
            "type": "string",
            "description": "The filename of the sound to play when new calls come in.",
            "nullable": true
          },
          "new_sms": {
            "maxLength": 255,
            "type": "string",
            "description": "The filename of the sound to play when a new SMS arrives.",
            "nullable": true
          },
          "new_voicemail": {
            "maxLength": 255,
            "type": "string",
            "description": "The filename of the sound to play when new voicemail arrives.",
            "nullable": true
          },
          "new_fax": {
            "maxLength": 255,
            "type": "string",
            "description": "The filename of the sound to play when a new fax arrived.",
            "nullable": true
          },
          "new_assignment": {
            "maxLength": 255,
            "type": "string",
            "description": "The filename of the sound to play when someone is assigned to yourself.",
            "nullable": true
          },
          "notifications": {
            "maxLength": 255,
            "type": "string",
            "description": "The filename of the sound to play when other notifications occur in the app.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SpamFilterRule": {
        "required": [
          "action",
          "spam_filter_rule_id",
          "threshold"
        ],
        "type": "object",
        "properties": {
          "action": {
            "minLength": 1,
            "type": "string",
            "description": "The type of action taken when an incoming call's spam score is above a rule's threshold."
          },
          "spam_filter_rule_id": {
            "type": "string",
            "description": "The unique ID for the spam filter rule.",
            "example": "sfr_yZG8nRq28239"
          },
          "threshold": {
            "maximum": 100,
            "minimum": 1,
            "type": "integer",
            "description": "Calls with a spam score above the threshold will trigger the rule's action.",
            "format": "int32",
            "example": 80
          },
          "number": {
            "$ref": "#/components/schemas/Number"
          }
        },
        "additionalProperties": false,
        "discriminator": {
          "propertyName": "action",
          "mapping": {
            "reject": "#/components/schemas/RejectSpamFilterRule",
            "transfer": "#/components/schemas/TransferSpamFilterRule",
            "prepend": "#/components/schemas/PrependSpamFilterRule",
            "append": "#/components/schemas/AppendSpamFilterRule",
            "override": "#/components/schemas/OverrideSpamFilterRule"
          }
        }
      },
      "SpamFilterRuleCreateUpdateRequest": {
        "required": [
          "action_type"
        ],
        "type": "object",
        "properties": {
          "action_type": {
            "type": "string"
          },
          "number_id": {
            "type": "string",
            "description": "Specify an ID of a number on the account to let the rule apply only to that number.",
            "nullable": true,
            "example": "num_Q3Kkj45mo8eq"
          }
        },
        "additionalProperties": false,
        "discriminator": {
          "propertyName": "action_type",
          "mapping": {
            "reject": "#/components/schemas/RejectSpamFilterRuleCreateUpdateRequest",
            "prepend_cnam": "#/components/schemas/PrependCnamSpamFilterRuleCreateRequest",
            "append_cnam": "#/components/schemas/AppendCnamSpamFilterRuleCreateRequest",
            "override_cnam": "#/components/schemas/OverrideCnamSpamFilterRuleCreateRequest",
            "transfer": "#/components/schemas/TransferSpamFilterRuleCreateRequest"
          }
        }
      },
      "SpamFilterRuleList": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/RejectSpamFilterRule"
                },
                {
                  "$ref": "#/components/schemas/TransferSpamFilterRule"
                },
                {
                  "$ref": "#/components/schemas/PrependSpamFilterRule"
                },
                {
                  "$ref": "#/components/schemas/AppendSpamFilterRule"
                },
                {
                  "$ref": "#/components/schemas/OverrideSpamFilterRule"
                }
              ]
            },
            "nullable": true
          },
          "has_more": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "Tag": {
        "required": [
          "active",
          "name",
          "tag_id"
        ],
        "type": "object",
        "properties": {
          "tag_id": {
            "type": "string",
            "description": "The unique ID for the tag.",
            "example": "tag_oaVDNv6MDRGp"
          },
          "name": {
            "minLength": 1,
            "type": "string",
            "description": "The name of the tag."
          },
          "active": {
            "type": "boolean",
            "description": "Indicates whether or not the tag is usable in Telzio. When deleted, active is set to false."
          }
        },
        "additionalProperties": false
      },
      "TagConversationItem": {
        "required": [
          "created",
          "created_by",
          "tags"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/ConversationItem"
          }
        ],
        "properties": {
          "tags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Tag"
            }
          },
          "created_by": {
            "$ref": "#/components/schemas/User"
          },
          "created": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "TagList": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Tag"
            },
            "description": "A list of objects containing the basic details about each voicemail message.",
            "nullable": true
          },
          "has_more": {
            "type": "boolean",
            "description": "Defines if there are more objects available via paging.",
            "example": true
          }
        },
        "additionalProperties": false,
        "description": "A list of tags."
      },
      "TagsEvent": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/TimelineEvent"
          }
        ],
        "properties": {
          "tags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Tag"
            },
            "description": "The tags assigned to the timeline at this point in time.",
            "nullable": true
          },
          "created": {
            "type": "string",
            "description": "When the tags were assigned to the timeline.",
            "format": "date-time",
            "nullable": true
          },
          "created_by": {
            "$ref": "#/components/schemas/User"
          }
        },
        "additionalProperties": false
      },
      "TelzioItem": {
        "type": "object",
        "additionalProperties": false
      },
      "TextToSpeech": {
        "required": [
          "text",
          "voice_id"
        ],
        "type": "object",
        "properties": {
          "voice_id": {
            "type": "string",
            "description": "The unique ID of the voice used to generate the greeting.",
            "example": "tts_dy9D7KNEDzvJ"
          },
          "text": {
            "minLength": 1,
            "type": "string",
            "description": "The text used when generating the greeting."
          }
        },
        "additionalProperties": false
      },
      "TimeZone": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "minLength": 1,
            "type": "string",
            "description": "The database name of the time zone."
          },
          "display_name": {
            "type": "string",
            "description": "Display name of the time zone in a condensed list view.",
            "nullable": true
          },
          "sort_order": {
            "type": "integer",
            "description": "An arbitrary sort order for a condensed list of time zones.",
            "format": "int32",
            "nullable": true
          },
          "country_iso": {
            "type": "string",
            "description": "The ISO Alpha-2 representation of the primary country associated with the time zone.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TimeZoneList": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TimeZone"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TimelineEvent": {
        "required": [
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "The type of item.",
            "nullable": true
          },
          "timeline_event_id": {
            "type": "string",
            "description": "The ID of the timeline the event is associated with.",
            "example": "tev_AV98VmM6DlYd"
          }
        },
        "additionalProperties": false,
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "comment": "#/components/schemas/CommentEvent",
            "assignment": "#/components/schemas/AssignmentEvent",
            "tags": "#/components/schemas/TagsEvent"
          }
        }
      },
      "TimelineEventList": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/CommentEvent"
                },
                {
                  "$ref": "#/components/schemas/AssignmentEvent"
                },
                {
                  "$ref": "#/components/schemas/TagsEvent"
                }
              ]
            },
            "nullable": true
          },
          "has_more": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "TransferSpamFilterRule": {
        "required": [
          "call_flow"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/SpamFilterRule"
          }
        ],
        "properties": {
          "call_flow": {
            "$ref": "#/components/schemas/CallFlow"
          }
        },
        "additionalProperties": false
      },
      "TransferSpamFilterRuleCreateRequest": {
        "required": [
          "call_flow_id"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/SpamFilterRuleCreateUpdateRequest"
          }
        ],
        "properties": {
          "call_flow_id": {
            "type": "string",
            "description": "The ID of the call flow calls with a spam score higher than the rule's threshold should be transferred to.",
            "example": "flo_AzlD0QAV8nbV"
          }
        },
        "additionalProperties": false
      },
      "TurnServer": {
        "type": "object",
        "properties": {
          "urls": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "TURN server urls",
            "nullable": true
          },
          "username": {
            "type": "string",
            "description": "TURN Server Username",
            "nullable": true
          },
          "password": {
            "type": "string",
            "description": "TURN Server Password",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TurnServers": {
        "type": "object",
        "properties": {
          "turn_udp": {
            "$ref": "#/components/schemas/TurnServer"
          },
          "turn_tls": {
            "$ref": "#/components/schemas/TurnServer"
          },
          "turn_tls_ga": {
            "$ref": "#/components/schemas/TurnServer"
          }
        },
        "additionalProperties": false
      },
      "UnansweredCallsPreferenceBundle": {
        "required": [
          "timeout"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/PreferenceBundle"
          }
        ],
        "properties": {
          "timeout": {
            "maximum": 600,
            "minimum": 7,
            "type": "integer",
            "description": "The time to ring the user's phone before transferring the call to the destination.",
            "format": "int32"
          },
          "destination": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/CallDestinationVoicemail"
              },
              {
                "$ref": "#/components/schemas/CallDestinationUser"
              },
              {
                "$ref": "#/components/schemas/CallDestinationUserGroup"
              },
              {
                "$ref": "#/components/schemas/CallDestinationCallFlow"
              },
              {
                "$ref": "#/components/schemas/CallDestinationPhoneNumber"
              }
            ],
            "description": "The destination calls are directed to. If set to _null_, the call will just keep ringing and eventually hang up when the timeout period is reached.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UnansweredCallsPreferenceBundleUpdateRequest": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/PreferenceBundleUpdateRequestBase"
          }
        ],
        "properties": {
          "timeout": {
            "maximum": 600,
            "minimum": 7,
            "type": "integer",
            "description": "The time to ring the user's phone before transferring the call to the destination.",
            "format": "int32"
          },
          "destination_type": {
            "$ref": "#/components/schemas/CallDestinationType"
          },
          "user_id": {
            "type": "string",
            "description": "Required if `destination_type` is set to `user`.",
            "nullable": true,
            "example": "usr_RJVDpXZmDx5j"
          },
          "user_group_id": {
            "type": "string",
            "description": "Required if `destination_type` is set to `user_group`.",
            "nullable": true,
            "example": "usg_jXmDLJ67PgGZ"
          },
          "call_flow_id": {
            "type": "string",
            "description": "Required if `destination_type` is set to `call_flow`.",
            "nullable": true,
            "example": "flo_B5Kk53Xw8zNe"
          },
          "phone_number": {
            "type": "string",
            "description": "Required if `destination_type` is set to `phone_number`. Must be formatted in E164 with leading \"+\".",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UnauthorizedError": {
        "required": [
          "message",
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/UnauthorizedErrorType"
          },
          "message": {
            "minLength": 1,
            "type": "string",
            "description": "A human-readable message providing more details about the error. This error can be shown to the end user.",
            "example": "Invalid username or password"
          }
        },
        "additionalProperties": false
      },
      "UnauthorizedErrorType": {
        "enum": [
          "unauthorized",
          "unauthorized_credentials",
          "unauthorized_no_device_found",
          "unauthorized_not_active",
          "unauthorized_not_found_or_not_active",
          "unauthorized_mfa_required",
          "unauthorized_mfa_invalid",
          "unauthorized_no_numbers",
          "unauthorized_too_many_failed_attempts",
          "unauthorized_no_bearer_token",
          "unauthorized_bearer_token_invalid",
          "unauthorized_policy_consents_missing"
        ],
        "type": "string"
      },
      "User": {
        "required": [
          "email",
          "first_name",
          "last_name",
          "status",
          "user_id",
          "username"
        ],
        "type": "object",
        "properties": {
          "user_id": {
            "type": "string",
            "description": "The unique ID representing the user.",
            "example": "usr_zo4PAZQgk97E"
          },
          "status": {
            "$ref": "#/components/schemas/UserStatus"
          },
          "username": {
            "minLength": 1,
            "type": "string",
            "description": "The user's username",
            "example": "pgriffin"
          },
          "first_name": {
            "minLength": 1,
            "type": "string",
            "description": "The user's first name",
            "example": "Peter"
          },
          "last_name": {
            "minLength": 1,
            "type": "string",
            "description": "The user's last name",
            "example": "Griffin"
          },
          "email": {
            "minLength": 1,
            "type": "string",
            "description": "The user's email address.",
            "example": "pgriffin@pawtucketpatriotale.com"
          },
          "extension": {
            "type": "string",
            "description": "The user's extension",
            "nullable": true,
            "example": "420"
          },
          "has_avatar": {
            "type": "boolean",
            "description": "Defines whether or not the user has a custom avatar.",
            "example": true
          },
          "groups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserGroup"
            },
            "description": "A list of groups the user is currently a member of.",
            "nullable": true
          },
          "availability": {
            "$ref": "#/components/schemas/UserAvailability"
          },
          "queue_agents": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/QueueAgent"
            },
            "description": "A list of Queue Agents associated with this user.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UserAccessType": {
        "enum": [
          "user",
          "administrator",
          "account_owner"
        ],
        "type": "string"
      },
      "UserAvailability": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "description": "The user's username",
            "nullable": true,
            "example": "pgriffin"
          },
          "status": {
            "$ref": "#/components/schemas/UserAvailabilityStatus"
          }
        },
        "additionalProperties": false
      },
      "UserAvailabilityList": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserAvailability"
            },
            "nullable": true
          },
          "has_more": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "UserAvailabilityStatus": {
        "enum": [
          "offline",
          "idle",
          "ringing",
          "busy",
          "dnd"
        ],
        "type": "string"
      },
      "UserAvatarSize": {
        "enum": [
          "small",
          "medium",
          "large"
        ],
        "type": "string"
      },
      "UserCallerType": {
        "required": [
          "user"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/Caller"
          }
        ],
        "properties": {
          "user": {
            "$ref": "#/components/schemas/User"
          }
        },
        "additionalProperties": false
      },
      "UserDetailsPreferenceBundle": {
        "required": [
          "default_number_id",
          "email",
          "first_name",
          "has_avatar",
          "last_name",
          "username"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/PreferenceBundle"
          }
        ],
        "properties": {
          "username": {
            "minLength": 1,
            "type": "string",
            "description": "The user's username. Can not be changed.",
            "example": "pgriffin"
          },
          "first_name": {
            "minLength": 1,
            "type": "string",
            "description": "The user's first name.",
            "example": "Peter"
          },
          "last_name": {
            "minLength": 1,
            "type": "string",
            "description": "The user's last name.",
            "example": "Griffin"
          },
          "email": {
            "minLength": 1,
            "type": "string",
            "description": "The user's email address.",
            "example": "pgriffin@pawtucketpatriotale.com"
          },
          "extension": {
            "type": "string",
            "description": "The user's extension.",
            "nullable": true,
            "example": "420"
          },
          "has_avatar": {
            "type": "boolean",
            "description": "Defines whether or not the user has a custom avatar.",
            "example": true
          },
          "time_zone": {
            "type": "string",
            "description": "The user's timezone. Defaults to account's default timezone.",
            "nullable": true,
            "example": "America/New_York"
          },
          "default_number_id": {
            "type": "string",
            "description": "The default number used when making outbound calls.",
            "example": "num_Q3KkjQlLPeqd"
          },
          "hold_music_id": {
            "type": "string",
            "description": "The ID of the hold music for the user, when transferring or putting calls on hold.",
            "nullable": true,
            "example": "moh_pWNkZLKV87Bq"
          },
          "voicemail_pin": {
            "type": "string",
            "description": "If set, the user will be asked to enter this pin when calling the voicemail box.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UserDetailsPreferenceBundleUpdateRequest": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/PreferenceBundleUpdateRequestBase"
          }
        ],
        "properties": {
          "first_name": {
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "description": "The user's first name.",
            "nullable": true,
            "example": "Peter"
          },
          "last_name": {
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "description": "The user's last name.",
            "nullable": true,
            "example": "Griffin"
          },
          "email": {
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "description": "The user's email address",
            "nullable": true,
            "example": "pgriffin@pawtucketpatriotale.com"
          },
          "time_zone": {
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "description": "The user's timezone. Defaults to account's default time zone.\r\nSee /utilities/time_zones for a list of available time zones.",
            "nullable": true,
            "example": "America/New_York"
          },
          "default_number_id": {
            "type": "string",
            "description": "The default number used when making outbound calls.",
            "nullable": true,
            "example": "num_lXMk9Ojq8d0Y"
          },
          "hold_music_id": {
            "type": "string",
            "description": "The ID of the hold music for the user, when transferring or putting calls on hold.",
            "nullable": true,
            "example": "moh_MxJD3yg2lPNr"
          },
          "voicemail_pin": {
            "pattern": "^\\d{4}$",
            "type": "string",
            "description": "If set, the user will be asked to enter this pin when calling the voicemail box.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UserGroup": {
        "required": [
          "group_name",
          "user_group_id"
        ],
        "type": "object",
        "properties": {
          "user_group_id": {
            "type": "string",
            "description": "The unique ID representing this user group.",
            "example": "usg_zdVPya37Pgvx"
          },
          "group_name": {
            "minLength": 1,
            "type": "string",
            "description": "The name of the group.",
            "example": "Sales Department"
          },
          "extension": {
            "type": "string",
            "description": "The group's extension",
            "nullable": true,
            "example": "850"
          }
        },
        "additionalProperties": false
      },
      "UserGroupList": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserGroup"
            },
            "nullable": true
          },
          "has_more": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "UserGroupParticipant": {
        "required": [
          "group"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/ConversationParticipant"
          }
        ],
        "properties": {
          "group": {
            "$ref": "#/components/schemas/UserGroup"
          }
        },
        "additionalProperties": false
      },
      "UserIncludes": {
        "enum": [
          "queue_agents"
        ],
        "type": "string"
      },
      "UserList": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/User"
            },
            "description": "The list of users",
            "nullable": true
          },
          "has_more": {
            "type": "boolean"
          },
          "next_page_id": {
            "type": "string",
            "description": "Used to obtain the next page of data when more entries than can fit in one page is available.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UserListSortOption": {
        "enum": [
          "firstname_lastname",
          "lastname_firstname",
          "username"
        ],
        "type": "string"
      },
      "UserParticipant": {
        "required": [
          "user"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/ConversationParticipant"
          }
        ],
        "properties": {
          "user": {
            "$ref": "#/components/schemas/User"
          }
        },
        "additionalProperties": false
      },
      "UserStatus": {
        "enum": [
          "active",
          "deleted",
          "suspended",
          "disabled",
          "unknown"
        ],
        "type": "string"
      },
      "UserVoicemailFileUpdateRequest": {
        "required": [
          "file"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/UserVoicemailUpdateRequest"
          }
        ],
        "properties": {
          "file": {
            "type": "string",
            "description": "An mp3 or wav file with a max file size of 6mb.",
            "format": "binary"
          }
        },
        "additionalProperties": false
      },
      "UserVoicemailTtsUpdateRequest": {
        "required": [
          "text"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/UserVoicemailUpdateRequest"
          }
        ],
        "properties": {
          "voice_id": {
            "type": "string",
            "description": "The unique ID of the voice used to generate the greeting.",
            "example": "tts_pQq8bl1JkMxN"
          },
          "text": {
            "maxLength": 3000,
            "minLength": 1,
            "type": "string",
            "description": "The text used when generating the greeting."
          }
        },
        "additionalProperties": false
      },
      "UserVoicemailUpdateRequest": {
        "required": [
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "minLength": 1,
            "type": "string",
            "description": "The type of caller"
          }
        },
        "additionalProperties": false,
        "discriminator": {
          "propertyName": "type",
          "mapping": {
            "file": "#/components/schemas/UserVoicemailFileUpdateRequest",
            "text_to_speech": "#/components/schemas/UserVoicemailTtsUpdateRequest"
          }
        }
      },
      "Voice": {
        "required": [
          "gender",
          "language",
          "voice_id"
        ],
        "type": "object",
        "properties": {
          "voice_id": {
            "type": "string",
            "description": "The unique ID of the voice.",
            "example": "tts_bG58KOmq8Ylz"
          },
          "display_name": {
            "type": "string",
            "description": "Human readably display name for this language and gender combination.",
            "nullable": true
          },
          "gender": {
            "$ref": "#/components/schemas/VoiceGender"
          },
          "language": {
            "minLength": 1,
            "type": "string",
            "description": "The language used when generating text-to-speech with this voice."
          }
        },
        "additionalProperties": false
      },
      "VoiceGender": {
        "enum": [
          "male",
          "female"
        ],
        "type": "string"
      },
      "VoiceList": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Voice"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Voicemail": {
        "required": [
          "call_id",
          "created",
          "duration",
          "status",
          "voicemail_id"
        ],
        "type": "object",
        "properties": {
          "voicemail_id": {
            "type": "string",
            "description": "The unique ID of the voicemail.",
            "example": "vm_6Jl81pRapDrb"
          },
          "call_id": {
            "minLength": 1,
            "type": "string",
            "description": "The Call ID of the call associated with the voicemail"
          },
          "from": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/UserCallerType"
              },
              {
                "$ref": "#/components/schemas/PhoneNumberCallerType"
              },
              {
                "$ref": "#/components/schemas/FeatureCodeCallerType"
              }
            ],
            "description": "Caller that left the voicemail",
            "nullable": true
          },
          "to": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/UserCallerType"
              },
              {
                "$ref": "#/components/schemas/PhoneNumberCallerType"
              },
              {
                "$ref": "#/components/schemas/FeatureCodeCallerType"
              }
            ],
            "description": "Number that was called",
            "nullable": true
          },
          "status": {
            "$ref": "#/components/schemas/VoicemailStatus"
          },
          "created": {
            "type": "string",
            "description": "When the voicemail was created.",
            "format": "date-time",
            "example": "2020-03-17T19:30:22Z"
          },
          "duration": {
            "type": "integer",
            "description": "The playback duration of the voicemail in seconds",
            "format": "int32",
            "example": 154
          },
          "transcription": {
            "type": "string",
            "description": "A voice-to-text transcription of the voicemail.",
            "nullable": true,
            "example": "Gosh, It’s Not Like The Internet To Go Crazy About Something Small And Stupid."
          },
          "tags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Tag"
            },
            "description": "A list of objects containing the tags that are currently assigned to the voicemail.",
            "nullable": true
          },
          "assignment": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/AssignedUser"
              },
              {
                "$ref": "#/components/schemas/AssignedUserGroup"
              }
            ],
            "description": "The user or group of users the Voicemail currently is assigned to.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "VoicemailFilters": {
        "enum": [
          "unlistened",
          "listened"
        ],
        "type": "string"
      },
      "VoicemailList": {
        "required": [
          "data",
          "has_more"
        ],
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Voicemail"
            },
            "description": "A list of objects containing the basic details about each voicemail message."
          },
          "has_more": {
            "type": "boolean",
            "description": "Defines if there are more objects available via paging.",
            "example": true
          }
        },
        "additionalProperties": false,
        "description": "A list of voicemails."
      },
      "VoicemailStatus": {
        "enum": [
          "unlistened",
          "listened"
        ],
        "type": "string"
      },
      "VoicemailUpdateResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/CommentEvent"
                },
                {
                  "$ref": "#/components/schemas/AssignmentEvent"
                },
                {
                  "$ref": "#/components/schemas/TagsEvent"
                }
              ]
            },
            "description": "List of timeline events created (if any) by this update.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "WebRtcPeerConnectionData": {
        "type": "object",
        "properties": {
          "bundle_policy": {
            "type": "string",
            "description": "PeerConnection bundle policy",
            "nullable": true
          },
          "ice_candidate_pool_size": {
            "type": "integer",
            "description": "PeerConnection iceCandidatePoolSize",
            "format": "int32"
          },
          "turn_servers": {
            "$ref": "#/components/schemas/TurnServers"
          },
          "stun_servers": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of STUN servers (if any) to use",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "preference_bundle_type": {
        "enum": [
          "user_details",
          "unanswered_calls",
          "password",
          "features",
          "availability",
          "sounds"
        ],
        "type": "string"
      }
    },
    "securitySchemes": {
      "Bearer Token": {
        "type": "apiKey",
        "description": "Standard Authorization header using the Bearer scheme. Example: \"bearer {token}\"",
        "name": "Authorization",
        "in": "header"
      }
    }
  }
}