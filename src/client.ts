import createClient from "openapi-fetch";
import type { paths } from "./openapi/schema.js"; // generated by openapi-typescript
// export type { paths as TelzioPaths, components as TelzioComponents } from "./types/paths.js"; // generated by openapi-typescript

const Telzio = createClient<paths>({
    baseUrl: 'https://api.telzio.com', 
});

// TODO: implement custom type wrapper that has parameters like auth and plugs into this
// const UNPROTECTED_ROUTES: (keyof paths)[] = ['/v3/auth'];

// Object.keys()
// const authMiddleware: Middleware = {
//     async onRequest(req, options) {
//         const schemaPath = req.schemaPath as keyof paths;
        
//         // if (req.schemaPath)
//         return undefined;
//     },
// }

// type Test = ReturnType<typeof createClient<paths>>;

// export default class Telzio implements ReturnType<typeof createClient<paths>> {
//     private static readonly _baseUrl = 'https://api.telzio.com';

//     private _client: ReturnType<typeof createClient<paths>>;

//     constructor() {
//         this._client = createClient<paths>({
//             baseUrl: 'https://api.telzio.com',
//         });
//     }
// }

// const telzio = new Telzio();
// telzio


// Telzio.use

export default Telzio;

// export { default as createClient2 } from 'openapi-fetch';

// const client = createClient<paths>({ baseUrl: 'https://api.telzio.com' });

// client.GET('/v3/voicemails', {
//     params: {
        
//     }
// })
// const getVoicemails: paths['/v3/voicemails']
// console.log('test');