/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/v3/auth": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Authenticate
         * @description Request a JWT claims token and basic provisioning data.
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/x-www-form-urlencoded": {
                        /**
                         * @description The user's username. Not case sensitive.
                         * @example pgriffin
                         */
                        username: string;
                        /**
                         * @description The user's password. Case sensitive.
                         * @example TheBirdIsTheWord72
                         */
                        password: string;
                        /**
                         * @description The MFA code for the user's login session. Required if multi-factor authentication is enabled on the user's account.
                         *     If MFA is enabled and this property is not included in the request, the API will reject the login and ask for an MFA code.
                         * @example 123456
                         */
                        mfa_code?: string;
                        client_platform: components["schemas"]["ClientPlatform"];
                    };
                };
            };
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Provision"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["BadRequestError"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["UnauthorizedError"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ForbiddenError"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v3/auth/provision": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Provision
         * @description Refreshes the user's initial provisioning data, including basic account information and data about available numbers.
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Provision"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["BadRequestError"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["UnauthorizedError"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ForbiddenError"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v3/auth/sip/parameters": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * SIP Session Parameters
         * @description Generates a one time use set of parameters needed to create a SIP Connection and WebRTC Session
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SipConnectionData"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["BadRequestError"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["UnauthorizedError"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ForbiddenError"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v3/auth/push-token": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Set a Push Token
         * @description Updates the user's push-token.
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/x-www-form-urlencoded": {
                        /** @description A unique ID representing the device. This will remain the same when when logging out of the app and signing back in with a different username. */
                        device_id: string;
                        /** @description The push notification token created by the device. */
                        token: string;
                        token_type: components["schemas"]["NotificationTokenType"];
                    };
                };
            };
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["TelzioItem"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["BadRequestError"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["UnauthorizedError"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ForbiddenError"];
                    };
                };
            };
        };
        /**
         * Delete a Push Token
         * @description Removes a user's push token for the specified device id from the server. For example if the user logs out of the app, or if the app has been deleted from the device.
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/x-www-form-urlencoded": {
                        /** @description The unique ID to identify the specific device. */
                        device_id: string;
                    };
                };
            };
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["TelzioItem"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["BadRequestError"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["UnauthorizedError"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ForbiddenError"];
                    };
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v3/auth/password/reset": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Reset Password
         * @description Request a password reset link to be sent to the user's email. Will always return 200 OK, no matter if a matching username was found or not.
         *     If the username was found, this method will send an email with a link that includes a token to reset the user's password. This token can be used in the update-password method.
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/x-www-form-urlencoded": {
                        /**
                         * @description The username of the user to request a password reset link for.
                         * @example pgriffin
                         */
                        username: string;
                    };
                };
            };
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["TelzioItem"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["BadRequestError"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["UnauthorizedError"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ForbiddenError"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v3/auth/password/update": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Update Password
         * @description Updates the user's password.
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/x-www-form-urlencoded": {
                        /**
                         * @description The unique ID for the user updating the password.
                         * @example usr_5pOkGnXqPzoK
                         */
                        user_id: string;
                        /** @description The temporary token to authenticate the user for a password update request. */
                        token: string;
                        /** @description The the user's new password */
                        password: string;
                    };
                };
            };
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["TelzioItem"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["BadRequestError"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["UnauthorizedError"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ForbiddenError"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v3/call_flows": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Call Flows
         * @description Retrieves a list of all call flows if the user is an administrator or has permissions to manage call flows.
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["CallFlow"][];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["BadRequestError"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["UnauthorizedError"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ForbiddenError"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v3/call_flows/{flow_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Update a Call Flow
         * @description Updates the name or extension of a Call Flow.
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    flow_id: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/x-www-form-urlencoded": {
                        /** @description The new extension of the Call Flow */
                        extension?: string;
                        /** @description The new name of the Call Flow */
                        name?: string;
                    };
                };
            };
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["CallFlow"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["BadRequestError"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["UnauthorizedError"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ForbiddenError"];
                    };
                };
            };
        };
        /**
         * Delete a Call Flow
         * @description Permanently deletes a Call Flow.
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    flow_id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["BadRequestError"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["UnauthorizedError"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ForbiddenError"];
                    };
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v3/calls/{call_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve a Call
         * @description Returns the details for a call.
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    call_id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Call"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["BadRequestError"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["UnauthorizedError"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ForbiddenError"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v3/calls/recent": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Recent Calls
         * @description Retrieves a list of the users most recent calls.
         */
        get: {
            parameters: {
                query?: {
                    limit?: number;
                    starting_after?: number;
                    ending_before?: number;
                    /** @description Filter the list of recent calls */
                    filter_by?: components["schemas"]["RecentCallFilters"][];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["RecentCallList"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["BadRequestError"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["UnauthorizedError"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ForbiddenError"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v3/comments/{item_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Comments
         * @description Lists comments on an item. By default sorted by `created` in descending order. Use `starting_after` and `ending_before` to do paging or retrieve latest messages since last request.
         */
        get: {
            parameters: {
                query?: {
                    limit?: number;
                    starting_after?: string;
                    ending_before?: string;
                    sort_direction?: components["schemas"]["SortDirection"];
                };
                header?: never;
                path: {
                    item_id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["CommentList"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["BadRequestError"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["UnauthorizedError"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ForbiddenError"];
                    };
                };
            };
        };
        put?: never;
        /**
         * Create a Comment
         * @description Create a new comment on an item.
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    item_id: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/x-www-form-urlencoded": {
                        /**
                         * @description The text in the comment.
                         * @example I May Be An Idiot, But There's One Thing I'm Not Sir, And That Is An Idiot.
                         */
                        text: string;
                    };
                };
            };
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Comment"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["BadRequestError"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["UnauthorizedError"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ForbiddenError"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v3/comments/{item_id}/{comment_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Update a Comment
         * @description Updates an existing comment on an item. This can only be done by the user who created the comment in the first place.
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    item_id: string;
                    comment_id: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/x-www-form-urlencoded": {
                        /**
                         * @description The text in the comment.
                         * @example I May Be An Idiot, But There's One Thing I'm Not Sir, And That Is An Idiot.
                         */
                        text: string;
                    };
                };
            };
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Comment"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["BadRequestError"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["UnauthorizedError"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ForbiddenError"];
                    };
                };
            };
        };
        /**
         * Delete a Comment
         * @description Deletes a comment from a voicemail. This can only be done by by an administrator or the user who created the comment.
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    item_id: string;
                    comment_id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["TelzioItem"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["BadRequestError"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["UnauthorizedError"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ForbiddenError"];
                    };
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v3/conversations/query": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Query Conversations
         * @description Queries if a conversation with one or more participants already exist, and returns the exiting conversation_id if it does. If a conversation exists, that the requester doesn't have access to, the conversation_id is returned, and can be used to request access to the conversation.
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/x-www-form-urlencoded": {
                        /** @description List of remote participants in the conversation. Currently exactly one must be provided. */
                        participants: string[];
                        /**
                         * @description Number ID this message should be sent from. The user must have access to this number.
                         * @example num_bG58KV4QDYlz
                         */
                        number_id?: string;
                    };
                };
            };
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["QueryConversationResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["BadRequestError"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["UnauthorizedError"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ForbiddenError"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v3/conversations/{conversation_id}/request-assignment": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Request Assignment
         * @description Allows the user to request that a conversation which is currently assigned to someone else, to be either closed or reassigned to the user.
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    conversation_id: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/x-www-form-urlencoded": {
                        /** @description A message sent to the current owners of the conversation, optionally specifying why access is needed. */
                        message?: string;
                    };
                };
            };
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ConversationAccessRequest"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["BadRequestError"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["UnauthorizedError"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ForbiddenError"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v3/conversations": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Conversations
         * @description Retrieves a list of conversations. `Items` will only include the most recent entry. `Assignments` will only include the current assignment. `Comments` are not included in this response.
         */
        get: {
            parameters: {
                query?: {
                    limit?: number;
                    starting_after?: number;
                    ending_before?: number;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ConversationList"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["BadRequestError"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["UnauthorizedError"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ForbiddenError"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v3/conversations/{conversation_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve a Conversation
         * @description This request includes the 20 most recent items (for example SMS messages) in the conversation, as well as the basic meta data, such as comments, assignments, tags, etc.
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    conversation_id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Conversation"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["BadRequestError"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["UnauthorizedError"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ConversationInaccessibleError"];
                    };
                };
            };
        };
        put?: never;
        /**
         * Update a Conversation
         * @description Updates certain details on an existing conversation, assignments and tags.
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    conversation_id: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/x-www-form-urlencoded": {
                        /**
                         * @description Change the tags assigned to the conversation.
                         * @example [
                         *       "tag_RJVDpg4okx5j"
                         *     ]
                         */
                        tags?: string[];
                        /**
                         * @description Reassign the conversation to another user. Only `assigned_user` or `assigned_user_group` can be sat, but not both at the same time.
                         * @example usr_Aq1kXgOEPrJ7
                         */
                        assigned_user?: string;
                        /**
                         * @description Reassign the conversation to a group of users. Only `assigned_user` or `assigned_user_group` can be sat, but not both at the same time.
                         * @example usg_alpDrm7Jk6Gb
                         */
                        assigned_user_group?: string;
                        status?: components["schemas"]["ConversationStatusOptions"];
                        read_status?: components["schemas"]["ConversationReadStatusOptions"];
                    };
                };
            };
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["TelzioItem"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["BadRequestError"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["UnauthorizedError"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ForbiddenError"];
                    };
                };
            };
        };
        /**
         * Delete a Conversation
         * @description Deletes a conversation and all included items, comments, etc. _This can not be undone._
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    conversation_id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["TelzioItem"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["BadRequestError"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["UnauthorizedError"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ForbiddenError"];
                    };
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v3/conversations/{conversation_id}/messages/{message_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Delete a message in a ImMessage conversation
         * @description Deletes a conversation and all included items, comments, etc. _This can not be undone._
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    conversation_id: string;
                    message_id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["TelzioItem"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["BadRequestError"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["UnauthorizedError"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ForbiddenError"];
                    };
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v3/conversations/{conversation_id}/items": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Conversation Items
         * @description By default this request will retrieve 20 items ordered by `id` in descending order. Use `starting_after` for updating an already populated dataset, and `ending_before` for paging.
         */
        get: {
            parameters: {
                query?: {
                    limit?: number;
                    starting_after?: components["schemas"]["MessageIdent"];
                    ending_before?: components["schemas"]["MessageIdent"];
                };
                header?: never;
                path: {
                    conversation_id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ConversationItemList"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["BadRequestError"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["UnauthorizedError"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ForbiddenError"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v3/conversations/sms/create-conversation": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create an SMS Conversation
         * @description Creates a new conversation intended for an SMS message. This is a temporary endpoint that will change in the future as all item types become part of conversations.
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/x-www-form-urlencoded": {
                        /**
                         * @description Number ID to send message from. Will be users default number if not specified.
                         *     Only used if creating a new conversation.
                         * @example num_alpDrXXJP6Gb
                         */
                        number_id: string;
                        /** @description Phone Number of recipient. */
                        recipient: string;
                        /**
                         * @description The text to send. This can be null if media is added.
                         * @example Oh, and tell Cookie Monster not to phone me until he finishes rehab.
                         */
                        text?: string;
                        /** @description List of ID's of the previously uploaded media files to attached with the message. */
                        media_attachments?: string[];
                    };
                };
            };
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SMS"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["BadRequestError"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["UnauthorizedError"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ForbiddenError"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v3/conversations/{conversation_id}/sms": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Send an SMS
         * @description Sends a new SMS as part of an existing conversation
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    conversation_id: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/x-www-form-urlencoded": {
                        /**
                         * @description The text to send. This can be null if media is added.
                         * @example Oh, and tell Cookie Monster not to phone me until he finishes rehab.
                         */
                        text?: string;
                        /** @description List of ID's of the previously uploaded media files to attached with the message. */
                        media_attachments?: string[];
                    };
                };
            };
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SMS"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["BadRequestError"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["UnauthorizedError"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ForbiddenError"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v3/conversations/sms/media": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Upload Media
         * @description Endpoint to upload binary data and temporarily hold it before sending it in an SMS.
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "multipart/form-data": {
                        /**
                         * Format: binary
                         * @description The file to upload.
                         */
                        file: string;
                    };
                    "application/x-www-form-urlencoded": {
                        /**
                         * Format: binary
                         * @description The file to upload.
                         */
                        file: string;
                    };
                };
            };
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SMSMediaUpload"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["BadRequestError"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["UnauthorizedError"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ForbiddenError"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v3/conversations/{conversation_id}/sms/{sms_id}/media/{media_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Download Media
         * @description Retrieves a media file included in an SMS
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    conversation_id: string;
                    sms_id: string;
                    media_id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": string;
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["BadRequestError"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["UnauthorizedError"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ForbiddenError"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v3/data_retention/settings": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Settings
         * @description Lists the data retention settings for all data types on the account.
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["DataRetentionSettingList"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["BadRequestError"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["UnauthorizedError"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ForbiddenError"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v3/data_retention/settings/{setting_type}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Update a Setting
         * @description Change the number of days that various records in Telzio are retained.
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    setting_type: components["schemas"]["DataRetentionSettingType"];
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/x-www-form-urlencoded": {
                        /**
                         * Format: int32
                         * @description The number of days Telzio should retain data of this type. Setting this value to NULL will let Telzio store the data indefinitely.
                         */
                        days?: number;
                    };
                };
            };
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["TelzioItem"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["BadRequestError"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["UnauthorizedError"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ForbiddenError"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v3/faxes": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Faxes
         * @description Returns the user's available Fax. By default ordered by `created` descending. Use `starting_after` and `ending_before` to do paging or retrieve latest messages since last request.
         */
        get: {
            parameters: {
                query?: {
                    limit?: number;
                    starting_after?: string;
                    ending_before?: string;
                    tags?: string;
                    filter_by?: components["schemas"]["FaxFilters"][];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["FaxList"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["BadRequestError"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["UnauthorizedError"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ForbiddenError"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v3/faxes/{fax_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve a Fax
         * @description Returns the details of an existing Fax.
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    fax_id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Fax"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["BadRequestError"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["UnauthorizedError"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ForbiddenError"];
                    };
                };
            };
        };
        put?: never;
        /**
         * Update a Fax
         * @description Update status, assignments and tags on an existing fax.
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    fax_id: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/x-www-form-urlencoded": {
                        status?: components["schemas"]["FaxStatus"];
                        /**
                         * @description Change the tags assigned to the voicemail.
                         * @example [
                         *       "tag_AzlD0Mx18nbV"
                         *     ]
                         */
                        tags?: string[];
                        /**
                         * @description Reassign the voicemail to another user. Only `assigned_user` or `assigned_user_group` can be sat, but not both at the same time.
                         * @example usr_alpDr4ZVP6Gb
                         */
                        assigned_user?: string;
                        /**
                         * @description Reassign the voicemail to a group of users. Only `assigned_user` or `assigned_user_group` can be sat, but not both at the same time.
                         * @example usg_5pOkGVVqPzoK
                         */
                        assigned_user_group?: string;
                    };
                };
            };
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["FaxUpdatesResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["BadRequestError"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["UnauthorizedError"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ForbiddenError"];
                    };
                };
            };
        };
        /**
         * Delete a Fax
         * @description Permanently delete a Fax. This can not be undone. Also deleted any comments, tags or assignments attached to the Fax.
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    fax_id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["TelzioItem"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["BadRequestError"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["UnauthorizedError"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ForbiddenError"];
                    };
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v3/faxes/{fax_id}/download": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Download a Fax
         * @description Retrieves the PDF containing the actual fax.
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    fax_id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/pdf": string;
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/pdf": components["schemas"]["BadRequestError"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/pdf": components["schemas"]["UnauthorizedError"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/pdf": components["schemas"]["ForbiddenError"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v3/hold_music": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Songs
         * @description Get a list of all hold music songs on the account.
         */
        get: {
            parameters: {
                query?: {
                    options?: components["schemas"]["HoldMusicListRequest"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["HoldMusicList"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["BadRequestError"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["UnauthorizedError"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ForbiddenError"];
                    };
                };
            };
        };
        put?: never;
        /**
         * Add a Song
         * @description Add a new song to the library of hold music.
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "multipart/form-data": {
                        /**
                         * Format: binary
                         * @description An mp3, wav or m4a file with a max file size of 15mb and max duration of 15 min.
                         */
                        file: string;
                        /** @description The title of the song. */
                        title: string;
                    };
                    "application/x-www-form-urlencoded": {
                        /**
                         * Format: binary
                         * @description An mp3, wav or m4a file with a max file size of 15mb and max duration of 15 min.
                         */
                        file: string;
                        /** @description The title of the song. */
                        title: string;
                    };
                };
            };
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["HoldMusic"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["BadRequestError"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["UnauthorizedError"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ForbiddenError"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v3/hold_music/{hold_music_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve a Song
         * @description Retrieves the details for a specific hold music song.
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    hold_music_id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["HoldMusic"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["BadRequestError"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["UnauthorizedError"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ForbiddenError"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        /**
         * Delete a Song
         * @description Delete a hold music song.
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    hold_music_id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["TelzioItem"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["BadRequestError"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["UnauthorizedError"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ForbiddenError"];
                    };
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v3/hold_music/{hold_music_id}/download": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Download a Song
         * @description Download the wav encoded hold music song.
         */
        get: {
            parameters: {
                query?: {
                    /** @description The format of the returned file. */
                    format?: components["schemas"]["AudioFormat"];
                };
                header?: never;
                path: {
                    hold_music_id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "audio/wav": string;
                        "audio/mp3": string;
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "audio/wav": components["schemas"]["BadRequestError"];
                        "audio/mp3": components["schemas"]["BadRequestError"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "audio/wav": components["schemas"]["UnauthorizedError"];
                        "audio/mp3": components["schemas"]["UnauthorizedError"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "audio/wav": components["schemas"]["ForbiddenError"];
                        "audio/mp3": components["schemas"]["ForbiddenError"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v3/legal": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Policies
         * @description Returns all effective and upcoming policies in their most recent version.
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["LegalPolicyList"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["BadRequestError"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["UnauthorizedError"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ForbiddenError"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v3/legal/{policy_key}/{policy_version}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve a Policy
         * @description Returns policy description for the specified policy key and version
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Policy key to view */
                    policy_key: string;
                    /** @description Policy version to view */
                    policy_version: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["LegalPolicy"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["BadRequestError"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["UnauthorizedError"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ForbiddenError"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v3/legal/{policy_key}/{policy_version}/consent": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Consent
         * @description Provides consent for the specified policy. If a new claims token is returned this must be used for all subsequent requests to the API
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The policy key of the policy you want to consent to. */
                    policy_key: string;
                    /** @description The policy version of the policy you want to consent to. */
                    policy_version: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Provision"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["BadRequestError"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["UnauthorizedError"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ForbiddenError"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v3/logging": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create Entries
         * @description Submit technical log entries from the client app.
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/x-www-form-urlencoded": {
                        client_platform: components["schemas"]["ClientPlatform"];
                        /** @description A list of entries to submit to the log.
                         *     You can submit up to 100 entries per request by specifying them in a collection this way;
                         *     entries[0][created]
                         *     entries[0][message]
                         *     entries[0][severity]
                         *     entries[1][created]
                         *     entries[2][message]
                         *     entries[3][severity]
                         *     etc... */
                        entries: components["schemas"]["LogEntry"][];
                    };
                };
            };
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["TelzioItem"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["BadRequestError"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["UnauthorizedError"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ForbiddenError"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v3/preferences": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Bundles
         * @description Lists all preference bundles for the user.
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["PreferenceBundleList"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["BadRequestError"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["UnauthorizedError"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ForbiddenError"];
                    };
                };
            };
        };
        put?: never;
        /** Update a Bundle */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/x-www-form-urlencoded": {
                        type?: components["schemas"]["preference_bundle_type"];
                    };
                };
            };
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["UserDetailsPreferenceBundle"] | components["schemas"]["UnansweredCallsPreferenceBundle"] | components["schemas"]["PasswordPreferenceBundle"] | components["schemas"]["FeaturesPreferenceBundle"] | components["schemas"]["AvailabilityPreferenceBundle"] | components["schemas"]["SoundsPreferenceBundle"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["BadRequestError"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["UnauthorizedError"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ForbiddenError"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v3/preferences/{bundle_type}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve a Bundle
         * @description Retrieves a specific preference bundle
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    bundle_type: components["schemas"]["preference_bundle_type"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["UserDetailsPreferenceBundle"] | components["schemas"]["UnansweredCallsPreferenceBundle"] | components["schemas"]["PasswordPreferenceBundle"] | components["schemas"]["FeaturesPreferenceBundle"] | components["schemas"]["AvailabilityPreferenceBundle"] | components["schemas"]["SoundsPreferenceBundle"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["BadRequestError"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["UnauthorizedError"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ForbiddenError"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v3/queues": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Queues
         * @description Retrieves a list of queues the current user has access to. If the user is an administrator or has permissions to manage queues, then this will return all queues. Otherwise, it will only return the queues the user is an agent of.
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["QueueList"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["BadRequestError"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["UnauthorizedError"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ForbiddenError"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v3/queues/{queue_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve a Queue
         * @description Retrieves a specific queue, including it's agents and current calls
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    queue_id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Queue"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["BadRequestError"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["UnauthorizedError"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ForbiddenError"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v3/queues/{queue_id}/agents/{user_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Update an Agent
         * @description Updates an agent in a queue.
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    queue_id: string;
                    user_id: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/x-www-form-urlencoded": {
                        /** @description Defines if the user is available to take calls or not. */
                        enabled?: boolean;
                        /**
                         * Format: int32
                         * @description Defines a period if time to wait after each ended call, before accepting a new call. Value in seconds.
                         */
                        grace_time?: number;
                    };
                };
            };
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["QueueAgent"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["BadRequestError"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["UnauthorizedError"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ForbiddenError"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v3/queues/toggle/{user_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Toggle an Agent
         * @description Updates an agent's availability across all queues it is member of
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    user_id: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/x-www-form-urlencoded": {
                        /** @description Defines if the user is available to take calls or not. */
                        enabled: boolean;
                    };
                };
            };
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["TelzioItem"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["BadRequestError"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["UnauthorizedError"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ForbiddenError"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v3/recordings": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Recordings
         * @description Lists all the recordings the user has access to.
         */
        get: {
            parameters: {
                query?: {
                    limit?: number;
                    starting_after?: string;
                    ending_before?: string;
                    filter_by?: components["schemas"]["RecordingFilters"][];
                    tags?: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["RecordingList"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["BadRequestError"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["UnauthorizedError"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ForbiddenError"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v3/recordings/{recording_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve a Recording
         * @description Retrieves the details about a specific recording.
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The ID of the recording to retrieve. */
                    recording_id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Recording"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["BadRequestError"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["UnauthorizedError"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ForbiddenError"];
                    };
                };
            };
        };
        put?: never;
        /**
         * Update a Recording
         * @description Update tags or reassign a recording to another user or user group.
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The ID of the recording to update. */
                    recording_id: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/x-www-form-urlencoded": {
                        status?: components["schemas"]["RecordingStatus"];
                        /**
                         * @description Change the tags assigned to the recording
                         * @example [
                         *       "tag_MxJD3wwmDNro"
                         *     ]
                         */
                        tags?: string[];
                        /**
                         * @description Reassign the recording to another user. Only `assigned_user` or `assigned_user_group` can be sat, but not both at the same time.
                         * @example usr_gwZP4ABAkn6o
                         */
                        assigned_user?: string;
                        /**
                         * @description Reassign the recording to a group of users. Only `assigned_user` or `assigned_user_group` can be sat, but not both at the same time.
                         * @example usg_vaKDxWO0kB4G
                         */
                        assigned_user_group?: string;
                    };
                };
            };
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["RecordingUpdateResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["BadRequestError"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["UnauthorizedError"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ForbiddenError"];
                    };
                };
            };
        };
        /**
         * Delete a Recording
         * @description Delete a recording and all it's comments and other meta data. _This cannot be undone._
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The ID of the recording to delete. */
                    recording_id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["TelzioItem"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["BadRequestError"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["UnauthorizedError"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ForbiddenError"];
                    };
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v3/recordings/{recording_id}/download": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Download MP3
         * @description Download the MP3 file of a recording.
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The ID of the recording to download. */
                    recording_id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "audio/mp3": string;
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "audio/mp3": components["schemas"]["BadRequestError"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "audio/mp3": components["schemas"]["UnauthorizedError"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "audio/mp3": components["schemas"]["ForbiddenError"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v3/spam_filter/rules": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Rules
         * @description Retrieves a list of spam filter rules on the account.
         */
        get: {
            parameters: {
                query?: {
                    limit?: number;
                    starting_after?: string;
                    ending_before?: string;
                    filter_by_number_id?: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SpamFilterRuleList"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["BadRequestError"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["UnauthorizedError"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ForbiddenError"];
                    };
                };
            };
        };
        put?: never;
        /**
         * Create Rule
         * @description Adds a new rule to the spam filter.
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/x-www-form-urlencoded": {
                        /**
                         * @description Specify an ID of a number on the account to let the rule apply only to that number.
                         * @example num_JEbPBxKpDYrV
                         */
                        number_id?: string;
                    };
                };
            };
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["RejectSpamFilterRule"] | components["schemas"]["TransferSpamFilterRule"] | components["schemas"]["PrependSpamFilterRule"] | components["schemas"]["AppendSpamFilterRule"] | components["schemas"]["OverrideSpamFilterRule"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["BadRequestError"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["UnauthorizedError"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ForbiddenError"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v3/spam_filter/rules/{rule_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve a Rule
         * @description Retrieves a specific spam filter rule.
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    rule_id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["RejectSpamFilterRule"] | components["schemas"]["TransferSpamFilterRule"] | components["schemas"]["PrependSpamFilterRule"] | components["schemas"]["AppendSpamFilterRule"] | components["schemas"]["OverrideSpamFilterRule"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["BadRequestError"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["UnauthorizedError"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ForbiddenError"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        /**
         * Delete a Rule
         * @description Delete a rule from the spam filter
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    rule_id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["TelzioItem"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["BadRequestError"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["UnauthorizedError"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ForbiddenError"];
                    };
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v3/spam_filter/{rule_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Update a Rule
         * @description Update an existing spam filter rule.
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    rule_id: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/x-www-form-urlencoded": {
                        /**
                         * @description Specify an ID of a number on the account to let the rule apply only to that number.
                         * @example num_7z48o1bKk6qQ
                         */
                        number_id?: string;
                    };
                };
            };
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["RejectSpamFilterRule"] | components["schemas"]["TransferSpamFilterRule"] | components["schemas"]["PrependSpamFilterRule"] | components["schemas"]["AppendSpamFilterRule"] | components["schemas"]["OverrideSpamFilterRule"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["BadRequestError"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["UnauthorizedError"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ForbiddenError"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v3/tags": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Tags
         * @description Get a list of all tags currently associated with the account.
         */
        get: {
            parameters: {
                query?: {
                    limit?: number;
                    starting_after?: string;
                    ending_before?: string;
                    active?: boolean;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["TagList"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["BadRequestError"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["UnauthorizedError"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ForbiddenError"];
                    };
                };
            };
        };
        put?: never;
        /**
         * Create a Tag
         * @description Create a tag to be used on the account.
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/x-www-form-urlencoded": {
                        /** @description A human readable name for the tag. */
                        name: string;
                    };
                };
            };
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Tag"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["BadRequestError"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["UnauthorizedError"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ForbiddenError"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v3/tags/{tag_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Delete a Tag
         * @description Delete a tag from the account.
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    tag_id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["TelzioItem"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["BadRequestError"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["UnauthorizedError"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ForbiddenError"];
                    };
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v3/timeline/{timeline_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Events
         * @description Lists the events (comments, tags, etc.) associated with an item on the user's account, such as a voicemail or recording.
         */
        get: {
            parameters: {
                query?: {
                    limit?: number;
                    starting_after?: string;
                    ending_before?: string;
                    sort_direction?: components["schemas"]["SortDirection"];
                };
                header?: never;
                path: {
                    /**
                     * @description The ID if the item to list timeline events for, for example a voicemail or call recording.
                     * @example con_dj291jJhdcj
                     */
                    timeline_id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["TimelineEventList"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["BadRequestError"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["UnauthorizedError"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ForbiddenError"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v3/users": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Users
         * @description Retrieves a list of users on the account. By default ordered by `firstname_lastname`. Use `limit` and `starting_after` for paging.
         */
        get: {
            parameters: {
                query?: {
                    /** @description The field to sort the results by. */
                    sort_by?: components["schemas"]["UserListSortOption"];
                    /** @description Max number of results to return. */
                    limit?: number;
                    /** @description Pass the value from next_page_id to start from a certain page in the list. */
                    starting_page_id?: string;
                    /** @description Free text search term. */
                    term?: string;
                    /** @description Unused for this endpoint */
                    starting_after?: number;
                    /** @description Unused for this method */
                    ending_before?: number;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["UserList"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["BadRequestError"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["UnauthorizedError"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ForbiddenError"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v3/users/{query}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve a User
         * @description Retrieves a single user, either by user_id, username, or extension.
         */
        get: {
            parameters: {
                query?: {
                    /** @description A list of additional items to include in the response */
                    include?: components["schemas"]["UserIncludes"][];
                };
                header?: never;
                path: {
                    query: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["User"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["BadRequestError"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["UnauthorizedError"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ForbiddenError"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v3/users/{user_id}/numbers": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List User Numbers
         * @description Retrieves a list of numbers a user has access to.
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    user_id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["NumberList"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["BadRequestError"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["UnauthorizedError"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ForbiddenError"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v3/users/groups": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List User Groups
         * @description Retrieves a list of user groups on the account.
         */
        get: {
            parameters: {
                query?: {
                    limit?: number;
                    starting_after?: string;
                    ending_before?: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["UserGroupList"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["BadRequestError"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["UnauthorizedError"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ForbiddenError"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v3/users/groups/{user_group_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve a User Group
         * @description Retrieves a single user group.
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    user_group_id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["UserGroup"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["BadRequestError"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["UnauthorizedError"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ForbiddenError"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v3/users/query/availability": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Query User Availability
         * @description Retrieves a snapshot of the queried users' current status on the Telzio platform.
         *     You can query up to 50 usernames in one request, by including the `u` query parameter multiple times in your request.
         *     After the initial query, realtime updates are provided via websockets.
         */
        get: {
            parameters: {
                query: {
                    /** @description Username(s) to query state for. Can be set up to 50 times. */
                    u: string[];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["UserAvailabilityList"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["BadRequestError"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["UnauthorizedError"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ForbiddenError"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v3/users/{user_id}/avatar": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve an Avatar
         * @description Returns a jpg of the user's avatar.
         */
        get: {
            parameters: {
                query?: {
                    /**
                     * @description The size of the returned avatar. `small` = 30x30px, `medium` = 90x90px, `large` = 250x250px.
                     * @example small
                     */
                    size?: components["schemas"]["UserAvatarSize"];
                };
                header?: never;
                path: {
                    /** @description The unique ID of the user. */
                    user_id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": string;
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["BadRequestError"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["UnauthorizedError"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ForbiddenError"];
                    };
                };
            };
        };
        put?: never;
        /**
         * Update an Avatar
         * @description Upload a new avatar for a user.
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    user_id: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "multipart/form-data": {
                        /**
                         * Format: binary
                         * @description A picture to use as the user's avatar.
                         */
                        file: string;
                    };
                    "application/x-www-form-urlencoded": {
                        /**
                         * Format: binary
                         * @description A picture to use as the user's avatar.
                         */
                        file: string;
                    };
                };
            };
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": string;
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["BadRequestError"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["UnauthorizedError"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ForbiddenError"];
                    };
                };
            };
        };
        /**
         * Delete an Avatar
         * @description Delete a user's avatar.
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description The unique ID of the user. */
                    user_id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["TelzioItem"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["BadRequestError"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["UnauthorizedError"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ForbiddenError"];
                    };
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v3/users/{user_id}/voicemail_greeting": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Update a Voicemail Greeting
         * @description Updates the personal voicemail greeting for a user.
         *     Only the user self, or someone with user_admin permissions can edit a user's personal voicemail greeting.
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    user_id: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "multipart/form-data": {
                        /** @description The type of caller */
                        type: string;
                    };
                    "application/x-www-form-urlencoded": {
                        /** @description The type of caller */
                        type: string;
                    };
                };
            };
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["TelzioItem"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["BadRequestError"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["UnauthorizedError"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ForbiddenError"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v3/users/{user_id}/voicemail_greeting/download": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Download a Voicemail Greeting
         * @description Download the audio file of the user's current voicemail greeting.
         */
        get: {
            parameters: {
                query?: {
                    /** @description The format of the returned file. */
                    format?: components["schemas"]["AudioFormat"];
                };
                header?: never;
                path: {
                    user_id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "audio/wav": string;
                        "audio/mp3": string;
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "audio/wav": components["schemas"]["BadRequestError"];
                        "audio/mp3": components["schemas"]["BadRequestError"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "audio/wav": components["schemas"]["UnauthorizedError"];
                        "audio/mp3": components["schemas"]["UnauthorizedError"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "audio/wav": components["schemas"]["ForbiddenError"];
                        "audio/mp3": components["schemas"]["ForbiddenError"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v3/utilities/voices": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Voices
         * @description Returns a list of voices that are available for text-to-speech generation.
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["VoiceList"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["BadRequestError"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["UnauthorizedError"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ForbiddenError"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v3/utilities/time_zones": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Time Zones
         * @description Returns a list of available time zones.
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["TimeZoneList"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["BadRequestError"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["UnauthorizedError"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ForbiddenError"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v3/utilities/tts_preview": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Create a TTS Preview
         * @description Creates and returns an audio file to be used for text-to-speech previews.
         */
        get: {
            parameters: {
                query: {
                    /** @description The unique ID of the voice used to generate the preview. */
                    voice_id?: string;
                    /** @description The text used when generating the preview. */
                    text: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "audio/mpeg": string;
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "audio/mpeg": components["schemas"]["BadRequestError"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "audio/mpeg": components["schemas"]["UnauthorizedError"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "audio/mpeg": components["schemas"]["ForbiddenError"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v3/voicemails": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Voicemails
         * @description Returns the user's available voicemails. By default sorted by _`_created_`_ and returned in descending order. Use _`starting_after`_ and _`ending_before`_ to do paging or retrieve latest messages since last request.
         */
        get: {
            parameters: {
                query?: {
                    limit?: number;
                    starting_after?: string;
                    ending_before?: string;
                    filter_by?: components["schemas"]["VoicemailFilters"][];
                    tags?: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["VoicemailList"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["BadRequestError"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["UnauthorizedError"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ForbiddenError"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v3/voicemails/{voicemail_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve a Voicemail
         * @description Returns the details of an existing voicemail. Only voicemails assigned to the user can be retrieved. Attempting to retrieve a voicemail the isn't assigned to the user, will result in a *403 Forbidden* response.
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    voicemail_id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Voicemail"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["BadRequestError"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["UnauthorizedError"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ForbiddenError"];
                    };
                };
            };
        };
        put?: never;
        /** Update a Voicemail */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    voicemail_id: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/x-www-form-urlencoded": {
                        status?: components["schemas"]["VoicemailStatus"];
                        /**
                         * @description Change the tags assigned to the voicemail.
                         * @example [
                         *       "tag_oaVDNxRbPRGp"
                         *     ]
                         */
                        tags?: string[];
                        /**
                         * @description Reassign the voicemail to another user. Only `assigned_user` or `assigned_user_group` can be sat, but not both at the same time.
                         * @example usr_JEbPBQ5o8YrV
                         */
                        assigned_user?: string;
                        /**
                         * @description Reassign the voicemail to a group of users. Only `assigned_user` or `assigned_user_group` can be sat, but not both at the same time.
                         * @example usg_RJVDppbmDx5j
                         */
                        assigned_user_group?: string;
                    };
                };
            };
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["VoicemailUpdateResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["BadRequestError"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["UnauthorizedError"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ForbiddenError"];
                    };
                };
            };
        };
        /**
         * Delete a Voicemail
         * @description Permanently delete a voicemail. This can not be undone.
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    voicemail_id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["TelzioItem"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["BadRequestError"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["UnauthorizedError"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ForbiddenError"];
                    };
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v3/voicemails/{voicemail_id}/download": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Download MP3
         * @description Fetches, decrypts and returns the voicemail in MP3 format.
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    voicemail_id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "audio/mp3": string;
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "audio/mp3": components["schemas"]["BadRequestError"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "audio/mp3": components["schemas"]["UnauthorizedError"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "audio/mp3": components["schemas"]["ForbiddenError"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v3/voicemails/{voicemail_id}/assignments": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve a Voicemail's Assignments
         * @description Returns history of assignments for the voicemail.
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    voicemail_id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["AssignmentList"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["BadRequestError"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["UnauthorizedError"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ForbiddenError"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        AccessRequest: {
            /** @description The object type that access is being requested for. */
            type: string;
            status?: components["schemas"]["AccessRequestStatus"];
        };
        /** @enum {string} */
        AccessRequestStatus: "granted" | "requested" | "denied";
        Account: {
            /**
             * @description The unique ID of the Telzio Account.
             * @example acc_lXMk9r36Dd0Y
             */
            account_id: string;
            /**
             * @description The company name of the Telzio customer.
             * @example Pawtucket Patriot Ale
             */
            company_name: string;
            /**
             * Format: date-time
             * @description When the Telzio account was created.
             * @example 1984-06-05T19:30:22Z
             */
            created: string;
            /**
             * @description The default timezone for the account.
             * @example America/Los_Angeles
             */
            default_timezone: string;
        };
        AppendCnamSpamFilterRuleCreateRequest: {
            /** @description The text to update the CNAM value with before showing it to the receiver of the call. */
            text: string;
        } & (Omit<components["schemas"]["SpamFilterRuleCreateUpdateRequest"], "action_type"> & {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            action_type: "append_cnam";
        });
        AppendSpamFilterRule: {
            text: string;
        } & (Omit<components["schemas"]["SpamFilterRule"], "action"> & {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            action: "append";
        });
        AssignedUser: {
            user: components["schemas"]["User"];
        } & (Omit<components["schemas"]["Assignment"], "type"> & {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "user";
        });
        AssignedUserGroup: {
            user_group: components["schemas"]["UserGroup"];
        } & (Omit<components["schemas"]["Assignment"], "type"> & {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "user_group";
        });
        Assignment: {
            type: string;
            /** @example asg_rodkRpR4n82G */
            assignment_id?: string | null;
            /** Format: date-time */
            created?: string | null;
            created_by?: components["schemas"]["User"];
        };
        AssignmentConversationItem: {
            assignment: components["schemas"]["AssignedUser"] | components["schemas"]["AssignedUserGroup"];
        } & (Omit<components["schemas"]["ConversationItem"], "type"> & {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "assignment";
        });
        AssignmentEvent: {
            assignment?: (components["schemas"]["AssignedUser"] | components["schemas"]["AssignedUserGroup"]) | null;
        } & (Omit<components["schemas"]["TimelineEvent"], "type"> & {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "assignment";
        });
        AssignmentList: {
            /** @description A list of objects containing the basic details about each voicemail message. */
            data: (components["schemas"]["AssignedUser"] | components["schemas"]["AssignedUserGroup"])[];
            /**
             * @description Defines if there are more objects available via paging.
             * @example true
             */
            has_more: boolean;
        };
        /** @enum {string} */
        AudioFormat: "wav" | "mp3";
        AuthenticationRequestBase: {
            client_platform: components["schemas"]["ClientPlatform"];
            /**
             * @description The user's username. Not case sensitive.
             * @example pgriffin
             */
            username: string;
            /**
             * @description The user's password. Case sensitive.
             * @example TheBirdIsTheWord72
             */
            password: string;
            /**
             * @description The MFA code for the user's login session. Required if multi-factor authentication is enabled on the user's account.
             *     If MFA is enabled and this property is not included in the request, the API will reject the login and ask for an MFA code.
             * @example 123456
             */
            mfa_code?: string | null;
        };
        AuthenticationRequestBrowser: {
            client_details: components["schemas"]["ClientDetailsRequestBrowser"];
        } & (Omit<components["schemas"]["AuthenticationRequestBase"], "client_platform"> & {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            client_platform: "browser";
        });
        AuthenticationRequestCustom: Omit<components["schemas"]["AuthenticationRequestBase"], "client_platform"> & {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            client_platform: "custom";
        };
        AuthenticationRequestDesktop: {
            client_details: components["schemas"]["ClientDetailsRequestDesktop"];
        } & (Omit<components["schemas"]["AuthenticationRequestBase"], "client_platform"> & {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            client_platform: "desktop";
        });
        AuthenticationRequestMobile: {
            client_details: components["schemas"]["ClientDetailsRequestMobile"];
            /** @description When set to true, any SIPIS registration for the user is released.
             *     This is a temporary fix during migration from SIPIS-based app, to avoid Telzio 5.x.x from crashing when receiving push notifications intended for a SIPIS-based app. */
            release_sipis: boolean;
        } & (Omit<components["schemas"]["AuthenticationRequestBase"], "client_platform"> & {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            client_platform: "mobile";
        });
        AvailabilityPreferenceBundle: {
            /** @description If true, the user has enabled Do Not Disturb and will be receiving any calls. */
            do_not_disturb?: boolean;
        } & (Omit<components["schemas"]["PreferenceBundle"], "type"> & {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "availability";
        });
        AvailabilityPreferenceBundleUpdateRequest: {
            /** @description If true, the user has enabled Do Not Disturb and will be receiving any calls. */
            do_not_disturb?: boolean | null;
        } & (Omit<components["schemas"]["PreferenceBundleUpdateRequestBase"], "type"> & {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "availability";
        });
        /**
         * Bad Request
         * @description Describes an error caused by an invalid API request.
         */
        BadRequestError: {
            type: components["schemas"]["BadRequestErrorType"];
            /**
             * @description A human-readable message providing more details about the error. This error can be shown to the end user.
             * @example The request had one or more invalid parameters.
             */
            message: string;
            /** @description A list of invalid parameters and corresponding error messages. */
            parameters?: {
                [key: string]: string[] | null;
            } | null;
        };
        /**
         * @description For some errors that could be handled programmatically, a short string indicating the error code reported.
         * @enum {string}
         */
        BadRequestErrorType: "bad_request" | "bad_request_invalid_input" | "bad_request_account_balance_low" | "bad_request_number_inactive" | "bad_request_conversation_closed" | "bad_request_conversation_exists" | "bad_request_number_sms_not_enabled" | "bad_request_malformed_number" | "bad_request_media_not_found" | "bad_request_assignee_not_found" | "bad_request_already_assigned" | "bad_request_file_too_large" | "bad_request_file_type" | "bad_request_bundle_type" | "bad_request_password_invalid" | "bad_request_password_identical" | "bad_request_call_flow_invalid" | "bad_request_user_invalid" | "bad_request_group_invalid" | "bad_request_call_flow_self_forward" | "bad_request_call_flow_forward_loop" | "bad_request_call_flow_number_forward" | "bad_request_number_format" | "bad_request_number_invalid" | "bad_request_hold_music_invalid" | "bad_request_destination_number_blacklisted";
        Call: {
            /**
             * @description The unique ID of this call.
             * @example 11-600ef9dd-17v6
             */
            call_id: string;
            /** @description The user or phone number who made the call. */
            from: components["schemas"]["UserCallerType"] | components["schemas"]["PhoneNumberCallerType"] | components["schemas"]["FeatureCodeCallerType"];
            /** @description The user or phone number of the receiver. */
            to: components["schemas"]["UserCallerType"] | components["schemas"]["PhoneNumberCallerType"] | components["schemas"]["FeatureCodeCallerType"];
            /**
             * Format: date-time
             * @description The date and time the call was started.
             * @example 2020-03-15 13:05:20.000Z
             */
            created: string;
            status: components["schemas"]["CallStatus"];
            /**
             * Format: int32
             * @description The duration of the call in seconds.
             * @example 184
             */
            duration: number;
            direction: components["schemas"]["CallDirection"];
            /** @description Child call legs associated with the call. */
            legs?: components["schemas"]["CallLeg"][] | null;
            number?: components["schemas"]["Number"];
            /** @description List of technical events that happened during the call. */
            events?: components["schemas"]["CallEvent"][] | null;
            billing_details?: components["schemas"]["CallBillingDetails"];
            spam_details?: components["schemas"]["CallSpamDetails"];
            /**
             * @description The unique ID of a voicemail associated with this call.
             * @example vm_EWdkWw5YkMw6
             */
            voicemail_id?: string | null;
            /**
             * @description The unique ID of a call recording associated with this call.
             * @example rec_6BAD62LnODd9
             */
            recording_id?: string | null;
            /**
             * @description The unique ID of a fax associated with this call.
             * @example fax_Q3KkjaxePeqd
             */
            fax_id?: string | null;
            /** @description A list of tags assigned to this call. */
            tags?: components["schemas"]["Tag"][] | null;
        };
        CallBillingDetails: {
            /**
             * Format: double
             * @description The price of the call, excluding fees.
             * @example 12.5
             */
            price?: number;
            /**
             * Format: double
             * @description The total of taxes and fees for the call.
             * @example 3.1
             */
            fees?: number;
            /**
             * Format: double
             * @description The total price for the call, including fees.
             * @example 15.6
             */
            total_price?: number;
            /**
             * Format: int32
             * @description The amount of free minutes used by the call.
             * @example 3
             */
            free_minutes?: number;
        };
        CallDestination: {
            type: components["schemas"]["CallDestinationType"];
        };
        /** @description Transfer calls to a call flow. */
        CallDestinationCallFlow: {
            call_flow: components["schemas"]["CallFlow"];
        } & (Omit<components["schemas"]["CallDestination"], "type"> & {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "call_flow";
        });
        /** @description Transfer calls to an external phone number. */
        CallDestinationPhoneNumber: {
            phone_number: components["schemas"]["PhoneNumber"];
        } & (Omit<components["schemas"]["CallDestination"], "type"> & {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "phone_number";
        });
        /** @enum {string} */
        CallDestinationType: "voicemail" | "user" | "user_group" | "call_flow" | "phone_number";
        /** @description Transfer calls to a user. */
        CallDestinationUser: {
            user: components["schemas"]["User"];
        } & (Omit<components["schemas"]["CallDestination"], "type"> & {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "user";
        });
        /** @description Transfer calls to a group of users. */
        CallDestinationUserGroup: {
            user_group: components["schemas"]["UserGroup"];
        } & (Omit<components["schemas"]["CallDestination"], "type"> & {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "user_group";
        });
        /** @description Transfer calls to voicemail. */
        CallDestinationVoicemail: {
            /** @description Who new voicemail messages are assigned to. */
            assignment?: (components["schemas"]["AssignedUser"] | components["schemas"]["AssignedUserGroup"]) | null;
            /** @description If set to true, Telzio will attempt to transcribe the voicemail messages. */
            transcription_enabled: boolean;
            text_to_speech?: components["schemas"]["TextToSpeech"];
        } & (Omit<components["schemas"]["CallDestination"], "type"> & {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "voicemail";
        });
        /** @enum {string} */
        CallDirection: "inbound" | "outbound";
        CallEvent: {
            /**
             * Format: date-time
             * @description The date and time the event occurred.
             */
            date?: string;
            /** @description A description of the event. */
            message?: string | null;
        };
        CallFlow: {
            /**
             * @description The unique ID of the call flow.
             * @example flo_alpDrobN86Gb
             */
            call_flow_id: string;
            /** @description The name of the call flow */
            name: string;
            /** @description The call flow's extension. */
            extension?: string | null;
            /** @description The numbers on the customer's account, currently associated with this call flow. */
            numbers: components["schemas"]["Number"][];
        };
        CallLeg: {
            /**
             * @description The unique ID of this call.
             * @example 11-600ef9dd-17v6
             */
            call_id?: string | null;
            /**
             * @description The username or phone number of the caller.
             * @example jsmith
             */
            from?: string | null;
            /**
             * @description The human-readable name of the caller.
             * @example John Smith
             */
            from_name?: string | null;
            /**
             * @description The username or phone number of the receiver.
             * @example +18889989080
             */
            to?: string | null;
            status?: components["schemas"]["CallStatus"];
            /**
             * @description The technical reason why the call ended.
             * @example Normal Clearing
             */
            hangup_cause?: string | null;
            /**
             * Format: int32
             * @description The duration of the call in seconds.
             * @example 184
             */
            duration?: number;
            billing_details?: components["schemas"]["CallBillingDetails"];
            direction?: components["schemas"]["CallDirection"];
            /**
             * Format: date-time
             * @description The date and time the call was started.
             * @example 2020-03-15 13:05:20.000Z
             */
            call_date?: string;
            /**
             * Format: date-time
             * @description The date and time the call was answered by the receiving party.
             * @example 2020-03-15 13:05:35.000Z
             */
            answer_date?: string | null;
            /**
             * Format: date-time
             * @description The date and time the call ended.
             * @example 2020-03-15 13:08:12.000Z
             */
            end_date?: string | null;
        };
        CallSpamDetails: {
            /**
             * Format: int32
             * @description The call's spam score in percent. This may not be present on all calls.
             * @example 89
             */
            spam_score?: number | null;
            /** @description The action taken as result of the call's Spam Score. */
            spam_action?: string | null;
            /** @description The call was blocked as a result of a rule on the account's blacklist. */
            blacklisted?: boolean;
        };
        /** @enum {string} */
        CallStatus: "initializing" | "ringing" | "in_progress" | "no_answer" | "canceled" | "aborted" | "unavailable" | "congested" | "completed" | "unknown";
        /** @description A message or item that was created during a conversation. */
        Caller: {
            /** @description The type of caller */
            type: string;
        };
        /** @enum {string} */
        ClientDataProtocol: "none" | "unknown" | "wifi" | "bluetooth" | "wimax" | "vpn" | "ethernet" | "satellite" | "mobile" | "mobile_2g" | "mobile_3g" | "mobile_4g_lte" | "mobile_5g" | "mobile_6g" | "other";
        /** @enum {string} */
        ClientDesktopOS: "windows" | "macos";
        ClientDetailsRequestBrowser: {
            /**
             * @description The current language selected for the phone.
             * @example en-us
             */
            device_locale: string;
        };
        ClientDetailsRequestDesktop: {
            /** @description A GUID generated by the app upon first run after installation. */
            app_install_id: string;
            /**
             * @description The current language selected for the phone.
             * @example en-us
             */
            device_locale: string;
            device_os: components["schemas"]["ClientDesktopOS"];
            /**
             * @description The current OS version of the device.
             * @example 14.2.1
             */
            device_os_version: string;
            data_protocol?: components["schemas"]["ClientDataProtocol"];
        };
        ClientDetailsRequestMobile: {
            /**
             * @description The version of the app making request.
             *     Format: major.minor.build, and major MUST be 5, and the minor and build version must not start with a zero.
             * @example 5.1.428
             */
            app_version: string;
            /**
             * @description The build number of the app
             * @example 301
             */
            app_build_number?: string | null;
            /** @description A GUID generated by the app upon first run after installation. */
            app_install_id: string;
            /** @description The unique ID of the hardware running the app.
             *     For iOS this is the IDFV (https://developer.apple.com/documentation/uikit/uidevice/1620059-identifierforvendor).
             *     For Android this is the ANDROID_ID (https://developer.android.com/reference/android/provider/Settings.Secure#ANDROID_ID) */
            device_hardware_id: string;
            /**
             * @description The current language selected for the phone.
             * @example en-us
             */
            device_locale: string;
            /**
             * @description The name of the device as set by the user.
             * @example Becca's iPhone 6
             */
            device_name: string;
            /**
             * @description The manufacturer of the device. For example, Apple, Samsung, Motorola, etc.
             * @example Apple
             */
            device_brand: string;
            /**
             * @description The specific model of the device.
             * @example iPhone 12 Pro
             */
            device_model: string;
            device_os: components["schemas"]["ClientMobileOS"];
            /**
             * @description The current OS version of the device.
             * @example 14.2.1
             */
            device_os_version: string;
            data_protocol?: components["schemas"]["ClientDataProtocol"];
            /**
             * @description The country ISO Alpha-2 value of the country where the device is currently connected to the mobile network.
             * @example DK
             */
            mobile_network_country_iso?: string | null;
            /**
             * @description The sim card issuer's network name
             * @example Vodafone
             */
            mobile_network_name?: string | null;
            /**
             * @description The sim card issuer's country iso
             * @example DK
             */
            sim_country_iso?: string | null;
            /**
             * Format: int32
             * @description The sim card's phone number's country code
             * @example 45
             */
            sim_country_code?: number | null;
        };
        /** @enum {string} */
        ClientMobileOS: "ios" | "android";
        /** @enum {string} */
        ClientPlatform: "mobile" | "mobile_upgrade" | "tablet" | "tv" | "desktop" | "browser" | "custom";
        ClosedConversationItem: {
            closed_by: components["schemas"]["User"];
            /** Format: date-time */
            created: string;
        } & (Omit<components["schemas"]["ConversationItem"], "type"> & {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "closed_conversation";
        });
        Comment: {
            /**
             * @description The unique ID of the comment.
             * @example com_pWw8OanjkV12
             */
            comment_id: string;
            /**
             * @description The actual text content of the comment.
             * @example This customer would like some assistance with his account.
             */
            text: string;
            /**
             * Format: date-time
             * @description When the comment was written.
             * @example 2019-03-05T19:30:22Z
             */
            created: string;
            created_by: components["schemas"]["User"];
        };
        CommentConversationItem: {
            comment: components["schemas"]["Comment"];
        } & (Omit<components["schemas"]["ConversationItem"], "type"> & {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "comment";
        });
        CommentEvent: {
            comment?: components["schemas"]["Comment"];
        } & (Omit<components["schemas"]["TimelineEvent"], "type"> & {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "comment";
        });
        CommentList: {
            data?: components["schemas"]["Comment"][] | null;
            has_more?: boolean;
        };
        /** @description A conversation is a chronologically ordered thread of items that all share the same context, for example `call`, `sms`, `voicemail`, `recording`, etc.
         *     Currently, a conversation can only contain `Sms` items, but this schema is designed for the next generation of Telzio's dashboard and apps, which will be focused around an omnichannel conversation concept.
         *     A conversation is always assigned to either a specific `user` or a `user_group`. */
        Conversation: {
            /** @example cnv_pWw8OJJyjDV1 */
            conversation_id?: string;
            status: components["schemas"]["ConversationStatus"];
            /**
             * Format: date-time
             * @description When the first item in the conversation was created, or in other words when the conversation was started.
             * @example 1984-06-05T19:30:22Z
             */
            created: string;
            /**
             * Format: date-time
             * @description When the most recent item was added to the conversation.
             * @example 1998-10-22T19:30:22Z
             */
            last_item_created: string;
            /**
             * @description True if this conversation has new items.
             * @example true
             */
            new_items: boolean;
            /** @description A list of participants in the conversation, or in other words all users and external phone numbers that have created an item in this conversation. */
            participants: (components["schemas"]["PhoneNumberParticipant"] | components["schemas"]["UserParticipant"] | components["schemas"]["UserGroupParticipant"])[];
            /** @description The list of `ConversationItem` in the particular conversation. Currently, there is only one type; `Sms`. */
            items: (components["schemas"]["SmsConversationItem"] | components["schemas"]["ImConversionItem"] | components["schemas"]["CommentConversationItem"] | components["schemas"]["AssignmentConversationItem"] | components["schemas"]["TagConversationItem"] | components["schemas"]["ClosedConversationItem"])[];
            /** @description Indicates if the conversation has more items that can be retrieved using the List Conversation Items endpoint. */
            has_more_items?: boolean;
            /** @example msg_6Jl81YG18rbV */
            oldest_message_id?: string;
            /** @example msg_rodkRBZbk2GW */
            latest_message_id?: string;
            /** @description A chronological list of who the conversation has been assigned to over time. */
            assignments: (components["schemas"]["AssignedUser"] | components["schemas"]["AssignedUserGroup"])[];
            /** @description List of current tags on the conversation. */
            tags: components["schemas"]["Tag"][];
        };
        ConversationAccessRequest: {
            /** @example cnv_eqVDwrmxkbXv */
            conversation_id: string;
        } & (Omit<components["schemas"]["AccessRequest"], "type"> & {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "conversation";
        });
        ConversationIdent: Record<string, never>;
        /**
         * Forbidden
         * @description Describes an error caused by an invalid API request.
         */
        ConversationInaccessibleError: {
            type: components["schemas"]["ForbiddenErrorType"];
            /**
             * @description A human-readable message providing more details about the error. This error can be shown to the end user.
             * @example You do not have permissions to perform this request.
             */
            message: string;
            /** @description The user or group this conversation is presently assigned to. */
            current_owner?: (components["schemas"]["AssignedUser"] | components["schemas"]["AssignedUserGroup"]) | null;
        };
        /** @description A message or item that was created during a conversation. */
        ConversationItem: {
            /** @description The type of Conversation Item */
            type: string;
        };
        ConversationItemList: {
            /** @description A list of Conversation Items. */
            data?: (components["schemas"]["SmsConversationItem"] | components["schemas"]["ImConversionItem"] | components["schemas"]["CommentConversationItem"] | components["schemas"]["AssignmentConversationItem"] | components["schemas"]["TagConversationItem"] | components["schemas"]["ClosedConversationItem"])[] | null;
            has_more?: boolean;
            /** @example msg_5pOkGqp1q8zo */
            oldest_message_id?: string;
        };
        /** @description A list of Conversations */
        ConversationList: {
            /** @description This list only includes the most recent item in each conversation. */
            data?: components["schemas"]["Conversation"][] | null;
            has_more?: boolean;
            /**
             * Format: int64
             * @description The next value to provide as starting_after to page this response
             */
            next_starting_after?: number | null;
        };
        ConversationParticipant: {
            /** @description The type of participant. */
            type: string;
        };
        /** @enum {string} */
        ConversationReadStatusOptions: "read" | "unread";
        /**
         * @description The current status of the conversation.
         * @enum {string}
         */
        ConversationStatus: "active" | "closed";
        /** @enum {string} */
        ConversationStatusOptions: "closed";
        CustomerIoConfiguration: {
            /** @description The customer io site_id */
            site_id?: string | null;
            /** @description The customer io api_key */
            api_key?: string | null;
        } & (Omit<components["schemas"]["ResourceConfiguration"], "type"> & {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "customer_io";
        });
        DataRetentionSetting: {
            settingType: components["schemas"]["DataRetentionSettingType"];
            /**
             * Format: int32
             * @description How many days Telzio should retain the data type before deleting or anonymizing it. NULL means that data is retained indefinitely.
             */
            days?: number | null;
        };
        DataRetentionSettingList: {
            data?: components["schemas"]["DataRetentionSetting"][] | null;
        };
        /** @enum {string} */
        DataRetentionSettingType: "call_log" | "voicemail" | "sms" | "fax" | "recording";
        EncodedHashId: Record<string, never>;
        Fax: {
            /**
             * @description The unique ID of the fax.
             * @example fax_pQq8bJgZ8MxN
             */
            fax_id: string;
            /**
             * @description The ID of the call associated with the fax.
             * @example 7-5fda90e0-2a
             */
            call_id: string;
            direction: components["schemas"]["FaxDirection"];
            from: string;
            to: string;
            status: components["schemas"]["FaxStatus"];
            /**
             * Format: date-time
             * @description The date and time the fax was sent or received.
             * @example 2020-03-15 13:05:20.000Z
             */
            created: string;
            /** @description The user or group the fax currently is assigned to. */
            assigned_to?: (components["schemas"]["AssignedUser"] | components["schemas"]["AssignedUserGroup"]) | null;
            /** @description A list of objects containing the tags that are currently assigned to the voicemail. */
            tags?: components["schemas"]["Tag"][] | null;
        };
        /** @enum {string} */
        FaxDirection: "inbound" | "outbound";
        /** @enum {string} */
        FaxFilters: "sent" | "received";
        FaxList: {
            data?: components["schemas"]["FaxListItem"][] | null;
            has_more?: boolean;
        };
        FaxListItem: {
            /**
             * @description The unique ID of the fax.
             * @example fax_0MW8Y13Y8n15
             */
            fax_id: string;
            /**
             * @description The ID of the call associated with the fax.
             * @example 7-5fda90e0-2a
             */
            call_id: string;
            direction: components["schemas"]["FaxDirection"];
            from: string;
            to: string;
            status: components["schemas"]["FaxStatus"];
            /**
             * Format: date-time
             * @description The date and time the fax was sent or received.
             * @example 2020-03-15 13:05:20.000Z
             */
            created: string;
            /** @description The user or group the fax currently is assigned to. */
            assigned_to?: (components["schemas"]["AssignedUser"] | components["schemas"]["AssignedUserGroup"]) | null;
            /** @description A list of objects containing the tags that are currently assigned to the voicemail. */
            tags?: components["schemas"]["Tag"][] | null;
        };
        /** @enum {string} */
        FaxStatus: "sent" | "received" | "deleted";
        FaxUpdatesResponse: {
            /** @description List of timeline events created (if any) by this update. */
            data?: (components["schemas"]["CommentEvent"] | components["schemas"]["AssignmentEvent"] | components["schemas"]["TagsEvent"])[] | null;
        };
        FeatureCode: {
            /**
             * @description The raw unformatted number.
             * @example *98
             */
            raw?: string | null;
            feature_code_type?: components["schemas"]["FeatureCodeType"];
        };
        FeatureCodeCallerType: {
            feature_code: components["schemas"]["FeatureCode"];
        } & (Omit<components["schemas"]["Caller"], "type"> & {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "feature_code";
        });
        /** @enum {string} */
        FeatureCodeType: "voicemail" | "queue_menu" | "monitor_call" | "mobile_conference_call";
        FeaturesPreferenceBundle: {
            /** @description A list of features that are enabled/disabled for the user. */
            enabled_features?: {
                [key: string]: boolean | null;
            } | null;
        } & (Omit<components["schemas"]["PreferenceBundle"], "type"> & {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "features";
        });
        FeaturesPreferenceBundleUpdateRequest: {
            /** @description Enable or disable the web phone. */
            web_phone?: boolean | null;
        } & (Omit<components["schemas"]["PreferenceBundleUpdateRequestBase"], "type"> & {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "features";
        });
        /**
         * Forbidden
         * @description Describes an error caused by an invalid API request.
         */
        ForbiddenError: {
            type: components["schemas"]["ForbiddenErrorType"];
            /**
             * @description A human-readable message providing more details about the error. This error can be shown to the end user.
             * @example You do not have permissions to perform this request.
             */
            message: string;
        };
        /** @enum {string} */
        ForbiddenErrorType: "forbidden" | "forbidden_number_access" | "forbidden_number_change_access" | "forbidden_number_sms_not_enabled" | "forbidden_conversation_access" | "forbidden_voicemail_access" | "forbidden_recording_access" | "forbidden_fax_access" | "forbidden_comment_access" | "forbidden_user_access" | "forbidden_queue_access";
        HoldMusic: {
            /**
             * @description The unique ID for the song.
             * @example moh_7z48oENNk6qQ
             */
            hold_music_id: string;
            /**
             * @description The title of the song.
             * @example The Trashmen - Surfin Bird
             */
            title?: string | null;
        };
        HoldMusicList: {
            data?: components["schemas"]["HoldMusic"][] | null;
            has_more?: boolean;
        };
        HoldMusicListRequest: Record<string, never>;
        ImConversionItem: {
            im_message: components["schemas"]["ImMessage"];
        } & (Omit<components["schemas"]["ConversationItem"], "type"> & {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "im_message";
        });
        ImMessage: {
            /** @example msg_jXmDLzjYPgGZ */
            chat_message_id: string;
            /**
             * Format: date-time
             * @description When the message was sent or received.
             * @example 1992-07-18T19:30:22Z
             */
            created: string;
            sent_by: components["schemas"]["User"];
            /**
             * @description The message text.
             * @example Bird Is The Word.
             */
            text: string;
            /** @description Indicates if the message is deleted */
            is_deleted: boolean;
        };
        LegalPolicy: {
            /** @description Type of policy. */
            policy_key?: string | null;
            /**
             * Format: int32
             * @description Version of this policy
             */
            policy_version?: number;
            /** @description Title of policy. Used when displaying the policy's body. */
            title?: string | null;
            /** @description HTML Formatted body, containing the actual text. */
            body?: string | null;
            /**
             * Format: date-time
             * @description Date from when this policy/version is effective.
             */
            effective_date?: string;
            /** @description The `policy_key` of a newer policy that replaces this one. Used in conjunction with superceeding_version to retrieve the superceeding policy. */
            superceeding_key?: string | null;
            /**
             * Format: int32
             * @description The `policy_version` of a newer policy that replaces this one. Used in conjunction with superceeding_key to retrieve the superceeding policy.
             */
            superceeding_version?: number | null;
            /** @description Specifies if consent is required for continued use of Telzio. */
            consent_required?: boolean;
            consent?: components["schemas"]["LegalPolicyConsent"];
        };
        LegalPolicyConsent: {
            /**
             * Format: date-time
             * @description The date and time when consent to this policy version was given.
             */
            created?: string;
            /** @description The IP address the consent was given from. */
            ip?: string | null;
            /** @description The User Agent of the device the consent was given from. */
            user_agent?: string | null;
        };
        LegalPolicyList: {
            /** @description A list of policies objects. */
            data?: components["schemas"]["LegalPolicy"][] | null;
        };
        LogCreateRequest: {
            client_platform: components["schemas"]["ClientPlatform"];
            /** @description A list of entries to submit to the log.
             *     You can submit up to 100 entries per request by specifying them in a collection this way;
             *     entries[0][created]
             *     entries[0][message]
             *     entries[0][severity]
             *     entries[1][created]
             *     entries[2][message]
             *     entries[3][severity]
             *     etc... */
            entries: components["schemas"]["LogEntry"][];
        };
        LogCreateRequestDesktop: {
            client_details: components["schemas"]["ClientDetailsRequestDesktop"];
        } & (Omit<components["schemas"]["LogCreateRequest"], "client_platform"> & {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            client_platform: "desktop";
        });
        LogCreateRequestMobile: {
            client_details: components["schemas"]["ClientDetailsRequestMobile"];
        } & (Omit<components["schemas"]["LogCreateRequest"], "client_platform"> & {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            client_platform: "mobile";
        });
        LogEntry: {
            /**
             * Format: date-time
             * @description Timestamp representing when the log entry was created.
             */
            created?: string;
            /**
             * Format: int64
             * @description An incrementing number, used to tie break sorting if created dates are identical for entries.
             */
            sequence?: number;
            severity?: components["schemas"]["LogSeverity"];
            /** @description A string referrring to the component that generated this log statement */
            component_id?: string | null;
            /** @description A string referring to an event/method occurring inside the component referred to by component_id */
            event_type?: string | null;
            call_id?: string | null;
            /** @description For entries related to phone calls, contains the correlation uuid */
            call_uuid?: string | null;
            /** @description For entries related to sms, contains the correlation uuid */
            sms_id?: string | null;
            /**
             * @description For entries related to voicemails
             * @example vm_eqVDwxzv8bXv
             */
            voicemail_id?: string | null;
            /** @description For entries related to recordings */
            recording_id?: string | null;
            /** @description The contents of the log. */
            message: string;
            /** @description Provides more detail to the log, for things like stack traces. */
            full_message?: string | null;
            additional_properties?: {
                [key: string]: string | null;
            } | null;
        };
        /** @enum {string} */
        LogSeverity: "DEBUG" | "INFO" | "NOTICE" | "ERROR" | "WARNING";
        MessageIdent: Record<string, never>;
        /** @enum {string} */
        NotificationTokenType: "ios_voip" | "ios_remote_notifications" | "android_fcm";
        Number: {
            /**
             * @description The unique ID for this number.
             * @example num_B5Kk53nw8zNe
             */
            number_id: string;
            number_type: components["schemas"]["NumberType"];
            phone_number: components["schemas"]["PhoneNumber"];
            status: components["schemas"]["NumberStatus"];
            /**
             * Format: date-time
             * @description When the number was added to this customer's account.
             * @example 2013-08-12T09:30:22Z
             */
            created: string;
        };
        NumberList: {
            data?: components["schemas"]["Number"][] | null;
            has_more?: boolean;
        };
        /** @enum {string} */
        NumberStatus: "pending" | "active" | "canceled";
        /** @enum {string} */
        NumberType: "local" | "tollfree";
        OverrideCnamSpamFilterRuleCreateRequest: {
            /** @description The text to update the CNAM value with before showing it to the receiver of the call. */
            text: string;
        } & (Omit<components["schemas"]["SpamFilterRuleCreateUpdateRequest"], "action_type"> & {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            action_type: "override_cnam";
        });
        OverrideSpamFilterRule: {
            text: string;
        } & (Omit<components["schemas"]["SpamFilterRule"], "action"> & {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            action: "override";
        });
        PasswordPreferenceBundle: Omit<components["schemas"]["PreferenceBundle"], "type"> & {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "password";
        };
        PasswordPreferenceBundleUpdateRequest: {
            /** @description The user's current password. */
            current_password: string;
            /** @description The user's new password */
            new_password: string;
        } & (Omit<components["schemas"]["PreferenceBundleUpdateRequestBase"], "type"> & {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "password";
        });
        PhoneNumber: {
            /**
             * @description The raw unformatted number.
             * @example 8889989080
             */
            raw?: string | null;
            /**
             * @description The international E.164 formatted representation of the number.
             * @example +18889989080
             */
            e164?: string | null;
            /**
             * @description The internationally recognized representation of the phone number.
             * @example +1 888-998-9080
             */
            international_format?: string | null;
            /**
             * @description The locally formatted representation of the phone number.
             * @example (888) 998-9080
             */
            local_format?: string | null;
            /**
             * @description The country the phone number is from, formatted as ISO 3166-1 alpha-2.
             * @example US
             */
            country_iso?: string | null;
            /**
             * @description The name the number's owner if available.
             * @example GRIFFIN, PETER
             */
            cnam?: string | null;
            /**
             * @description Details about the country or city (if available) where the phone number is from.
             * @example Los Angeles, CA
             */
            region?: string | null;
        };
        PhoneNumberCallerType: {
            phone_number: components["schemas"]["PhoneNumber"];
        } & (Omit<components["schemas"]["Caller"], "type"> & {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "phone_number";
        });
        PhoneNumberParticipant: {
            phone_number: components["schemas"]["PhoneNumber"];
        } & (Omit<components["schemas"]["ConversationParticipant"], "type"> & {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "phone_number";
        });
        PreferenceBundle: {
            type: components["schemas"]["preference_bundle_type"];
            /** @description A list of fields the user is permitted to edit. This may vary based on the account's settings. */
            editable_fields: {
                [key: string]: boolean | null;
            };
        };
        PreferenceBundleList: {
            data?: (components["schemas"]["UserDetailsPreferenceBundle"] | components["schemas"]["UnansweredCallsPreferenceBundle"] | components["schemas"]["PasswordPreferenceBundle"] | components["schemas"]["FeaturesPreferenceBundle"] | components["schemas"]["AvailabilityPreferenceBundle"] | components["schemas"]["SoundsPreferenceBundle"])[] | null;
        };
        PreferenceBundleUpdateRequestBase: {
            type: components["schemas"]["preference_bundle_type"];
        };
        PrependCnamSpamFilterRuleCreateRequest: {
            /** @description The text to update the CNAM value with before showing it to the receiver of the call. */
            text: string;
        } & (Omit<components["schemas"]["SpamFilterRuleCreateUpdateRequest"], "action_type"> & {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            action_type: "prepend_cnam";
        });
        PrependSpamFilterRule: {
            text: string;
        } & (Omit<components["schemas"]["SpamFilterRule"], "action"> & {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            action: "prepend";
        });
        Provision: {
            /**
             * @description A unique ID representing the device. This will remain the same when when logging out of the app and signing back in with a different username.
             * @example dv_dy9D7QZbPzvJ
             */
            device_id: string;
            /**
             * @description If returned, this value must be used as "Bearer Token" on future requests.
             * @example eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
             */
            claims_token?: string | null;
            user: components["schemas"]["User"];
            user_type: components["schemas"]["UserAccessType"];
            /** @description A list of groups the user is member of. */
            assigned_groups: components["schemas"]["UserGroup"][];
            /** @description A list of groups on account. */
            account_groups: components["schemas"]["UserGroup"][];
            account: components["schemas"]["Account"];
            /** @description A list of numbers on the Telzio Account that this user is allowed to make calls from. */
            available_numbers: components["schemas"]["Number"][];
            assigned_number: components["schemas"]["Number"];
            /** @description A list of tags on the Telzio Account */
            account_tags: components["schemas"]["Tag"][];
            /** @description Contains a list of policies the user must consent to.
             *     Some policies may not be in effect yet, but should still be presented to the user upon login. This is defined by the policy's _"effective date"_. */
            legal_policies?: components["schemas"]["LegalPolicy"][] | null;
            resource_configurations?: components["schemas"]["CustomerIoConfiguration"][] | null;
        };
        QueryConversationResponse: {
            query_result: components["schemas"]["QueryConversationResult"];
            /** @example cnv_pWw8OyKAkV12 */
            conversation_id?: string;
            /** @description In case query_result is "conversation_exists_no_access", this shows who currently owns the conversation. */
            current_owner?: (components["schemas"]["AssignedUser"] | components["schemas"]["AssignedUserGroup"]) | null;
        };
        /** @enum {string} */
        QueryConversationResult: "conversation_exists" | "no_conversation_exists" | "conversation_exists_no_access";
        Queue: {
            /**
             * @description The unique ID of the queue.
             * @example que_jxEPmymeP9WJ
             */
            queue_id: string;
            /** @description The name of the queue. */
            name: string;
            /** @description A list of agents associated with this queue. */
            agents?: components["schemas"]["QueueAgent"][] | null;
            /** @description A list of calls currently going through this queue. */
            calls?: components["schemas"]["QueueCall"][] | null;
            summary?: components["schemas"]["QueueSummary"];
        };
        QueueAgent: {
            user: components["schemas"]["User"];
            status?: components["schemas"]["QueueAgentAvailabilityStatus"];
            /** @description Defines if the user is available to take calls or not. */
            enabled: boolean;
            /**
             * Format: int32
             * @description Defines a period of time to wait after each ended call, before allowing new calls to be directed to this agent.
             */
            grace_time: number;
            /**
             * Format: int32
             * @description If the agent is currently in a gracing period, this displays how much time is left.
             */
            gracing_time_left?: number | null;
            queue?: components["schemas"]["Queue"];
        };
        /** @enum {string} */
        QueueAgentAvailabilityStatus: "offline" | "unavailable" | "idle" | "ringing" | "busy" | "gracing";
        QueueCall: {
            call?: components["schemas"]["Call"];
            status?: components["schemas"]["QueueCallStatus"];
            /** @description A list of timestamps for when certain events occurred for this call. */
            event_timestamps?: {
                [key: string]: string | null;
            } | null;
            /** @description A list of int showing how many seconds the call had a certain status.
             *     This can for example be used to show hold time and current talk time. */
            event_durations?: {
                [key: string]: number | null;
            } | null;
            connected_agent?: components["schemas"]["QueueAgent"];
        };
        /** @enum {string} */
        QueueCallStatus: "waiting" | "connected" | "completed" | "timeout" | "abandoned" | "no_agents" | "error" | "kicked";
        QueueList: {
            /** @description A list of Queue objects. */
            data?: components["schemas"]["Queue"][] | null;
        };
        QueueSummary: {
            /**
             * Format: int32
             * @description The total number of agents assigned to the queue.
             */
            agents_total: number;
            /**
             * Format: int32
             * @description The number of online agents who are currently not on the phone and available to take calls.
             */
            agents_idle: number;
            /**
             * Format: int32
             * @description The number of online agents who are currently talking to someone, and can't take any new calls right now.
             */
            agents_busy: number;
            /**
             * Format: int32
             * @description The number of online agents who are now in gracing-mode because they recently have been talking.
             *     Gracing mode allows agents some time to wrap up their previous call before taking a new one.
             */
            agents_gracing: number;
            /**
             * Format: int32
             * @description The total number of offline agents, who are either not connected to Telzio or marked as unavailable in the queue.
             */
            agents_offline: number;
            /**
             * Format: int32
             * @description Current number of calls waiting in the queue.
             */
            calls_waiting?: number;
            /**
             * Format: int32
             * @description Current number of calls currently connected to an agent.
             */
            calls_connected?: number;
            /**
             * Format: int32
             * @description The the longest time any of the current callers in the queue has been waiting.
             */
            longest_hold_time?: number;
            /**
             * Format: int32
             * @description The average hold time of current callers.
             */
            average_hold_time?: number;
        };
        RecentCall: {
            /** @description The unique ID of the call */
            call_id: string;
            /** @description Caller who made the call */
            from: components["schemas"]["UserCallerType"] | components["schemas"]["PhoneNumberCallerType"] | components["schemas"]["FeatureCodeCallerType"];
            /** @description Caller who received the call */
            to: components["schemas"]["UserCallerType"] | components["schemas"]["PhoneNumberCallerType"] | components["schemas"]["FeatureCodeCallerType"];
            direction: components["schemas"]["CallDirection"];
            status: components["schemas"]["RecentCallStatus"];
            /**
             * @description The telzio number_id that for inbound calls was called, or for outbound calls was called from.
             * @example num_y2MkJ3G4DBoW
             */
            number_id: string;
            /**
             * Format: date-time
             * @description Date of the call
             */
            date: string;
        };
        /** @enum {string} */
        RecentCallFilters: "missed" | "outbound" | "inbound";
        RecentCallList: {
            data?: components["schemas"]["RecentCall"][] | null;
            has_more?: boolean;
        };
        /** @enum {string} */
        RecentCallStatus: "completed" | "missed";
        Recording: {
            /**
             * @description The unique ID of the recording.
             * @example rec_0MW8YeNR8n15
             */
            recording_id: string;
            /** @description The Call ID of the call associated with the recording */
            call_id: string;
            /** @description Phone number or username of caller */
            from?: (components["schemas"]["UserCallerType"] | components["schemas"]["PhoneNumberCallerType"] | components["schemas"]["FeatureCodeCallerType"]) | null;
            /** @description Number that was called */
            to?: (components["schemas"]["UserCallerType"] | components["schemas"]["PhoneNumberCallerType"] | components["schemas"]["FeatureCodeCallerType"]) | null;
            direction?: components["schemas"]["RecordingDirection"];
            status: components["schemas"]["RecordingStatus"];
            /**
             * Format: date-time
             * @description When the recording was created.
             * @example 2020-03-17T19:30:22Z
             */
            created: string;
            /**
             * Format: int32
             * @description The playback length of the recording in seconds
             * @example 324
             */
            duration: number;
            /** @description A list of objects containing the tags that are currently assigned to the recording. */
            tags?: components["schemas"]["Tag"][] | null;
            /** @description A list of objects containing the comments added to the recording. */
            comments?: components["schemas"]["Comment"][] | null;
            /** @description A list of the users or groups that have been assigned to the recording. */
            assignment?: (components["schemas"]["AssignedUser"] | components["schemas"]["AssignedUserGroup"]) | null;
        };
        /** @enum {string} */
        RecordingDirection: "inbound" | "outbound" | "internal";
        /** @enum {string} */
        RecordingFilters: "new" | "listened";
        RecordingList: {
            /** @description List of Recordings */
            data?: components["schemas"]["Recording"][] | null;
            has_more?: boolean;
        };
        /** @enum {string} */
        RecordingStatus: "new" | "listened";
        RecordingUpdateResponse: {
            /** @description List of timeline events created (if any) by this update. */
            data?: (components["schemas"]["CommentEvent"] | components["schemas"]["AssignmentEvent"] | components["schemas"]["TagsEvent"])[] | null;
        };
        RejectSpamFilterRule: Omit<components["schemas"]["SpamFilterRule"], "action"> & {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            action: "reject";
        };
        RejectSpamFilterRuleCreateUpdateRequest: Omit<components["schemas"]["SpamFilterRuleCreateUpdateRequest"], "action_type"> & {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            action_type: "reject";
        };
        ResourceConfiguration: {
            /** @description The resource type. */
            type: string;
        };
        SMS: {
            /** @example cnv_6Jl81NB6PrbV */
            conversation_id: string;
            /** @example msg_Wb2DzJdjD3j7 */
            sms_id?: string;
            /**
             * @description The text in the SMS. This can be null if the sender only included a picture.
             * @example There's A Message In My Alpha-Bits...
             */
            text?: string | null;
            /**
             * Format: date-time
             * @description When the SMS was sent or received.
             * @example 1992-07-18T19:30:22Z
             */
            created: string;
            status: components["schemas"]["SMSStatus"];
            direction: components["schemas"]["SMSDirection"];
            /** @description The sender of the SMS. */
            sender: components["schemas"]["PhoneNumberParticipant"] | components["schemas"]["UserParticipant"] | components["schemas"]["UserGroupParticipant"];
            /** @description The recipient of the message */
            recipient: components["schemas"]["PhoneNumberParticipant"] | components["schemas"]["UserParticipant"] | components["schemas"]["UserGroupParticipant"];
            number: components["schemas"]["Number"];
            /** @description If this message has media attached, these are the IDs of those. */
            media_attachments?: components["schemas"]["SMSMedia"][] | null;
        };
        /** @enum {string} */
        SMSDirection: "inbound" | "outbound";
        SMSMedia: {
            /**
             * @description The unique ID associated with this SMS media.
             * @example mms_5ZV8vy3dDLMJ
             */
            sms_media_id: string;
            /** @example msg_lXMk9GeA8d0Y */
            sms_id?: string;
            status: components["schemas"]["SMSMediaStatus"];
            /**
             * Format: date-time
             * @description When the media was created.
             * @example 1992-07-18T19:30:22Z
             */
            created: string;
            /**
             * @description The mime type of the binary file.
             * @example image/jpg
             */
            mime_type: string;
            /**
             * @description The original filename.
             * @example peter_pumpkineater.jpg
             */
            filename: string;
        };
        /** @enum {string} */
        SMSMediaStatus: "active" | "deleted";
        SMSMediaUpload: {
            /** @description A temporary ID for an uploaded file, that cane be used as a media attachment in an SMS. */
            sms_media_upload_id?: string | null;
        };
        /** @enum {string} */
        SMSStatus: "active" | "deleted" | "failed";
        SipConnectionData: {
            /** @description SIP URI used when creating a sip connection */
            sip_uri?: string | null;
            /** @description Name portion of from header to use */
            from_name?: string | null;
            /** @description List of available websocket sip endpoints */
            ws_sip_endpoints?: string[] | null;
            web_rtc_peer_connection_data?: components["schemas"]["WebRtcPeerConnectionData"];
        };
        SmsConversationIdent: {
            /** Format: int32 */
            conversationId?: number;
        };
        SmsConversationItem: {
            sms: components["schemas"]["SMS"];
        } & (Omit<components["schemas"]["ConversationItem"], "type"> & {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "sms";
        });
        SmsMessageIdent: {
            /** Format: int32 */
            messageId?: number;
        };
        /** @enum {string} */
        SortDirection: "desc" | "asc";
        SoundsPreferenceBundle: {
            /** @description A list of sounds the user has chosen on their device. */
            sounds: {
                [key: string]: string | null;
            };
        } & (Omit<components["schemas"]["PreferenceBundle"], "type"> & {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "sounds";
        });
        SoundsPreferenceBundleUpdateRequest: {
            /** @description The filename of the sound to play when new calls come in. */
            ringtone?: string | null;
            /** @description The filename of the sound to play when a new SMS arrives. */
            new_sms?: string | null;
            /** @description The filename of the sound to play when new voicemail arrives. */
            new_voicemail?: string | null;
            /** @description The filename of the sound to play when a new fax arrived. */
            new_fax?: string | null;
            /** @description The filename of the sound to play when someone is assigned to yourself. */
            new_assignment?: string | null;
            /** @description The filename of the sound to play when other notifications occur in the app. */
            notifications?: string | null;
        } & (Omit<components["schemas"]["PreferenceBundleUpdateRequestBase"], "type"> & {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "sounds";
        });
        SpamFilterRule: {
            /** @description The type of action taken when an incoming call's spam score is above a rule's threshold. */
            action: string;
            /**
             * @description The unique ID for the spam filter rule.
             * @example sfr_yZG8nRq28239
             */
            spam_filter_rule_id: string;
            /**
             * Format: int32
             * @description Calls with a spam score above the threshold will trigger the rule's action.
             * @example 80
             */
            threshold: number;
            number?: components["schemas"]["Number"];
        };
        SpamFilterRuleCreateUpdateRequest: {
            action_type: string;
            /**
             * @description Specify an ID of a number on the account to let the rule apply only to that number.
             * @example num_Q3Kkj45mo8eq
             */
            number_id?: string | null;
        };
        SpamFilterRuleList: {
            data?: (components["schemas"]["RejectSpamFilterRule"] | components["schemas"]["TransferSpamFilterRule"] | components["schemas"]["PrependSpamFilterRule"] | components["schemas"]["AppendSpamFilterRule"] | components["schemas"]["OverrideSpamFilterRule"])[] | null;
            has_more?: boolean;
        };
        Tag: {
            /**
             * @description The unique ID for the tag.
             * @example tag_oaVDNv6MDRGp
             */
            tag_id: string;
            /** @description The name of the tag. */
            name: string;
            /** @description Indicates whether or not the tag is usable in Telzio. When deleted, active is set to false. */
            active: boolean;
        };
        TagConversationItem: {
            tags: components["schemas"]["Tag"][];
            created_by: components["schemas"]["User"];
            /** Format: date-time */
            created: string;
        } & (Omit<components["schemas"]["ConversationItem"], "type"> & {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "tags";
        });
        /** @description A list of tags. */
        TagList: {
            /** @description A list of objects containing the basic details about each voicemail message. */
            data?: components["schemas"]["Tag"][] | null;
            /**
             * @description Defines if there are more objects available via paging.
             * @example true
             */
            has_more?: boolean;
        };
        TagsEvent: {
            /** @description The tags assigned to the timeline at this point in time. */
            tags?: components["schemas"]["Tag"][] | null;
            /**
             * Format: date-time
             * @description When the tags were assigned to the timeline.
             */
            created?: string | null;
            created_by?: components["schemas"]["User"];
        } & (Omit<components["schemas"]["TimelineEvent"], "type"> & {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "tags";
        });
        TelzioItem: Record<string, never>;
        TextToSpeech: {
            /**
             * @description The unique ID of the voice used to generate the greeting.
             * @example tts_dy9D7KNEDzvJ
             */
            voice_id: string;
            /** @description The text used when generating the greeting. */
            text: string;
        };
        TimeZone: {
            /** @description The database name of the time zone. */
            name: string;
            /** @description Display name of the time zone in a condensed list view. */
            display_name?: string | null;
            /**
             * Format: int32
             * @description An arbitrary sort order for a condensed list of time zones.
             */
            sort_order?: number | null;
            /** @description The ISO Alpha-2 representation of the primary country associated with the time zone. */
            country_iso?: string | null;
        };
        TimeZoneList: {
            data?: components["schemas"]["TimeZone"][] | null;
        };
        TimelineEvent: {
            /** @description The type of item. */
            type: string | null;
            /**
             * @description The ID of the timeline the event is associated with.
             * @example tev_AV98VmM6DlYd
             */
            timeline_event_id?: string;
        };
        TimelineEventList: {
            data?: (components["schemas"]["CommentEvent"] | components["schemas"]["AssignmentEvent"] | components["schemas"]["TagsEvent"])[] | null;
            has_more?: boolean;
        };
        TransferSpamFilterRule: {
            call_flow: components["schemas"]["CallFlow"];
        } & (Omit<components["schemas"]["SpamFilterRule"], "action"> & {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            action: "transfer";
        });
        TransferSpamFilterRuleCreateRequest: {
            /**
             * @description The ID of the call flow calls with a spam score higher than the rule's threshold should be transferred to.
             * @example flo_AzlD0QAV8nbV
             */
            call_flow_id: string;
        } & (Omit<components["schemas"]["SpamFilterRuleCreateUpdateRequest"], "action_type"> & {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            action_type: "transfer";
        });
        TurnServer: {
            /** @description TURN server urls */
            urls?: string[] | null;
            /** @description TURN Server Username */
            username?: string | null;
            /** @description TURN Server Password */
            password?: string | null;
        };
        TurnServers: {
            turn_udp?: components["schemas"]["TurnServer"];
            turn_tls?: components["schemas"]["TurnServer"];
            turn_tls_ga?: components["schemas"]["TurnServer"];
        };
        UnansweredCallsPreferenceBundle: {
            /**
             * Format: int32
             * @description The time to ring the user's phone before transferring the call to the destination.
             */
            timeout: number;
            /** @description The destination calls are directed to. If set to _null_, the call will just keep ringing and eventually hang up when the timeout period is reached. */
            destination?: (components["schemas"]["CallDestinationVoicemail"] | components["schemas"]["CallDestinationUser"] | components["schemas"]["CallDestinationUserGroup"] | components["schemas"]["CallDestinationCallFlow"] | components["schemas"]["CallDestinationPhoneNumber"]) | null;
        } & (Omit<components["schemas"]["PreferenceBundle"], "type"> & {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "unanswered_calls";
        });
        UnansweredCallsPreferenceBundleUpdateRequest: {
            /**
             * Format: int32
             * @description The time to ring the user's phone before transferring the call to the destination.
             */
            timeout?: number;
            destination_type?: components["schemas"]["CallDestinationType"];
            /**
             * @description Required if `destination_type` is set to `user`.
             * @example usr_RJVDpXZmDx5j
             */
            user_id?: string | null;
            /**
             * @description Required if `destination_type` is set to `user_group`.
             * @example usg_jXmDLJ67PgGZ
             */
            user_group_id?: string | null;
            /**
             * @description Required if `destination_type` is set to `call_flow`.
             * @example flo_B5Kk53Xw8zNe
             */
            call_flow_id?: string | null;
            /** @description Required if `destination_type` is set to `phone_number`. Must be formatted in E164 with leading "+". */
            phone_number?: string | null;
        } & (Omit<components["schemas"]["PreferenceBundleUpdateRequestBase"], "type"> & {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "unanswered_calls";
        });
        UnauthorizedError: {
            type: components["schemas"]["UnauthorizedErrorType"];
            /**
             * @description A human-readable message providing more details about the error. This error can be shown to the end user.
             * @example Invalid username or password
             */
            message: string;
        };
        /** @enum {string} */
        UnauthorizedErrorType: "unauthorized" | "unauthorized_credentials" | "unauthorized_no_device_found" | "unauthorized_not_active" | "unauthorized_not_found_or_not_active" | "unauthorized_mfa_required" | "unauthorized_mfa_invalid" | "unauthorized_no_numbers" | "unauthorized_too_many_failed_attempts" | "unauthorized_no_bearer_token" | "unauthorized_bearer_token_invalid" | "unauthorized_policy_consents_missing";
        User: {
            /**
             * @description The unique ID representing the user.
             * @example usr_zo4PAZQgk97E
             */
            user_id: string;
            status: components["schemas"]["UserStatus"];
            /**
             * @description The user's username
             * @example pgriffin
             */
            username: string;
            /**
             * @description The user's first name
             * @example Peter
             */
            first_name: string;
            /**
             * @description The user's last name
             * @example Griffin
             */
            last_name: string;
            /**
             * @description The user's email address.
             * @example pgriffin@pawtucketpatriotale.com
             */
            email: string;
            /**
             * @description The user's extension
             * @example 420
             */
            extension?: string | null;
            /**
             * @description Defines whether or not the user has a custom avatar.
             * @example true
             */
            has_avatar?: boolean;
            /** @description A list of groups the user is currently a member of. */
            groups?: components["schemas"]["UserGroup"][] | null;
            availability?: components["schemas"]["UserAvailability"];
            /** @description A list of Queue Agents associated with this user. */
            queue_agents?: components["schemas"]["QueueAgent"][] | null;
        };
        /** @enum {string} */
        UserAccessType: "user" | "administrator" | "account_owner";
        UserAvailability: {
            /**
             * @description The user's username
             * @example pgriffin
             */
            username?: string | null;
            status?: components["schemas"]["UserAvailabilityStatus"];
        };
        UserAvailabilityList: {
            data?: components["schemas"]["UserAvailability"][] | null;
            has_more?: boolean;
        };
        /** @enum {string} */
        UserAvailabilityStatus: "offline" | "idle" | "ringing" | "busy" | "dnd";
        /** @enum {string} */
        UserAvatarSize: "small" | "medium" | "large";
        UserCallerType: {
            user: components["schemas"]["User"];
        } & (Omit<components["schemas"]["Caller"], "type"> & {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "user";
        });
        UserDetailsPreferenceBundle: {
            /**
             * @description The user's username. Can not be changed.
             * @example pgriffin
             */
            username: string;
            /**
             * @description The user's first name.
             * @example Peter
             */
            first_name: string;
            /**
             * @description The user's last name.
             * @example Griffin
             */
            last_name: string;
            /**
             * @description The user's email address.
             * @example pgriffin@pawtucketpatriotale.com
             */
            email: string;
            /**
             * @description The user's extension.
             * @example 420
             */
            extension?: string | null;
            /**
             * @description Defines whether or not the user has a custom avatar.
             * @example true
             */
            has_avatar: boolean;
            /**
             * @description The user's timezone. Defaults to account's default timezone.
             * @example America/New_York
             */
            time_zone?: string | null;
            /**
             * @description The default number used when making outbound calls.
             * @example num_Q3KkjQlLPeqd
             */
            default_number_id: string;
            /**
             * @description The ID of the hold music for the user, when transferring or putting calls on hold.
             * @example moh_pWNkZLKV87Bq
             */
            hold_music_id?: string | null;
            /** @description If set, the user will be asked to enter this pin when calling the voicemail box. */
            voicemail_pin?: string | null;
        } & (Omit<components["schemas"]["PreferenceBundle"], "type"> & {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "user_details";
        });
        UserDetailsPreferenceBundleUpdateRequest: {
            /**
             * @description The user's first name.
             * @example Peter
             */
            first_name?: string | null;
            /**
             * @description The user's last name.
             * @example Griffin
             */
            last_name?: string | null;
            /**
             * @description The user's email address
             * @example pgriffin@pawtucketpatriotale.com
             */
            email?: string | null;
            /**
             * @description The user's timezone. Defaults to account's default time zone.
             *     See /utilities/time_zones for a list of available time zones.
             * @example America/New_York
             */
            time_zone?: string | null;
            /**
             * @description The default number used when making outbound calls.
             * @example num_lXMk9Ojq8d0Y
             */
            default_number_id?: string | null;
            /**
             * @description The ID of the hold music for the user, when transferring or putting calls on hold.
             * @example moh_MxJD3yg2lPNr
             */
            hold_music_id?: string | null;
            /** @description If set, the user will be asked to enter this pin when calling the voicemail box. */
            voicemail_pin?: string | null;
        } & (Omit<components["schemas"]["PreferenceBundleUpdateRequestBase"], "type"> & {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "user_details";
        });
        UserGroup: {
            /**
             * @description The unique ID representing this user group.
             * @example usg_zdVPya37Pgvx
             */
            user_group_id: string;
            /**
             * @description The name of the group.
             * @example Sales Department
             */
            group_name: string;
            /**
             * @description The group's extension
             * @example 850
             */
            extension?: string | null;
        };
        UserGroupList: {
            data?: components["schemas"]["UserGroup"][] | null;
            has_more?: boolean;
        };
        UserGroupParticipant: {
            group: components["schemas"]["UserGroup"];
        } & (Omit<components["schemas"]["ConversationParticipant"], "type"> & {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "group";
        });
        /** @enum {string} */
        UserIncludes: "queue_agents";
        UserList: {
            /** @description The list of users */
            data?: components["schemas"]["User"][] | null;
            has_more?: boolean;
            /** @description Used to obtain the next page of data when more entries than can fit in one page is available. */
            next_page_id?: string | null;
        };
        /** @enum {string} */
        UserListSortOption: "firstname_lastname" | "lastname_firstname" | "username";
        UserParticipant: {
            user: components["schemas"]["User"];
        } & (Omit<components["schemas"]["ConversationParticipant"], "type"> & {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "user";
        });
        /** @enum {string} */
        UserStatus: "active" | "deleted" | "suspended" | "disabled" | "unknown";
        UserVoicemailFileUpdateRequest: {
            /**
             * Format: binary
             * @description An mp3 or wav file with a max file size of 6mb.
             */
            file: string;
        } & (Omit<components["schemas"]["UserVoicemailUpdateRequest"], "type"> & {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "file";
        });
        UserVoicemailTtsUpdateRequest: {
            /**
             * @description The unique ID of the voice used to generate the greeting.
             * @example tts_pQq8bl1JkMxN
             */
            voice_id?: string;
            /** @description The text used when generating the greeting. */
            text: string;
        } & (Omit<components["schemas"]["UserVoicemailUpdateRequest"], "type"> & {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "text_to_speech";
        });
        UserVoicemailUpdateRequest: {
            /** @description The type of caller */
            type: string;
        };
        Voice: {
            /**
             * @description The unique ID of the voice.
             * @example tts_bG58KOmq8Ylz
             */
            voice_id: string;
            /** @description Human readably display name for this language and gender combination. */
            display_name?: string | null;
            gender: components["schemas"]["VoiceGender"];
            /** @description The language used when generating text-to-speech with this voice. */
            language: string;
        };
        /** @enum {string} */
        VoiceGender: "male" | "female";
        VoiceList: {
            data?: components["schemas"]["Voice"][] | null;
        };
        Voicemail: {
            /**
             * @description The unique ID of the voicemail.
             * @example vm_6Jl81pRapDrb
             */
            voicemail_id: string;
            /** @description The Call ID of the call associated with the voicemail */
            call_id: string;
            /** @description Caller that left the voicemail */
            from?: (components["schemas"]["UserCallerType"] | components["schemas"]["PhoneNumberCallerType"] | components["schemas"]["FeatureCodeCallerType"]) | null;
            /** @description Number that was called */
            to?: (components["schemas"]["UserCallerType"] | components["schemas"]["PhoneNumberCallerType"] | components["schemas"]["FeatureCodeCallerType"]) | null;
            status: components["schemas"]["VoicemailStatus"];
            /**
             * Format: date-time
             * @description When the voicemail was created.
             * @example 2020-03-17T19:30:22Z
             */
            created: string;
            /**
             * Format: int32
             * @description The playback duration of the voicemail in seconds
             * @example 154
             */
            duration: number;
            /**
             * @description A voice-to-text transcription of the voicemail.
             * @example Gosh, It’s Not Like The Internet To Go Crazy About Something Small And Stupid.
             */
            transcription?: string | null;
            /** @description A list of objects containing the tags that are currently assigned to the voicemail. */
            tags?: components["schemas"]["Tag"][] | null;
            /** @description The user or group of users the Voicemail currently is assigned to. */
            assignment?: (components["schemas"]["AssignedUser"] | components["schemas"]["AssignedUserGroup"]) | null;
        };
        /** @enum {string} */
        VoicemailFilters: "unlistened" | "listened";
        /** @description A list of voicemails. */
        VoicemailList: {
            /** @description A list of objects containing the basic details about each voicemail message. */
            data: components["schemas"]["Voicemail"][];
            /**
             * @description Defines if there are more objects available via paging.
             * @example true
             */
            has_more: boolean;
        };
        /** @enum {string} */
        VoicemailStatus: "unlistened" | "listened";
        VoicemailUpdateResponse: {
            /** @description List of timeline events created (if any) by this update. */
            data?: (components["schemas"]["CommentEvent"] | components["schemas"]["AssignmentEvent"] | components["schemas"]["TagsEvent"])[] | null;
        };
        WebRtcPeerConnectionData: {
            /** @description PeerConnection bundle policy */
            bundle_policy?: string | null;
            /**
             * Format: int32
             * @description PeerConnection iceCandidatePoolSize
             */
            ice_candidate_pool_size?: number;
            turn_servers?: components["schemas"]["TurnServers"];
            /** @description List of STUN servers (if any) to use */
            stun_servers?: string[] | null;
        };
        /** @enum {string} */
        preference_bundle_type: "user_details" | "unanswered_calls" | "password" | "features" | "availability" | "sounds";
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
