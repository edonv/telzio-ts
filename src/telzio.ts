import createClient, { Middleware, onRequest } from "openapi-fetch";
import type { paths } from "./openapi/schema.js"; // generated by openapi-typescript

// TODO: implement custom type wrapper that has parameters like auth and plugs into this
type HttpMethod = "get" | "put" | "post" | "delete" | "options" | "head" | "patch" | "trace";
interface UnprotectedRoute {
    path: keyof paths,
    method: HttpMethod,
}

function unprotectedRoutes(): UnprotectedRoute[] {
    /*
    script for finding these from schema
    for (const path in paths) {
        const pathObj = paths[path as keyof typeof paths];
        for (const method in pathObj) {
            const operation = pathObj[method as keyof typeof pathObj];
            if (!('security' in operation)) {
                console.log(path, method);
            }
        }
    }
    */
    return [
        {
            path: '/v3/auth',
            method: "post",
        },
        {
            path: '/v3/auth/password/reset',
            method: "post",
        },
        {
            path: '/v3/auth/password/update',
            method: "post",
        },
        {
            path: '/v3/logging',
            method: "post",
        },
    ];
}

export interface TelzioOptions {
    apiKey?: string,
}

export default class Telzio {
    private static readonly _baseUrl = 'https://api.telzio.com';

    private _options: TelzioOptions;
    private _unprotectedRoutes: UnprotectedRoute[];
    readonly client: ReturnType<typeof createClient<paths>>;

    constructor(options: TelzioOptions = {}) {
        this._options = options;
        this._unprotectedRoutes = unprotectedRoutes();

        this.client = createClient<paths>({
            baseUrl: Telzio._baseUrl,
        });

        // add auth middleware
        const onRequestCallback: typeof onRequest = async (req) => {
            const schemaPath = req.schemaPath as keyof paths;
            // const method = req.method.toLowerCase() as HttpMethod;
        
            const unprotected = this._unprotectedRoutes.some((route) => {
                return route.path == schemaPath;
                // && route.method == ;
            });
        
            if (unprotected) {
                return undefined;
            }
                
            if (this._options.apiKey) {
                // append API token
                req.params.header = {
                    ...req.params.header,
                    Authorization: `Bearer ${this._options.apiKey}`,
                };
            }
            return req;
        }
        const authMiddleware: Middleware = {
            onRequest: onRequestCallback,
        }

        this.client.use(authMiddleware);
    }

    // TODO: figure out some way to add functions from operationIds
    // TODO: add static functions that don't require auth

    setAPIKey(key: string) {
        this._options.apiKey = key;
    }

    clearAPIKey() {
        this._options.apiKey = undefined;
    }
}
